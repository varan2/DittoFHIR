
=== Sheet Bindings =====================================

 -- Row 1 -----------------------------------
  Binding Name = FilterOperator
  Binding = code list
  Reference = #filter-operator
  Definition = The kind of operation to perform as a part of a property based filter.

 -- Row 2 -----------------------------------
  Binding Name = ConceptDesignationUse
  Binding = value set
  Reference = valueset-designation-use
  Definition = Details of how a designation would be used.
  Conformance = extensible

=== Sheet filter-operator =====================================

 -- Row 1 -----------------------------------
  Id = 1
  Code = =
  Display = Equals
  Definition = The specified property of the code equals the provided value.

 -- Row 2 -----------------------------------
  Id = 2
  Code = is-a
  Display = Is A (by subsumption)
  Definition = Includes all concept ids that have a transitive is-a relationship with the concept Id provided as the value, including the provided concept itself (i.e. include child codes)

 -- Row 3 -----------------------------------
  Id = 8
  Code = descendent-of
  Display = Descendent Of (by subsumption)
  Definition = Includes all concept ids that have a transitive is-a relationship with the concept Id provided as the value, excluding the provided concept itself (i.e. include child codes)

 -- Row 4 -----------------------------------
  Id = 3
  Code = is-not-a
  Display = Not (Is A) (by subsumption)
  Definition = The specified property of the code does not have an is-a relationship with the provided value.

 -- Row 5 -----------------------------------
  Id = 4
  Code = regex
  Display = Regular Expression
  Definition = The specified property of the code  matches the regex specified in the provided value.

 -- Row 6 -----------------------------------
  Id = 5
  Code = in
  Display = In Set
  Definition = The specified property of the code is in the set of codes or concepts specified in the provided value (comma separated list).

 -- Row 7 -----------------------------------
  Id = 6
  Code = not-in
  Display = Not in Set
  Definition = The specified property of the code is not in the set of codes or concepts specified in the provided value (comma separated list).

 -- Row 8 -----------------------------------
  Id = 7
  Code = generalizes
  Display = Generalizes (by Subsumption)
  Definition = Includes all concept ids that have a transitive is-a relationship from the concept Id provided as the value, including the provided concept itself (e.g. include parent codes)

 -- Row 9 -----------------------------------
  Id = 8
  Code = exists
  Display = Exists
  Definition = The specified property of the code has at least one value (if the specified value is true; if the specified value is false, then matches when the specified property of the code has no values)

=== Sheet Invariants =====================================

 -- Row 1 -----------------------------------
  Id = 1
  Context = ValueSet.compose.include
  English = A value set include/exclude SHALL have a value set or a system
  XPath = exists(f:valueSet) or exists(f:system)
  Expression = valueSet.exists() or system.exists()

 -- Row 2 -----------------------------------
  Id = 2
  Context = ValueSet.compose.include
  English = A value set with concepts or filters SHALL include a system
  XPath = not(exists(f:concept) or exists(f:filter)) or exists(f:system)
  Expression = (concept.exists() or filter.exists()) implies system.exists()

 -- Row 3 -----------------------------------
  Id = 3
  Context = ValueSet.compose.include
  English = Cannot have both concept and filter
  XPath = not(exists(f:concept)) or not(exists(f:filter))
  Expression = concept.empty() or filter.empty()

 -- Row 4 -----------------------------------
  Id = 5
  Context = ValueSet
  English = Value set SHALL contain at least one of a compose or an expansion element
  XPath = exists(f:compose) or exists(f:expansion)
  Expression = compose.exists() or expansion.exists()

 -- Row 5 -----------------------------------
  Id = 6
  Context = ValueSet.expansion.contains
  English = SHALL have a code or a display
  XPath = exists(f:code) or exists(f:display)
  Expression = code.exists() or display.exists()

 -- Row 6 -----------------------------------
  Id = 9
  Context = ValueSet.expansion.contains
  English = Must have a code if not abstract
  XPath = exists(f:code) or (f:abstract/@value = true())
  Expression = code.exists() or abstract = true

 -- Row 7 -----------------------------------
  Id = 10
  Context = ValueSet.expansion.contains
  English = Must have a system if a code is present
  XPath = exists(f:system) or not(exists(f:code))
  Expression = code.empty() or system.exists()

=== Sheet Data Elements =====================================

 -- Row 1 -----------------------------------
  Element = ValueSet
  UML = 0;0
  Type = MetadataResource
  Short Name = A set of codes drawn from one or more code systems
  Definition = A value set specifies a set of codes drawn from one or more code systems.
  RIM Mapping = N/A
  w5 = conformance.terminology

 -- Row 2 -----------------------------------
  Element = ValueSet.url
  RIM Mapping = N/A

 -- Row 3 -----------------------------------
  Element = ValueSet.identifier
  Card. = 0..*
  CDISC Define.xml 2.0 Mapping = Identifier part

 -- Row 4 -----------------------------------
  Element = ValueSet.version

 -- Row 5 -----------------------------------
  Element = ValueSet.name
  Comments = & A name should be provided unless the value set is a contained resource (e.g. an anonymous value set in a profile). Most registries will require a name

 -- Row 6 -----------------------------------
  Element = ValueSet.title

 -- Row 7 -----------------------------------
  Element = ValueSet.status

 -- Row 8 -----------------------------------
  Element = ValueSet.experimental

 -- Row 9 -----------------------------------
  Element = ValueSet.date
  Definition = & (e.g. the \'content logical definition\')
  RIM Mapping = N/A

 -- Row 10 -----------------------------------
  Element = ValueSet.publisher

 -- Row 11 -----------------------------------
  Element = ValueSet.contact

 -- Row 12 -----------------------------------
  Element = ValueSet.description
  Aliases = Scope; Purpose
  Comments = & The description is not intended to describe the semantics of the Value Set - there are no intrinsic semantics separate from the codes contained in its expansion. The description should capture its intended use, which is needed for ensuring integrity for its use in models across future changes. A description should be provided unless the value set is a contained resource (e.g. an anonymous value set in a profile). Most registries will require a description
  RIM Mapping = N/A

 -- Row 13 -----------------------------------
  Element = ValueSet.useContext

 -- Row 14 -----------------------------------
  Element = ValueSet.jurisdiction

 -- Row 15 -----------------------------------
  Element = ValueSet.immutable
  Card. = 0..1
  Summary = Y
  Type = boolean
  Short Name = Indicates whether or not any change to the content logical definition may occur
  Definition = If this is set to \'true\', then no new versions of the content logical definition can be created.  Note: Other metadata might still change
  Comments = Normally immutability is set to \'false\', which is the default assumption if it is not populated.  Note that the implication is that if this is set to \'true\', there may be only one ValueSet version for this definition. Immutability tends to be set to \'true\' in one of two cases: - Where the value set, by the nature of its usage, cannot change.  For example \"All specializations of ACT in ActClassCode\" - Where there\'s no safe way to express the \"Purpose\" such that someone else could safely make changes to the value set definition. Source workflow control must guarantee that the same URI always yields the same definition

 -- Row 16 -----------------------------------
  Element = ValueSet.purpose

 -- Row 17 -----------------------------------
  Element = ValueSet.copyright
  Comments = & Frequently, the copyright differs between the value set and the codes that are included. The copyright statement should clearly differentiate between these when required

 -- Row 18 -----------------------------------
  Element = ValueSet.extensible
  Card. = 0..1
  Summary = Y
  Type = boolean
  Short Name = Whether this is intended to be used with an extensible binding
  Definition = Whether this is intended to be used with an extensible binding or not
  Requirements = It is not required to say whether this intent applies

 -- Row 19 -----------------------------------
  Element = ValueSet.compose
  Card. = 0..1
  Aliases = Content Logical Definition
  UML = 40;290
  Inv. = 5
  Short Name = Definition of the content of the value set (CLD)
  Definition = A set of criteria that define the content logical definition of the value set by including or excluding codes from outside this value set. This I also known as the \"Content Logical Definition\" (CLD)

 -- Row 20 -----------------------------------
  Element = ValueSet.compose.lockedDate
  Card. = 0..1
  Summary = Y
  Type = date
  Short Name = Fixed date for version-less references (transitive)
  Definition = If a locked date is defined, then the Content Logical Definition must be evaluated using the current version as of the locked date for referenced code system(s) and value set instances where ValueSet.compose.include.version is not defined
  Comments = With a defined lockedDate the value set is considered \"Locked\". Otherwise, the value set may have different expansions as underlying code systems and/or value sets evolve.  The interpretation of lockedDate is often dependent on the context - e.g. a SNOMED CT derived value set with a lockedDate will have a different expansion in USA than in UK.  If a value set specifies a version for include and exclude statements, and also specifies a locked date, the specified versions need to be available that date, or the value set will not be usable
  w5 = when.init

 -- Row 21 -----------------------------------
  Element = ValueSet.compose.inactive
  Card. = 0..1
  Summary = y
  Type = boolean
  Short Name = Whether inactive codes are in the value set
  Definition = Whether inactive codes - codes that are not approved for current use - are in the value set. If inactive = true, inactive codes are to be included in the expansion, if inactive = false, the inactive codes will not be included in the expansion. If absent, the behavior is determined by the implementation, or by the applicable ExpansionProfile (but generally, inactive codes would be expected to be included).
  Comments = Note that in the FHIR terminology framework, \"deprecated\" does not mean inactive, but in some code systems (e.g. LOINC, deprecated means inactive). Code systems should define what codes are considered to be inactive. If this is not clearly defined (including in the FHIR code system resource), then all codes are assumed to be active

 -- Row 22 -----------------------------------
  Element = ValueSet.compose.include
  Card. = 1..*
  Summary = y
  UML = 40;390
  Type = =ConceptSet
  Short Name = Include one or more codes from a code system or other value set(s)
  Definition = Include one or more codes from a code system or other value set(s)
  Comments = All the conditions in an include must be true. If a system is listed, all the codes from the system are listed. If one or more filters are listed, all of the filters must apply. If one or more value sets are listed, the codes must be in all the value sets. E.g. each include is \'include all the codes that meet all these conditions\'
  RIM Mapping = N/A

 -- Row 23 -----------------------------------
  Element = ValueSet.compose.include.system
  Card. = 0..1
  Summary = y
  Inv. = 1,2
  Type = uri
  Short Name = The system the codes come from
  Definition = An absolute URI which is the code system from which the selected codes come from
  Comments = If there are no codes or filters, the entire code system is included. Note that the set of codes that are included may contain abstract codes. See \'\'Coding.system\'\' for further documentation about the correct value for the system element
  CDISC Define.xml 2.0 Mapping = ODM/Study/MetaDataVersion/CodeList/ExternalCodeList/Href
  RIM Mapping = N/A

 -- Row 24 -----------------------------------
  Element = ValueSet.compose.include.version
  Card. = 0..1
  Summary = y
  Type = string
  Short Name = Specific version of the code system referred to
  Definition = The version of the code system that the codes are selected from
  Comments = This is used when selecting the descendants of a concept - they may change between versions. If no version is specified, then the exact contents of the value set may not be known until a context of use binds it to a particular version
  CDISC Define.xml 2.0 Mapping = ODM/Study/MetaDataVersion/CodeList/ExternalCodeList/Version
  RIM Mapping = N/A

 -- Row 25 -----------------------------------
  Element = !ValueSet.compose.include.mode
  Card. = 1..1
  Type = code
  Binding = CodeSelectionMode
  Short Name = code | children | descendants | all
  Definition = The mode of selection - whether the codes themselves, and/or their children or descendants are being selected
  RIM Mapping = N/A

 -- Row 26 -----------------------------------
  Element = ValueSet.compose.include.concept
  Card. = 0..*
  UML = down
  Inv. = 3
  Type = =ConceptReference
  Short Name = A concept defined in the system
  Definition = Specifies a concept to be included or excluded.
  Comments = The list of concepts is considered ordered, though the order may not have any particular significance. Typically, the order of an expansion follows that defined in the compose element
  RIM Mapping = N/A

 -- Row 27 -----------------------------------
  Element = ValueSet.compose.include.concept.code
  Card. = 1..1
  Type = code
  Binding = !
  Short Name = Code or expression from system
  Definition = Specifies a code for the concept to be included or excluded
  Comments = Expressions are allowed if defined by the underlying code system
  RIM Mapping = N/A

 -- Row 28 -----------------------------------
  Element = ValueSet.compose.include.concept.display
  Card. = 0..1
  Type = string
  Short Name = Text to display for this code for this value set in this valueset
  Definition = The text to display to the user for this concept in the context of this valueset. If no display is provided, then applications using the value set use the display specified for the code by the system
  Comments = The value set resource allows for an alternative display to be specified for when this concept is used in this particular value set. See notes in the value set narrative about the correct use of this element
  RIM Mapping = N/A

 -- Row 29 -----------------------------------
  Element = ValueSet.compose.include.concept.designation
  Card. = 0..*
  UML = right
  Short Name = Additional representations for this concept
  Definition = Additional representations for this concept when used in this value set - other languages, aliases, specialized purposes, used for particular purposes, etc.

 -- Row 30 -----------------------------------
  Element = ValueSet.compose.include.concept.designation.language
  Card. = 0..1
  Type = code
  Binding = Language
  Short Name = Human language of the designation
  Definition = The language this designation is defined for
  Comments = In the absence of a language, the resource language applies

 -- Row 31 -----------------------------------
  Element = ValueSet.compose.include.concept.designation.use
  Card. = 0..1
  Type = Coding
  Binding = ConceptDesignationUse
  Short Name = Details how this designation would be used
  Definition = A code that details how this designation would be used
  Comments = If no use is provided, the designation can be assumed to be suitable for general display to a human user

 -- Row 32 -----------------------------------
  Element = ValueSet.compose.include.concept.designation.value
  Card. = 1..1
  Type = string
  Short Name = The text value for this designation
  Definition = The text value for this designation

 -- Row 33 -----------------------------------
  Element = ValueSet.compose.include.filter
  Card. = 0..*
  Is Modifier = Y
  Summary = Y
  UML = 230;420
  Inv. = 3
  Short Name = Select codes/concepts by their properties (including relationships)
  Definition = Select concepts by specify a matching criteria based on the properties (including relationships) defined by the system. If multiple filters are specified, they SHALL all be true.
  Comments = Selecting codes by specifying filters based on properties is only possible where the underlying code system defines appropriate properties. Note that in some cases, the underlying code system defines the logical concepts but not the literal codes for the concepts. In such cases, the literal definitions may be provided by a third party
  RIM Mapping = N/A

 -- Row 34 -----------------------------------
  Element = ValueSet.compose.include.filter.property
  Card. = 1..1
  Summary = Y
  Type = code
  Binding = !
  Short Name = A property defined by the code system
  Definition = A code that identifies a property defined in the code system
  RIM Mapping = N/A

 -- Row 35 -----------------------------------
  Element = ValueSet.compose.include.filter.op
  Card. = 1..1
  Summary = Y
  Type = code
  Binding = FilterOperator
  Short Name = = | is-a | descendent-of | is-not-a | regex | in | not-in | generalizes | exists
  Definition = The kind of operation to perform as a part of the filter criteria
  RIM Mapping = N/A

 -- Row 36 -----------------------------------
  Element = ValueSet.compose.include.filter.value
  Card. = 1..1
  Summary = Y
  Type = code
  Binding = !
  Short Name = Code from the system, or regex criteria, or boolean value for exists
  Definition = The match value may be either a code defined by the system, or a string value, which is a regex match on the literal string of the property value when the operation is \'regex\', or one of the values (true and false), when the operation is \'exists\'
  Comments = Use regex matching with care - full regex matching on every SNOMED CT term is prohibitive, for example
  RIM Mapping = N/A

 -- Row 37 -----------------------------------
  Element = ValueSet.compose.include.valueSet
  Card. = 0..*
  Summary = y
  Inv. = 1
  Type = uri
  Short Name = Select only contents included in this value set
  Definition = Selects concepts found in this value set. This is an absolute URI that is a reference to ValueSet.url
  Comments = The value set URI is either a logical reference to a defined value set such as a [SNOMED CT reference set]{snomedct.html#implicit}, or a direct reference to a value set definition using ValueSet.url. The reference may not refer to an actual FHIR ValueSet resource; in this case, whatever is referred to is an implicit definition of a value set that needs to be clear about how versions are resolved
  RIM Mapping = N/A

 -- Row 38 -----------------------------------
  Element = ValueSet.compose.exclude
  Card. = 0..*
  Inv. = 2
  Type = @ValueSet.compose.include
  Short Name = Explicitly exclude codes from a code system or other value sets
  Definition = Exclude one or more codes from the value set based on code system filters and/or other value sets
  Comments = Usually this is used to selectively exclude codes that were included by subsumption in the inclusions. Any display names specified for the codes are ignored
  RIM Mapping = N/A

 -- Row 39 -----------------------------------
  Element = ValueSet.expansion
  Card. = 0..1
  UML = 360;205
  Inv. = 5
  Short Name = Used when the value set is \"expanded\"
  Definition = A value set can also be \"expanded\", where the value set is turned into a simple collection of enumerated codes. This element holds the expansion, if it has been performed
  Comments = Expansion is performed to produce a collection of codes that are ready to use for data entry or validation

 -- Row 40 -----------------------------------
  Element = ValueSet.expansion.identifier
  Card. = 1..1
  Type = uri
  Short Name = Uniquely identifies this expansion
  Definition = An identifier that uniquely identifies this expansion of the valueset. Systems may re-use the same identifier as long as the expansion and the definition remain the same, but are not required to do so
  Comments = Typically, this uri is a UUID (e.g. urn:uuid:8230ff20-c97a-4167-a59d-dc2cb9df16dd)

 -- Row 41 -----------------------------------
  Element = ValueSet.expansion.timestamp
  Card. = 1..1
  Type = dateTime
  Short Name = Time ValueSet expansion happened
  Definition = The time at which the expansion was produced by the expanding system.
  Comments = This SHOULD be a fully populated instant, but in some circumstances, value sets are expanded by hand, and the expansion is published without that precision

 -- Row 42 -----------------------------------
  Element = ValueSet.expansion.total
  Card. = 0..1
  Type = integer
  Short Name = Total number of codes in the expansion
  Definition = The total number of concepts in the expansion. If the number of concept nodes in this resource is less than the stated number, then the server can return more using the offset parameter
  Comments = Paging only applies to flat expansions

 -- Row 43 -----------------------------------
  Element = ValueSet.expansion.offset
  Card. = 0..1
  Type = integer
  Short Name = Offset at which this resource starts
  Definition = If paging is being used, the offset at which this resource starts.  I.e. this resource is a partial view into the expansion. If paging is not being used, this element SHALL not be present
  Comments = Paging only applies to flat expansions. If a filter is applied, the count is the number of concepts that matched the filter, not the number of concepts in an unfiltered view of the expansion
  Missing Meaning = Paging is not being used

 -- Row 44 -----------------------------------
  Element = ValueSet.expansion.parameter
  Card. = 0..*
  UML = 290;80
  Short Name = Parameter that controlled the expansion process
  Definition = A parameter that controlled the expansion process. These parameters may be used by users of expanded value sets to check whether the expansion is suitable for a particular purpose, or to pick the correct expansion
  Comments = The server decides which parameters to include here, but at a minimum, the list SHOULD include the date, filter, and profile parameters passed to the $expand operation (if any)

 -- Row 45 -----------------------------------
  Element = ValueSet.expansion.parameter.name
  Card. = 1..1
  Type = string
  Short Name = Name as assigned by the server
  Definition = The name of the parameter
  Comments = The names are assigned at the discretion of the server
  Committee Notes = There is no standardization of parameter names that control the expansion process. This will be reviewed in the future

 -- Row 46 -----------------------------------
  Element = ValueSet.expansion.parameter.value[x]
  Card. = 0..1
  Type = string | boolean | integer | decimal | uri | code
  Short Name = Value of the named parameter
  Definition = The value of the parameter

 -- Row 47 -----------------------------------
  Element = ValueSet.expansion.contains
  Card. = 0..*
  UML = 500;320
  Short Name = Codes in the value set
  Definition = The codes that are contained in the value set expansion

 -- Row 48 -----------------------------------
  Element = ValueSet.expansion.contains.system
  Card. = 0..1
  Type = uri
  Short Name = System value for the code
  Definition = An absolute URI which is the code system in which the code for this item in the expansion is defined

 -- Row 49 -----------------------------------
  Element = ValueSet.expansion.contains.abstract
  Card. = 0..1
  Type = boolean
  Short Name = If user cannot select this entry
  Definition = If true, this entry is included in the expansion for navigational purposes, and the user cannot select the code directly as a proper value
  Comments = This should not be understood to exclude its use for searching (e.g. by subsumption testing). The client should know whether it is appropriate for the user to select an abstract code or not
  Default Value = false

 -- Row 50 -----------------------------------
  Element = ValueSet.expansion.contains.inactive
  Card. = 0..1
  Type = boolean
  Short Name = If concept is inactive in the code system
  Definition = If the concept is inactive in the code system that defines it. Inactive codes are those that are no longer to be used, but are maintained by the code system for understanding legacy data
  Comments = This should only have a value if the concept is inactive
  Default Value = False

 -- Row 51 -----------------------------------
  Element = ValueSet.expansion.contains.version
  Card. = 0..1
  Type = string
  Short Name = Version in which this code/display is defined
  Definition = The version of this code system that defined this code and/or display. This should only be used with code systems that do not enforce concept permanence
  Comments = The exact value of the version string is specified by the system from which the code is derived

 -- Row 52 -----------------------------------
  Element = ValueSet.expansion.contains.code
  Card. = 0..1
  Inv. = 6
  Type = code
  Binding = !
  Short Name = Code - if blank, this is not a selectable code
  Definition = The code for this item in the expansion hierarchy. If this code is missing the entry in the hierarchy is a place holder (abstract) and does not represent a valid code in the value set

 -- Row 53 -----------------------------------
  Element = ValueSet.expansion.contains.display
  Card. = 0..1
  Inv. = 6
  Type = string
  Short Name = User display for the concept
  Definition = The recommended display for this item in the expansion

 -- Row 54 -----------------------------------
  Element = ValueSet.expansion.contains.designation
  Card. = 0..*
  Type = @ValueSet.compose.include.concept.designation
  Short Name = Additional representations for this item
  Definition = Additional representations for this item - other languages, aliases, specialized purposes, used for particular purposes, etc. These are relevant when the conditions of the expansion do not fix to a single correct representation
  Comments = The designations provided must be based on the value set and code system definitions

 -- Row 55 -----------------------------------
  Element = ValueSet.expansion.contains.contains
  Card. = 0..*
  Type = @ValueSet.expansion.contains
  Short Name = Codes contained under this entry
  Definition = Other codes and entries contained under this entry in the hierarchy
  Comments = If the expansion uses this element, there is  no implication about the logical relationship between them, and the  structure cannot be used for logical inferencing. The structure  exists to provide navigational assistance for helping human users to  locate codes in the expansion.

=== Sheet Search =====================================

 -- Row 1 -----------------------------------
  Name = !system
  Type = uri
  Description = The system for any codes defined by this value set
  Path = ValueSet.codeSystem.system

 -- Row 2 -----------------------------------
  Name = !code
  Type = token
  Description = A code defined in the value set
  Path = ValueSet.codeSystem.concept.code

 -- Row 3 -----------------------------------
  Name = reference
  Type = uri
  Description = A code system included or excluded in the value set or an imported value set
  Path = ValueSet.compose.include.system

 -- Row 4 -----------------------------------
  Name = expansion
  Type = uri
  Path = ValueSet.expansion.identifier

=== Sheet Profiles =====================================

 -- Row 1 -----------------------------------
  Name = ValueSet Extensions
  IG Name = core
  Filename = valueset-extensions.xml
  Type = spreadsheet

 -- Row 2 -----------------------------------
  Name = Shareable Value Set
  IG Name = core
  Filename = valueset-shareable.xml
  Type = spreadsheet

=== Sheet Examples =====================================

 -- Row 1 -----------------------------------
  Name = Extensional
  Identity = example-extensional
  Description = ValueSet Example using enumeration of codes (extensional)
  Filename = valueset-example.xml

 -- Row 2 -----------------------------------
  Name = !InlineCS
  Identity = example-inline
  Description = ValueSet Example defining codes using an inline code system
  Filename = valueset-example-inline.xml

 -- Row 3 -----------------------------------
  Name = Intensional
  Identity = example-intensional
  Description = ValueSet Example using code filter (intensional)
  Filename = valueset-example-intensional.xml

 -- Row 4 -----------------------------------
  Name = Expansion
  Identity = example-expansion
  Description = ValueSet Example using a prepared expansion
  Filename = valueset-example-expansion.xml

 -- Row 5 -----------------------------------
  Name = UCUM Common
  Identity = ucum-common
  Description = Common UCUM codes
  Filename = valueset-ucum-common.xml

 -- Row 6 -----------------------------------
  Name = cpt-all
  Identity = cpt-all
  Description = All CPT codes
  Filename = valueset-cpt-all.xml

 -- Row 7 -----------------------------------
  Name = Yes/No/Don\'t know
  Identity = yesnodontknow
  Description = Yes/No/Don\'t know, for capturing a common answer set in questionnaires
  Filename = valueset-example-yesnodontknow.xml

 -- Row 8 -----------------------------------
  Name = NHIN PurposeOfUse
  Identity = nhin-purposeofuse
  Description = NHIN Purpose of Use
  Filename = valueset-nhin-purposeofuse.xml

 -- Row 9 -----------------------------------
  Name = inactive
  Identity = inactive
  Description = Valueset including inactive concepts
  Filename = valueset-example-inactive.xml

 -- Row 10 -----------------------------------
  Name = !Zika Affected Areas
  Identity = zika-affected-areas
  Description = ValueSet Example referencing PHINVADS value set by OID
  Filename = valueset-zika-affected-areas.xml

=== Sheet Examples =====================================

 -- Row 1 -----------------------------------
  Name = expand
  Use = Resource | Instance
  Documentation = The definition of a value set is used to create a simple collection of codes suitable for use for data entry or validation.   If the operation is not called at the instance level, one of the in parameters identifier, context or valueset must be provided.  An expanded value set will be returned, or an OperationOutcome with an error message.
  Type = operation
  Example.Request = $expand-request.txt
  Example.Response = $expand-response.txt
  Title = Value Set Expansion
  Footer = The value set expansion returned by this query should be treated as a transient result that will change over time (whether it does or not depends on how the value set is specified), so applications should repeat the operation each time the value set is used.  \n\nIf the expansion is too large (at the discretion of the server), the server will return an error (OperationOutcome with code too-costly). Clients can work through large flat expansions in a set of pages (partial views of the full expansion) instead of just getting the full expansion in a single exchange by using offset and count parameters. Servers are not obliged to support paging, but if they do, SHALL support both the offset and count parameters. Hierarchical expansions are not subject to paging and servers simply return the entire expansion.  \n\nDifferent servers may return different results from expanding a value set for the following reasons:  \n\n* The underlying code systems are different (e.g. different versions, possibly with different defined behavior) \n* The server optimizes filter includes differently, such as sorting by code frequency \n* Servers introduce arbitrary groups to assist a user to navigate the lists based either on extensions in the definition, or additional knowledge available to the server\n\nWhen a server cannot correctly expand a value set because it does not fully understand the code systems (e.g. it has the wrong version, or incomplete definitions) then it SHALL return an error. If the value set itself is unbounded due to the inclusion of post-coordinated value sets (e.g. SNOMED CT, UCUM), then the extension [[[http://hl7.org/fhir/StructureDefinition/valueset-unclosed]]] can be used to indicate that the expansion is incomplete
  Idempotent = True

 -- Row 2 -----------------------------------
  Name = expand.url
  Use = in
  Documentation = A canonical url for a value set. The server must know the value set (e.g. it is defined explicitly in the server\'s value sets, or it is defined implicitly by some code system known to the server
  Type = uri
  Min = 0
  Max = 1

 -- Row 3 -----------------------------------
  Name = expand.valueSet
  Use = in
  Documentation = The value set is provided directly as part of the request. Servers may choose not to accept value sets in this fashion
  Type = ValueSet
  Min = 0
  Max = 1

 -- Row 4 -----------------------------------
  Name = expand.context
  Use = in
  Documentation = The context of the value set, so that the server can resolve this to a value set to expand. The recommended format for this URI is [Structure Definition URL]#[name or path into structure definition] e.g. http://hl7.org/fhir/StructureDefinition/observation-hspc-height-hspcheight#Observation.interpretation. Other forms may be used but are not defined. This form is only usable if the terminology server also has access to the profile registry that the server is using, but can be used to delegate the mapping from an application context to a binding at run-time
  Type = uri
  Min = 0
  Max = 1

 -- Row 5 -----------------------------------
  Name = expand.filter
  Use = in
  Documentation = A text filter that is applied to restrict the codes that are returned (this is useful in a UI context). The interpretation of this is delegated to the server in order to allow to determine the most optimal search approach for the context
  Type = string
  Min = 0
  Max = 1

 -- Row 6 -----------------------------------
  Name = expand.profile
  Use = in
  Documentation = A reference to an external definition that provides additional control information about how the expansion is performed.  At this time, there is no agreed format or functionality for the target of this URI. The [VSAC Documentation](http://www.nlm.nih.gov/vsac/support/authorguidelines/updatingvaluesets.html) provides one example of the use of this parameter.  Implementers using this element will need to agree on an appropriate mechanism for use within their interoperability community.  Known uses for profile include: * whether to return the value set content logical definition with the expansion * whether to include inactive concepts
  Type = uri
  Min = 0
  Max = 1

 -- Row 7 -----------------------------------
  Name = expand.date
  Use = in
  Documentation = The date for which the expansion should be generated.  if a date is provided, it means that the server should use the value set / code system definitions as they were on the given date, or return an error if this is not possible.  Normally, the date is the current conditions (which is the default value) but under some circumstances, systems need to generate an expansion as it would have been in the past. A typical example of this would be where code selection is constrained to the set of codes that were available when the patient was treated, not when the record is being edited. Note that which date is appropriate is a matter for implementation policy.
  Type = dateTime
  Min = 0
  Max = 1

 -- Row 8 -----------------------------------
  Name = expand.offset
  Use = in
  Documentation = Paging support - where to start if a subset is desired (default = 0). Offset is number of records (not number of pages)
  Type = integer
  Min = 0
  Max = 1

 -- Row 9 -----------------------------------
  Name = expand.count
  Use = in
  Documentation = Paging support - how many codes should be provided in a partial page view. Paging only applies to flat expansions - servers ignore paging if the expansion is not flat.  If count = 0, the client is asking how large the expansion is. Servers SHOULD honor this request for hierarchical expansions as well, and simply return the overall count
  Type = integer
  Min = 0
  Max = 1

 -- Row 10 -----------------------------------
  Name = expand.includeDesignations
  Use = in
  Documentation = Controls whether concept designations are to be included or excluded in value set expansions. Overrides the value in the expansion profile if there is one
  Type = boolean
  Min = 0
  Max = 1

 -- Row 11 -----------------------------------
  Name = expand.includeDefinition
  Use = in
  Documentation = Controls whether the value set definition is included or excluded in value set expansions. Overrides the value in the expansion profile if there is one
  Type = boolean
  Min = 0
  Max = 1

 -- Row 12 -----------------------------------
  Name = expand.activeOnly
  Use = in
  Documentation = Controls whether inactive concepts are included or excluded in value set expansions. Overrides the value in the expansion profile if there is one. Note that if the value set explicitly specifies that inactive codes are included, this parameter can still remove them from a specific expansion, but this parameter cannot include them if the value set excludes them
  Type = boolean
  Min = 0
  Max = 1

 -- Row 13 -----------------------------------
  Name = expand.excludeNested
  Use = in
  Documentation = Controls whether or not the value set expansion nests codes or not (i.e. ValueSet.expansion.contains.contains). Overrides the value in the expansion profile if there is one
  Type = boolean
  Min = 0
  Max = 1

 -- Row 14 -----------------------------------
  Name = expand.excludeNotForUI
  Use = in
  Documentation = Controls whether or not the value set expansion includes codes which cannot be displayed in user interfaces. Overrides the value in the expansion profile if there is one
  Type = boolean
  Min = 0
  Max = 1

 -- Row 15 -----------------------------------
  Name = expand.excludePostCoordinated
  Use = in
  Documentation = Controls whether or not the value set expansion includes post coordinated codes. Overrides the value in the expansion profile if there is one
  Type = boolean
  Min = 0
  Max = 1

 -- Row 16 -----------------------------------
  Name = expand.displayLanguage
  Use = in
  Documentation = Specifies the language to be used for description in the expansions i.e. the language to be used for ValueSet.expansion.contains.display. Overrides the value in the expansion profile if there is one
  Type = code
  Min = 0
  Max = 1

 -- Row 17 -----------------------------------
  Name = expand.limitedExpansion
  Use = in
  Documentation = If the value set being expanded is incomplete (because it is too big to expand), return a limited expansion (a subset) with an indicator that expansion is incomplete. Overrides the value in the expansion profile if there is one
  Type = boolean
  Min = 0
  Max = 1

 -- Row 18 -----------------------------------
  Name = expand.return
  Use = out
  Documentation = The result of the expansion
  Type = ValueSet
  Min = 1
  Max = 1

 -- Row 19 -----------------------------------
  Name = validate-code
  Use = Resource | Instance
  Documentation = Validate that a coded value is in the set of codes allowed by a value set.   If the operation is not called at the instance level, one of the in parameters \"identifier\" or \"valueset\" must be provided.  One (and only one) of the in parameters (code, coding, codeableConcept) must be provided.  The operation returns a result (true / false), an error message, and the recommended display for the code
  Type = operation
  Example.Request = $validate-code-request.txt
  Example.Response = $validate-code-response.txt
  Title = Value Set based Validation
  Idempotent = True

 -- Row 20 -----------------------------------
  Name = validate-code.url
  Use = in
  Documentation = Value set Canonical URL. The server must know the value set (e.g. it is defined explicitly in the server\'s value sets, or it is defined implicitly by some code system known to the server
  Type = uri
  Min = 0
  Max = 1

 -- Row 21 -----------------------------------
  Name = validate-code.context
  Use = in
  Documentation = The context of the value set, so that the server can resolve this to a value set to validate against. The recommended format for this URI is [Structure Definition URL]#[name or path into structure definition] e.g. http://hl7.org/fhir/StructureDefinition/observation-hspc-height-hspcheight#Observation.interpretation. Other forms may be used but are not defined. This form is only usable if the terminology server also has access to the profile registry that the server is using, but can be used to delegate the mapping from an application context to a binding at run-time
  Type = uri
  Min = 0
  Max = 1

 -- Row 22 -----------------------------------
  Name = validate-code.valueSet
  Use = in
  Documentation = The value set is provided directly as part of the request. Servers may choose not to accept value sets in this fashion. This parameter is used when the client wants the server to expand a value set that is not stored on the server
  Type = ValueSet
  Min = 0
  Max = 1

 -- Row 23 -----------------------------------
  Name = validate-code.code
  Use = in
  Documentation = The code that is to be validated. If a code is provided, a system must be provided
  Type = code
  Min = 0
  Max = 1

 -- Row 24 -----------------------------------
  Name = validate-code.system
  Use = in
  Documentation = The system for the code that is to be validated
  Type = uri
  Min = 0
  Max = 1

 -- Row 25 -----------------------------------
  Name = validate-code.version
  Use = in
  Documentation = The version of the system, if one was provided in the source data
  Type = string
  Min = 0
  Max = 1

 -- Row 26 -----------------------------------
  Name = validate-code.display
  Use = in
  Documentation = The display associated with the code, if provided. If a display is provided a code must be provided. If no display is provided, the server cannot validate the display value, but may choose to return a recommended display name in an extension in the outcome. Whether displays are case sensitive is code system dependent
  Type = string
  Min = 0
  Max = 1

 -- Row 27 -----------------------------------
  Name = validate-code.coding
  Use = in
  Documentation = A coding to validate
  Type = Coding
  Min = 0
  Max = 1

 -- Row 28 -----------------------------------
  Name = validate-code.codeableConcept
  Use = in
  Documentation = A full codeableConcept to validate. The server returns true if one of the coding values is in the value set, and may also validate that the codings are not in conflict with each other if more than one is present
  Type = CodeableConcept
  Min = 0
  Max = 1

 -- Row 29 -----------------------------------
  Name = validate-code.date
  Use = in
  Documentation = The date for which the validation should be checked. Normally, this is the current conditions (which is the default values) but under some circumstances, systems need to validate that a correct code was used at some point in the past. A typical example of this would be where code selection is constrained to the set of codes that were available when the patient was treated, not when the record is being edited. Note that which date is appropriate is a matter for implementation policy.
  Type = dateTime
  Min = 0
  Max = 1

 -- Row 30 -----------------------------------
  Name = validate-code.abstract
  Use = in
  Documentation = if true, then an abstract code is allowed to be used in the context of the code that is being validated. Typically, abstract codes are allowed to be used in value set specifications (e.g. any code that is subsumed by an abstract code). If false (which is the default value), then only concrete codes as defined by the value set are allowed
  Type = boolean
  Min = 0
  Max = 1

 -- Row 31 -----------------------------------
  Name = validate-code.displayLanguage
  Use = in
  Documentation = Specifies the language to be used for description when validating the display property
  Type = code
  Min = 0
  Max = 1

 -- Row 32 -----------------------------------
  Name = validate-code.result
  Use = out
  Documentation = True if the concept details supplied are valid
  Type = boolean
  Min = 1
  Max = 1

 -- Row 33 -----------------------------------
  Name = validate-code.message
  Use = out
  Documentation = Error details, if result = false. If this is provided when result = true, the message carries hints and warnings
  Type = string
  Min = 0
  Max = 1

 -- Row 34 -----------------------------------
  Name = validate-code.display
  Use = out
  Documentation = A valid display for the concept if the system wishes to display this to a user
  Type = string
  Min = 0
  Max = 1
