
=== Sheet Bindings =====================================

 -- Row 1 -----------------------------------
  Binding Name = RestfulCapabilityMode
  Binding = code list
  Reference = #restful-capability-mode
  Definition = The mode of a RESTful capability statement.

 -- Row 2 -----------------------------------
  Binding Name = RestfulSecurityService
  Binding = code list
  Reference = #restful-security-service
  Definition = Types of security services used with FHIR.
  Conformance = extensible

 -- Row 3 -----------------------------------
  Binding Name = TypeRestfulInteraction
  Binding = code list
  Reference = #type-restful-interaction
  Definition = Operations supported by REST at the type or instance level.

 -- Row 4 -----------------------------------
  Binding Name = SystemRestfulInteraction
  Binding = code list
  Reference = #system-restful-interaction
  Definition = Operations supported by REST at the system level.

 -- Row 5 -----------------------------------
  Binding Name = EventCapabilityMode
  Binding = code list
  Reference = #event-capability-mode
  Definition = The mode of a message capability statement.

 -- Row 6 -----------------------------------
  Binding Name = MessageTransport
  Binding = code list
  Reference = #message-transport
  Definition = The protocol used for message transport.
  Conformance = extensible

 -- Row 7 -----------------------------------
  Binding Name = DocumentMode
  Binding = code list
  Reference = #document-mode
  Definition = Whether the application produces or consumes documents.

 -- Row 8 -----------------------------------
  Binding Name = MessageSignificanceCategory
  Binding = code list
  Reference = #message-significance-category
  Definition = The impact of the content of a message.

 -- Row 9 -----------------------------------
  Binding Name = ResourceVersionPolicy
  Binding = code list
  Reference = #versioning-policy
  Definition = How the system supports versioning for a resource.

 -- Row 10 -----------------------------------
  Binding Name = TransactionMode
  Binding = code list
  Reference = #transaction-mode
  Definition = A code that indicates how transactions are supported.

 -- Row 11 -----------------------------------
  Binding Name = ConditionalDeleteStatus
  Binding = code list
  Reference = #conditional-delete-status
  Definition = A code that indicates how the server supports conditional delete.

 -- Row 12 -----------------------------------
  Binding Name = UnknownContentCode
  Binding = code list
  Reference = #unknown-content-code
  Definition = A code that indicates whether an application accepts unknown elements or extensions when reading resources.

 -- Row 13 -----------------------------------
  Binding Name = CapabilityStatementKind
  Binding = code list
  Reference = #capability-statement-kind
  Definition = How a capability statement is intended to be used.

 -- Row 14 -----------------------------------
  Binding Name = ConditionalReadStatus
  Binding = code list
  Reference = #conditional-read-status
  Definition = A code that indicates how the server supports conditional read.

 -- Row 15 -----------------------------------
  Binding Name = ReferenceHandlingPolicy
  Binding = code list
  Reference = #reference-handling-policy
  Definition = A set of flags that defines how references are supported.

=== Sheet restful-capability-mode =====================================

 -- Row 1 -----------------------------------
  Id = 1
  Code = client
  Display = Client
  Definition = The application acts as a client for this resource.

 -- Row 2 -----------------------------------
  Id = 2
  Code = server
  Display = Server
  Definition = The application acts as a server for this resource.

=== Sheet restful-security-service =====================================

 -- Row 1 -----------------------------------
  Id = 1
  Code = OAuth
  Display = OAuth
  Definition = Oauth (unspecified version see oauth.net).

 -- Row 2 -----------------------------------
  Id = 2
  Code = SMART-on-FHIR
  Display = SMART-on-FHIR
  Definition = OAuth2 using SMART-on-FHIR profile (see http://docs.smarthealthit.org/).

 -- Row 3 -----------------------------------
  Id = 3
  Code = NTLM
  Display = NTLM
  Definition = Microsoft NTLM Authentication.

 -- Row 4 -----------------------------------
  Id = 4
  Code = Basic
  Display = Basic
  Definition = Basic authentication defined in HTTP specification.

 -- Row 5 -----------------------------------
  Id = 5
  Code = Kerberos
  Display = Kerberos
  Definition = see http://www.ietf.org/rfc/rfc4120.txt.

 -- Row 6 -----------------------------------
  Id = 6
  Code = Certificates
  Display = Certificates
  Definition = SSL where client must have a certificate registered with the server.

=== Sheet type-restful-interaction =====================================

 -- Row 1 -----------------------------------
  System = http://hl7.org/fhir/restful-interaction
  Code = read

 -- Row 2 -----------------------------------
  System = http://hl7.org/fhir/restful-interaction
  Code = vread

 -- Row 3 -----------------------------------
  System = http://hl7.org/fhir/restful-interaction
  Code = update

 -- Row 4 -----------------------------------
  System = http://hl7.org/fhir/restful-interaction
  Code = patch

 -- Row 5 -----------------------------------
  System = http://hl7.org/fhir/restful-interaction
  Code = delete

 -- Row 6 -----------------------------------
  System = http://hl7.org/fhir/restful-interaction
  Code = history-instance

 -- Row 7 -----------------------------------
  System = http://hl7.org/fhir/restful-interaction
  Code = history-type

 -- Row 8 -----------------------------------
  System = http://hl7.org/fhir/restful-interaction
  Code = create

 -- Row 9 -----------------------------------
  System = http://hl7.org/fhir/restful-interaction
  Code = search-type

=== Sheet system-restful-interaction =====================================

 -- Row 1 -----------------------------------
  System = http://hl7.org/fhir/restful-interaction
  Code = transaction

 -- Row 2 -----------------------------------
  System = http://hl7.org/fhir/restful-interaction
  Code = batch

 -- Row 3 -----------------------------------
  System = http://hl7.org/fhir/restful-interaction
  Code = search-system

 -- Row 4 -----------------------------------
  System = http://hl7.org/fhir/restful-interaction
  Code = history-system

=== Sheet event-capability-mode =====================================

 -- Row 1 -----------------------------------
  Id = 1
  Code = sender
  Display = Sender
  Definition = The application sends requests and receives responses.

 -- Row 2 -----------------------------------
  Id = 2
  Code = receiver
  Display = Receiver
  Definition = The application receives requests and sends responses.

=== Sheet message-transport =====================================

 -- Row 1 -----------------------------------
  Id = 1
  Code = http
  Display = HTTP
  Definition = The application sends or receives messages using HTTP POST (may be over http: or https:).

 -- Row 2 -----------------------------------
  Id = 2
  Code = ftp
  Display = FTP
  Definition = The application sends or receives messages using File Transfer Protocol.

 -- Row 3 -----------------------------------
  Id = 3
  Code = mllp
  Display = MLLP
  Definition = The application sends or receives messages using HL7\'s Minimal Lower Level Protocol.

=== Sheet document-mode =====================================

 -- Row 1 -----------------------------------
  Id = 1
  Code = producer
  Display = Producer
  Definition = The application produces documents of the specified type.

 -- Row 2 -----------------------------------
  Id = 2
  Code = consumer
  Display = Consumer
  Definition = The application consumes documents of the specified type.

=== Sheet message-significance-category =====================================

 -- Row 1 -----------------------------------
  Id = 1
  Code = Consequence
  Display = Consequence
  Definition = The message represents/requests a change that should not be processed more than once; e.g., making a booking for an appointment.

 -- Row 2 -----------------------------------
  Id = 2
  Code = Currency
  Display = Currency
  Definition = The message represents a response to query for current information. Retrospective processing is wrong and/or wasteful.

 -- Row 3 -----------------------------------
  Id = 3
  Code = Notification
  Display = Notification
  Definition = The content is not necessarily intended to be current, and it can be reprocessed, though there may be version issues created by processing old notifications.

=== Sheet versioning-policy =====================================

 -- Row 1 -----------------------------------
  Id = 1
  Code = no-version
  Display = No VersionId Support
  Definition = VersionId meta-property is not supported (server) or used (client).

 -- Row 2 -----------------------------------
  Id = 2
  Code = versioned
  Display = Versioned
  Definition = VersionId meta-property is supported (server) or used (client).

 -- Row 3 -----------------------------------
  Id = 3
  Code = versioned-update
  Display = VersionId tracked fully
  Definition = VersionId must be correct for updates (server) or will be specified (If-match header) for updates (client).

=== Sheet transaction-mode =====================================

 -- Row 1 -----------------------------------
  Id = 1
  Code = not-supported
  Display = None
  Definition = Neither batch or transaction is supported.

 -- Row 2 -----------------------------------
  Id = 2
  Code = batch
  Display = Batches supported
  Definition = Batches are  supported.

 -- Row 3 -----------------------------------
  Id = 3
  Code = transaction
  Display = Transactions Supported
  Definition = Transactions are supported.

 -- Row 4 -----------------------------------
  Id = 4
  Code = both
  Display = Batches & Transactions
  Definition = Both batches and transactions are supported.

=== Sheet conditional-delete-status =====================================

 -- Row 1 -----------------------------------
  Id = 1
  Code = not-supported
  Display = Not Supported
  Definition = No support for conditional deletes.

 -- Row 2 -----------------------------------
  Id = 2
  Code = single
  Display = Single Deletes Supported
  Definition = Conditional deletes are supported, but only single resources at a time.

 -- Row 3 -----------------------------------
  Id = 3
  Code = multiple
  Display = Multiple Deletes Supported
  Definition = Conditional deletes are supported, and multiple resources can be deleted in a single interaction.

=== Sheet unknown-content-code =====================================

 -- Row 1 -----------------------------------
  Id = 1
  Code = no
  Display = Neither Elements or Extensions
  Definition = The application does not accept either unknown elements or extensions.

 -- Row 2 -----------------------------------
  Id = 2
  Code = extensions
  Display = Unknown Extensions
  Definition = The application accepts unknown extensions, but not unknown elements.

 -- Row 3 -----------------------------------
  Id = 3
  Code = elements
  Display = Unknown Elements
  Definition = The application accepts unknown elements, but not unknown extensions.

 -- Row 4 -----------------------------------
  Id = 4
  Code = both
  Display = Unknown Elements and Extensions
  Definition = The application accepts unknown elements and extensions.

=== Sheet capability-statement-kind =====================================

 -- Row 1 -----------------------------------
  Code = instance
  Display = Instance
  Definition = The CapabilityStatement instance represents the present capabilities of a specific system instance.  This is the kind returned by OPTIONS for a FHIR server end-point.

 -- Row 2 -----------------------------------
  Code = capability
  Display = Capability
  Definition = The CapabilityStatement instance represents the capabilities of a system or piece of software, independent of a particular installation.
  Comment = Elements marked as \'optional\' represent configurable capabilities

 -- Row 3 -----------------------------------
  Code = requirements
  Display = Requirements
  Definition = The CapabilityStatement instance represents a set of requirements for other systems to meet; e.g. as part of an implementation guide or \'request for proposal\'.

=== Sheet conditional-read-status =====================================

 -- Row 1 -----------------------------------
  Id = 1
  Code = not-supported
  Display = Not Supported
  Definition = No support for conditional deletes.

 -- Row 2 -----------------------------------
  Id = 2
  Code = modified-since
  Display = If-Modified-Since
  Definition = Conditional reads are supported, but only with the If-Modified-Since HTTP Header.

 -- Row 3 -----------------------------------
  Id = 3
  Code = not-match
  Display = If-None-Match
  Definition = Conditional reads are supported, but only with the If-None-Match HTTP Header.

 -- Row 4 -----------------------------------
  Id = 4
  Code = full-support
  Display = Full Support
  Definition = Conditional reads are supported, with both If-Modified-Since and If-None-Match HTTP Headers.

=== Sheet reference-handling-policy =====================================

 -- Row 1 -----------------------------------
  Id = 1
  Code = literal
  Display = Literal References
  Definition = The server supports and populates Literal references where they are known (this code does not guarantee that all references are literal; see \'enforced\')

 -- Row 2 -----------------------------------
  Id = 2
  Code = logical
  Display = Logical References
  Definition = The server allows logical references

 -- Row 3 -----------------------------------
  Id = 3
  Code = resolves
  Display = Resolves References
  Definition = The server will attempt to resolve logical references to literal references (if resolution fails, the server may still accept resources; see logical)

 -- Row 4 -----------------------------------
  Id = 4
  Code = enforced
  Display = Reference Integrity Enforced
  Definition = The server enforces that references have integrity - e.g. it ensures that references can always be resolved. This is typically the case for clinical record systems, but often not the case for middleware/proxy systems

 -- Row 5 -----------------------------------
  Id = 5
  Code = local
  Display = Local References Only
  Definition = The server does not support references that point to other servers

=== Sheet Invariants =====================================

 -- Row 1 -----------------------------------
  Id = 1
  Context = CapabilityStatement
  English = A Capability Statement SHALL have at least one of REST, messaging or document element.
  XPath = exists(f:rest) or exists(f:messaging) or exists(f:document)
  Expression = rest.exists() or messaging.exists() or document.exists()

 -- Row 2 -----------------------------------
  Id = 2
  Context = CapabilityStatement
  English = A Capability Statement SHALL have at least one of description, software, or implementation element.
  XPath = count(f:software | f:implementation | f:description) > 0
  Expression = (description.count() + software.count() + implementation.count()) > 0

 -- Row 3 -----------------------------------
  Id = 3
  Context = CapabilityStatement
  English = Messaging end-point is required (and is only permitted) when a statement is for an implementation.
  XPath = not(exists(f:messaging/f:endpoint)) or f:kind/@value = \'instance\'
  Expression = messaging.endpoint.empty() or kind = \'instance\'

 -- Row 4 -----------------------------------
  Id = 7
  Context = CapabilityStatement
  English = The set of documents must be unique by the combination of profile and mode.
  XPath = count(f:document[f:mode/@value=\'producer\'])=count(distinct-values(f:document[f:mode/@value=\'producer\']/f:profile/f:reference/@value)) and count(f:document[f:mode/@value=\'consumer\'])=count(distinct-values(f:document[f:mode/@value=\'consumer\']/f:profile/f:reference/@value))
  Expression = document.select(profile.reference&mode).isDistinct()

 -- Row 5 -----------------------------------
  Id = 8
  Context = CapabilityStatement
  English = There can only be one REST declaration per mode.
  XPath = count(f:rest)=count(distinct-values(f:rest/f:mode/@value))
  Expression = rest.select(mode).isDistinct()

 -- Row 6 -----------------------------------
  Id = 9
  Context = CapabilityStatement.rest
  English = A given resource can only be described once per RESTful mode.
  XPath = count(f:resource)=count(distinct-values(f:resource/f:type/@value))
  Expression = resource.select(type).isDistinct()

 -- Row 7 -----------------------------------
  Id = !10
  Context = CapabilityStatement.rest
  English = A given operation can only be described once per RESTful mode.
  XPath = count(f:operation)=count(distinct-values(f:operation/f:name/@value))
  Expression = operation.select(name).isDistinct()

 -- Row 8 -----------------------------------
  Id = 12
  Context = CapabilityStatement.rest.resource
  English = Search parameter names must be unique in the context of a resource.
  XPath = count(f:searchParam)=count(distinct-values(f:searchParam/f:name/@value))
  Expression = searchParam.select(name).isDistinct()

 -- Row 9 -----------------------------------
  Id = 14
  Context = CapabilityStatement
  English = Capability Statements of kind \'requirements\' do not have software or implementation elements.
  XPath = not(exists(f:software) or exists(f:implementation)) or (f:kind/@value != \'requirements\')
  Expression = (software.empty() and implementation.empty()) or kind != \'requirements\'

 -- Row 10 -----------------------------------
  Id = 15
  Context = CapabilityStatement
  English = Capability Statements of kind \'instance\' do not have implementation elements.
  XPath = not(exists(f:implementation)) or (f:kind/@value != \'capability\')
  Expression = implementation.empty() or kind != \'capability\'

 -- Row 11 -----------------------------------
  Id = 16
  Context = CapabilityStatement.messaging
  English = A Capability Statement messaging element SHALL have either supportedMessage or event element, but not both.
  XPath = exists(f:supportedMessage) != exists(f:event)
  Expression = supportedMessage.empty() != event.empty()

=== Sheet Data Elements =====================================

 -- Row 1 -----------------------------------
  Element = CapabilityStatement
  Card. = 1..1
  UML = 230;120
  Type = MetadataResource
  Short Name = A statement of system capabilities
  Definition = A Capability Statement documents a set of capabilities (behaviors) of a FHIR Server that may be used as a statement of actual server functionality or a statement of required or desired server implementation.
  RIM Mapping = n/a
  w5 = conformance.behavior

 -- Row 2 -----------------------------------
  Element = CapabilityStatement.url

 -- Row 3 -----------------------------------
  Element = CapabilityStatement.version

 -- Row 4 -----------------------------------
  Element = CapabilityStatement.name

 -- Row 5 -----------------------------------
  Element = CapabilityStatement.title

 -- Row 6 -----------------------------------
  Element = CapabilityStatement.status
  Comments = & This is not intended for use with actual capability statements, but where capability statements are used to describe possible or desired systems

 -- Row 7 -----------------------------------
  Element = CapabilityStatement.experimental

 -- Row 8 -----------------------------------
  Element = CapabilityStatement.date
  Card. = 1..1

 -- Row 9 -----------------------------------
  Element = CapabilityStatement.publisher

 -- Row 10 -----------------------------------
  Element = CapabilityStatement.contact
  UML = 70;0

 -- Row 11 -----------------------------------
  Element = CapabilityStatement.description
  Inv. = 2
  Definition = & Typically, this is used when the capability statement describes a desired rather than an actual solution, for example as a formal expression of requirements as part of an RFP
  Comments = & This does not need to be populated if the description is adequately implied by the software or implementation details

 -- Row 12 -----------------------------------
  Element = CapabilityStatement.useContext

 -- Row 13 -----------------------------------
  Element = CapabilityStatement.jurisdiction

 -- Row 14 -----------------------------------
  Element = CapabilityStatement.purpose

 -- Row 15 -----------------------------------
  Element = CapabilityStatement.copyright

 -- Row 16 -----------------------------------
  Element = CapabilityStatement.kind
  Card. = 1..1
  Summary = Y
  Type = code
  Binding = CapabilityStatementKind
  Short Name = instance | capability | requirements
  Definition = The way that this statement is intended to be used, to describe an actual running instance of software, a particular product (kind not instance of software) or a class of implementation (e.g. a desired purchase).
  Requirements = Allow searching the 3 modes

 -- Row 17 -----------------------------------
  Element = CapabilityStatement.instantiates
  Card. = 0..*
  Summary = y
  Type = uri
  Short Name = Canonical URL of another capability statement this implements
  Definition = Reference to a canonical URL of another CapabilityStatement that this software implements or uses. This capability statement is a published API description that corresponds to a business service. The rest of the capability statement does not need to repeat the details of the referenced resource, but can do so.
  Comments = HL7 defines the following Services: [[[Terminology Service]]].\n\nMany [Implementation Guides](http://fhir.org/guides/registry) define additional services.

 -- Row 18 -----------------------------------
  Element = CapabilityStatement.software
  Card. = 0..1
  Summary = y
  UML = 0;100
  Inv. = 2
  Short Name = Software that is covered by this capability statement
  Definition = Software that is covered by this capability statement.  It is used when the capability statement describes the capabilities of a particular software version, independent of an installation.

 -- Row 19 -----------------------------------
  Element = CapabilityStatement.software.name
  Card. = 1..1
  Summary = y
  Type = string
  Short Name = A name the software is known by
  Definition = Name software is known by

 -- Row 20 -----------------------------------
  Element = CapabilityStatement.software.version
  Card. = 0..1
  Summary = y
  Type = string
  Short Name = Version covered by this statement
  Definition = The version identifier for the software covered by this statement.
  Comments = If possible, a version should be specified, as statements are likely to be different for different versions of software.

 -- Row 21 -----------------------------------
  Element = CapabilityStatement.software.releaseDate
  Card. = 0..1
  Summary = y
  Type = dateTime
  Short Name = Date this version released
  Definition = Date this version of the software was released.

 -- Row 22 -----------------------------------
  Element = CapabilityStatement.implementation
  Card. = 0..1
  Summary = y
  UML = 0;200
  Inv. = 2
  Short Name = If this describes a specific instance
  Definition = Identifies a specific implementation instance that is described by the capability statement - i.e. a particular installation, rather than the capabilities of a software program.

 -- Row 23 -----------------------------------
  Element = CapabilityStatement.implementation.description
  Card. = 1..1
  Summary = y
  Type = string
  Short Name = Describes this specific instance
  Definition = Information about the specific installation that this capability statement relates to.

 -- Row 24 -----------------------------------
  Element = CapabilityStatement.implementation.url
  Card. = 0..1
  Summary = y
  Type = uri
  Short Name = Base URL for the installation
  Definition = An absolute base URL for the implementation.  This forms the base for REST interfaces as well as the mailbox and document interfaces.

 -- Row 25 -----------------------------------
  Element = CapabilityStatement.fhirVersion
  Card. = 1..1
  Summary = y
  Type = id
  Short Name = FHIR Version the system uses
  Definition = The version of the FHIR specification on which this capability statement is based.

 -- Row 26 -----------------------------------
  Element = CapabilityStatement.acceptUnknown
  Card. = 1..1
  Summary = Y
  Type = code
  Binding = UnknownContentCode
  Short Name = no | extensions | elements | both
  Definition = A code that indicates whether the application accepts unknown elements or extensions when reading resources.
  Comments = Unknown elements in a resource can only arise as later versions of the specification are published, because this is the only place where such elements can be defined. Hence accepting unknown elements is about inter-version compatibility.\n\nApplications are recommended to accept unknown extensions and elements (\'both\'), but this is not always possible.

 -- Row 27 -----------------------------------
  Element = CapabilityStatement.format
  Card. = 1..*
  Summary = y
  Type = code
  Binding = MimeType
  Short Name = formats supported (xml | json | ttl | mime type)
  Definition = A list of the formats supported by this implementation using their content types.
  Comments = \"xml\", \"json\" and \"ttl\" are allowed, which describe the simple encodings described in the specification (and imply appropriate bundle support). Otherwise, mime types are legal here.

 -- Row 28 -----------------------------------
  Element = CapabilityStatement.patchFormat
  Card. = 0..*
  Summary = y
  Type = code
  Binding = MimeType
  Short Name = Patch formats supported
  Definition = A list of the patch formats supported by this implementation using their content types.
  Comments = At present, the patch mime types application/json-patch+json and application/xml-patch+xml are legal. Generally, if a server supports PATCH, it would be expected to support the patch formats and match the formats it supports, but this is not always possible or necessary.

 -- Row 29 -----------------------------------
  Element = CapabilityStatement.implementationGuide
  Card. = 0..*
  Summary = y
  Type = uri
  Short Name = Implementation guides supported
  Definition = A list of implementation guides that the server does (or should) support in their entirety.

 -- Row 30 -----------------------------------
  Element = CapabilityStatement.profile
  Card. = 0..*
  Summary = y
  Type = Reference(StructureDefinition)
  Short Name = Profiles for use cases supported
  Definition = A list of profiles that represent different use cases supported by the system. For a server, \"supported by the system\" means the system hosts/produces a set of resources that are conformant to a particular profile, and allows clients that use its services to search using this profile and to find appropriate data. For a client, it means the system will search by this profile and process data according to the guidance implicit in the profile. See further discussion in [Using Profiles](profiling.html#profile-uses).
  Comments = Supported profiles are different than the profiles that apply to a particular resource in rest.resource.profile. The resource profile is a general statement of what features of the resource are supported overall by the system - the sum total of the facilities it supports. A supported profile is a deeper statement about the functionality of the data and services provided by the server (or used by the client). A typical case is a laboratory system that produces a set of different reports - this is the list of types of data that it publishes. A key aspect of declaring profiles here is the question of how the client converts knowledge that the server publishes this data into working with the data; the client can inspect individual resources to determine whether they conform to a particular profile, but how does it find the ones that does? It does so by searching using the _profile parameter, so any resources listed here must be valid values for the _profile resource (using the identifier in the target profile).  Typically, supported profiles cross resource types to describe a network of related resources, so they are listed here rather than by resource. However, they do not need to describe more than one resource.

 -- Row 31 -----------------------------------
  Element = CapabilityStatement.rest
  Card. = 0..*
  Summary = Y
  UML = 250;520
  Inv. = 1
  Short Name = If the endpoint is a RESTful one
  Definition = A definition of the restful capabilities of the solution, if any.
  Comments = Multiple repetitions allow definition of both client and/or server behaviors or possibly behaviors under different configuration settings (for software or requirements statements).

 -- Row 32 -----------------------------------
  Element = CapabilityStatement.rest.mode
  Card. = 1..1
  Summary = Y
  Type = code
  Binding = RestfulCapabilityMode
  Short Name = client | server
  Definition = Identifies whether this portion of the statement is describing the ability to initiate or receive restful operations.

 -- Row 33 -----------------------------------
  Element = CapabilityStatement.rest.documentation
  Card. = 0..1
  Type = string
  Short Name = General description of implementation
  Definition = Information about the system\'s restful capabilities that apply across all applications, such as security.

 -- Row 34 -----------------------------------
  Element = CapabilityStatement.rest.security
  Card. = 0..1
  Summary = Y
  UML = 550;380
  Short Name = Information about security of implementation
  Definition = Information about security implementation from an interface perspective - what a client needs to know.

 -- Row 35 -----------------------------------
  Element = CapabilityStatement.rest.security.cors
  Card. = 0..1
  Summary = Y
  Type = boolean
  Short Name = Adds CORS Headers (http://enable-cors.org/)
  Definition = Server adds CORS headers when responding to requests - this enables javascript applications to use the server.
  Comments = The easiest CORS headers to add are Access-Control-Allow-Origin: * & Access-Control-Request-Method: GET, POST, PUT, DELETE. All servers SHOULD support CORS.

 -- Row 36 -----------------------------------
  Element = CapabilityStatement.rest.security.service
  Card. = 0..*
  Summary = Y
  Type = CodeableConcept
  Binding = RestfulSecurityService
  Short Name = OAuth | SMART-on-FHIR | NTLM | Basic | Kerberos | Certificates
  Definition = Types of security services that are supported/required by the system.

 -- Row 37 -----------------------------------
  Element = CapabilityStatement.rest.security.description
  Card. = 0..1
  Type = string
  Short Name = General description of how security works
  Definition = General description of how security works

 -- Row 38 -----------------------------------
  Element = CapabilityStatement.rest.security.certificate
  Card. = 0..*
  UML = 590;240
  Short Name = Certificates associated with security profiles
  Definition = Certificates associated with security profiles

 -- Row 39 -----------------------------------
  Element = CapabilityStatement.rest.security.certificate.type
  Card. = 0..1
  Type = code
  Binding = MimeType
  Short Name = Mime type for certificates
  Definition = Mime type for a certificate

 -- Row 40 -----------------------------------
  Element = CapabilityStatement.rest.security.certificate.blob
  Card. = 0..1
  Type = base64Binary
  Short Name = Actual certificate
  Definition = Actual certificate

 -- Row 41 -----------------------------------
  Element = CapabilityStatement.rest.resource
  Card. = 0..*
  Summary = Y
  UML = 230;640
  Short Name = Resource served on the REST interface
  Definition = A specification of the restful capabilities of the solution for a specific resource type
  Comments = Max of one repetition per resource type

 -- Row 42 -----------------------------------
  Element = CapabilityStatement.rest.resource.type
  Card. = 1..1
  Summary = Y
  Type = code
  Binding = ResourceType
  Short Name = A resource type that is supported
  Definition = A type of resource exposed via the restful interface

 -- Row 43 -----------------------------------
  Element = CapabilityStatement.rest.resource.profile
  Card. = 0..1
  Summary = y
  Type = Reference(StructureDefinition)
  Short Name = Base System profile for all uses of resource
  Definition = A specification of the profile that describes the solution\'s overall support for the resource, including any constraints on cardinality, bindings, lengths or other limitations. See further discussion in [Using Profiles](profiling.html#profile-uses).
  Comments = The profile applies to all  resources of this type - i.e. it is the superset of what is supported by the system.

 -- Row 44 -----------------------------------
  Element = CapabilityStatement.rest.resource.documentation
  Card. = 0..1
  Type = markdown
  Short Name = Additional information about the use of the resource type
  Definition = Additional information about the resource type used by the system

 -- Row 45 -----------------------------------
  Element = CapabilityStatement.rest.resource.interaction
  Card. = 1..*
  UML = -20;560
  Type = =ResourceInteraction
  Short Name = What operations are supported?
  Definition = Identifies a restful operation supported by the solution

 -- Row 46 -----------------------------------
  Element = CapabilityStatement.rest.resource.interaction.code
  Card. = 1..1
  Type = code
  Binding = TypeRestfulInteraction
  Short Name = read | vread | update | patch | delete | history-instance | history-type | create | search-type
  Definition = Coded identifier of the operation, supported by the system resource

 -- Row 47 -----------------------------------
  Element = CapabilityStatement.rest.resource.interaction.documentation
  Card. = 0..1
  Type = string
  Short Name = Anything special about operation behavior
  Definition = Guidance specific to the implementation of this operation, such as \'delete is a logical delete\' or \'updates are only allowed with version id\' or \'creates permitted from pre-authorized certificates only\'.
  Requirements = REST allows a degree of variability in the implementation of RESTful solutions that is useful for exchange partners to be aware of.

 -- Row 48 -----------------------------------
  Element = CapabilityStatement.rest.resource.versioning
  Card. = 0..1
  Type = code
  Binding = ResourceVersionPolicy
  Short Name = no-version | versioned | versioned-update
  Definition = This field is set to no-version to specify that the system does not support (server) or use (client) versioning for this resource type. If this has some other value, the server must at least correctly track and populate the versionId meta-property on resources. If the value is \'versioned-update\', then the server supports all the versioning features, including using e-tags for version integrity in the API.
  Comments = If a server supports versionIds correctly, it SHOULD support vread too, but is not required to do so.

 -- Row 49 -----------------------------------
  Element = CapabilityStatement.rest.resource.readHistory
  Card. = 0..1
  Type = boolean
  Short Name = Whether vRead can return past versions
  Definition = A flag for whether the server is able to return past versions as part of the vRead operation.
  Comments = It is useful to support the vRead operation for current operations, even if past versions aren\'t available.

 -- Row 50 -----------------------------------
  Element = CapabilityStatement.rest.resource.updateCreate
  Card. = 0..1
  Type = boolean
  Short Name = If update can commit to a new identity
  Definition = A flag to indicate that the server allows or needs to allow the client to create new identities on the server (e.g. that is, the client PUTs to a location where there is no existing resource). Allowing this operation means that the server allows the client to create new identities on the server.
  Comments = Allowing the clients to create new identities on the server means that the system administrator needs to have confidence that the clients do not create clashing identities between them. Obviously, if there is only one client, this won\'t happen. While creating identities on the client means that the clients need to be managed, it\'s much more convenient for many scenarios if such management can be put in place.

 -- Row 51 -----------------------------------
  Element = CapabilityStatement.rest.resource.conditionalCreate
  Card. = 0..1
  Type = boolean
  Short Name = If allows/uses conditional create
  Definition = A flag that indicates that the server supports conditional create.
  Comments = Conditional Create is mainly appropriate for interface engine scripts converting from other formats, such as v2.

 -- Row 52 -----------------------------------
  Element = CapabilityStatement.rest.resource.conditionalRead
  Card. = 0..1
  Type = code
  Binding = ConditionalReadStatus
  Short Name = not-supported | modified-since | not-match | full-support
  Definition = A code that indicates how the server supports conditional read.
  Comments = Conditional Read is mainly appropriate for interface engine scripts converting from other formats, such as v2.

 -- Row 53 -----------------------------------
  Element = CapabilityStatement.rest.resource.conditionalUpdate
  Card. = 0..1
  Type = boolean
  Short Name = If allows/uses conditional update
  Definition = A flag that indicates that the server supports conditional update.
  Comments = Conditional Update is mainly appropriate for interface engine scripts converting from other formats, such as v2.

 -- Row 54 -----------------------------------
  Element = CapabilityStatement.rest.resource.conditionalDelete
  Card. = 0..1
  Type = code
  Binding = ConditionalDeleteStatus
  Short Name = not-supported | single | multiple - how conditional delete is supported
  Definition = A code that indicates how the server supports conditional delete.
  Comments = Conditional Delete is mainly appropriate for interface engine scripts converting from other formats, such as v2.

 -- Row 55 -----------------------------------
  Element = CapabilityStatement.rest.resource.referencePolicy
  Card. = 0..*
  Type = code
  Binding = ReferenceHandlingPolicy
  Short Name = literal | logical | resolves | enforced | local
  Definition = A set of flags that defines how references are supported.

 -- Row 56 -----------------------------------
  Element = CapabilityStatement.rest.resource.searchInclude
  Card. = 0..*
  Type = string
  Short Name = _include values supported by the server
  Definition = A list of _include values supported by the server
  Comments = If this list is empty, the server does not support includes.

 -- Row 57 -----------------------------------
  Element = CapabilityStatement.rest.resource.searchRevInclude
  Card. = 0..*
  Type = string
  Short Name = _revinclude values supported by the server
  Definition = A list of _revinclude (reverse include) values supported by the server
  Comments = If this list is empty, the server does not support reverse includes.

 -- Row 58 -----------------------------------
  Element = CapabilityStatement.rest.resource.searchParam
  Card. = 0..*
  UML = right
  Short Name = Search parameters supported by implementation
  Definition = Search parameters for implementations to support and/or make use of - either references to ones defined in the specification, or additional ones defined for/by the implementation.

 -- Row 59 -----------------------------------
  Element = CapabilityStatement.rest.resource.searchParam.name
  Card. = 1..1
  Type = string
  Short Name = Name of search parameter
  Definition = The name of the search parameter used in the interface
  Comments = Parameter names cannot overlap with standard parameter names, and standard parameters cannot be redefined.

 -- Row 60 -----------------------------------
  Element = CapabilityStatement.rest.resource.searchParam.definition
  Card. = 0..1
  Type = uri
  Short Name = Source of definition for parameter
  Definition = An absolute URI that is a formal reference to where this parameter was first defined, so that a client can be confident of the meaning of the search parameter (a reference to [[[SearchParameter.url]]]).
  Comments = This SHOULD be present, and matches refers to a SearchParameter by its canonical url. If systems wish to document their support for modifiers, comparators, target resource types, and chained parameters, they should do using a search parameter resource.

 -- Row 61 -----------------------------------
  Element = CapabilityStatement.rest.resource.searchParam.type
  Card. = 1..1
  Type = code
  Binding = SearchParamType
  Short Name = number | date | string | token | reference | composite | quantity | uri
  Definition = The type of value a search parameter refers to, and how the content is interpreted.
  Comments = While this can be looked up from the definition, it is included here as a convenience for systems that autogenerate a query interface based on the server capability statement.  It SHALL be the same as the type in the search parameter definition.

 -- Row 62 -----------------------------------
  Element = CapabilityStatement.rest.resource.searchParam.documentation
  Card. = 0..1
  Type = string
  Short Name = Server-specific usage
  Definition = This allows documentation of any distinct behaviors about how the search parameter is used.  For example, text matching algorithms.

 -- Row 63 -----------------------------------
  Element = CapabilityStatement.rest.interaction
  Card. = 0..*
  UML = -20;430
  Type = =SystemInteraction
  Short Name = What operations are supported?
  Definition = A specification of restful operations supported by the system

 -- Row 64 -----------------------------------
  Element = CapabilityStatement.rest.interaction.code
  Card. = 1..1
  Type = code
  Binding = SystemRestfulInteraction
  Short Name = transaction | batch | search-system | history-system
  Definition = A coded identifier of the operation, supported by the system

 -- Row 65 -----------------------------------
  Element = CapabilityStatement.rest.interaction.documentation
  Card. = 0..1
  Type = string
  Short Name = Anything special about operation behavior
  Definition = Guidance specific to the implementation of this operation, such as limitations on the kind of transactions allowed, or information about system wide search is implemented.

 -- Row 66 -----------------------------------
  Element = !CapabilityStatement.rest.transactionMode
  Card. = 0..1
  Type = code
  Binding = TransactionMode
  Short Name = not-supported | batch | transaction | both
  Definition = A code that indicates how transactions are supported
  Default Value = not-supported

 -- Row 67 -----------------------------------
  Element = CapabilityStatement.rest.searchParam
  Card. = 0..*
  UML = right
  Type = @CapabilityStatement.rest.resource.searchParam
  Short Name = Search parameters for searching all resources
  Definition = Search parameters that are supported for searching all resources for implementations to support and/or make use of - either references to ones defined in the specification, or additional ones defined for/by the implementation.
  Comments = Typically, the only search parameters supported for all searchse are those that apply to all resources - tags, profiles, text search etc.

 -- Row 68 -----------------------------------
  Element = CapabilityStatement.rest.operation
  Card. = 0..*
  Summary = Y
  UML = right
  Short Name = Definition of an operation or a custom query
  Definition = Definition of an operation or a named query together with its parameters and their meaning and type

 -- Row 69 -----------------------------------
  Element = CapabilityStatement.rest.operation.name
  Card. = 1..1
  Type = string
  Short Name = Name by which the operation/query is invoked
  Definition = The name of the operation or query. For an operation, this is the name  prefixed with $ and used in the URL. For a query, this is the name used in the _query parameter when the query is called.
  Comments = The name here SHOULD be the same as the name in the definition, unless there is a name clash and the name cannot be used. The name does not include the \"$\" portion that is always included in the URL.

 -- Row 70 -----------------------------------
  Element = CapabilityStatement.rest.operation.definition
  Card. = 1..1
  Summary = Y
  Type = Reference(OperationDefinition)
  Short Name = The defined operation/query
  Definition = Where the formal definition can be found.
  Comments = This can be used to build an HTML form to invoke the operation, for instance.

 -- Row 71 -----------------------------------
  Element = CapabilityStatement.rest.compartment
  Card. = 0..*
  Type = uri
  Short Name = Compartments served/used by system
  Definition = An absolute URI which is a reference to the definition of a compartment that the system supports. The reference is to a CompartmentDefinition resource by its canonical URL .
  Comments = At present, the only defined compartments are at [CompartmentDefinition](compartmentdefinition.html).

 -- Row 72 -----------------------------------
  Element = CapabilityStatement.messaging
  Card. = 0..*
  Summary = Y
  UML = 310;0
  Inv. = 1
  Short Name = If messaging is supported
  Definition = A description of the messaging capabilities of the solution
  Comments = Multiple repetitions allow the documentation of multiple endpoints per solution.

 -- Row 73 -----------------------------------
  Element = CapabilityStatement.messaging.endpoint
  Card. = 0..*
  Aliases = 3
  UML = 570;160
  Short Name = Where messages should be sent
  Definition = An endpoint (network accessible address) to which messages and/or replies are to be sent.

 -- Row 74 -----------------------------------
  Element = CapabilityStatement.messaging.endpoint.protocol
  Card. = 1..1
  Type = Coding
  Binding = MessageTransport
  Short Name = http | ftp | mllp +
  Definition = A list of the messaging transport protocol(s) identifiers, supported by this endpoint.

 -- Row 75 -----------------------------------
  Element = CapabilityStatement.messaging.endpoint.address
  Card. = 1..1
  Type = uri
  Short Name = Network address or identifier of the end-point
  Definition = The network address of the end-point. For solutions that do not use network addresses for routing, it can be just an identifier.

 -- Row 76 -----------------------------------
  Element = CapabilityStatement.messaging.reliableCache
  Card. = 0..1
  Type = unsignedInt
  Short Name = Reliable Message Cache Length (min)
  Definition = Length if the receiver\'s reliable messaging cache in minutes (if a receiver) or how long the cache length on the receiver should be (if a sender)
  Comments = If this value is missing then the application does not implement (receiver) or depend on (sender) reliable messaging.

 -- Row 77 -----------------------------------
  Element = CapabilityStatement.messaging.documentation
  Card. = 0..1
  Type = string
  Short Name = Messaging interface behavior details
  Definition = Documentation about the system\'s messaging capabilities for this endpoint not otherwise documented by the capability statement.  For example, the process for becoming an authorized messaging exchange partner.

 -- Row 78 -----------------------------------
  Element = CapabilityStatement.messaging.supportedMessage
  Card. = 0..*
  Summary = Y
  UML = -20;0
  Short Name = Messages supported by this system
  Definition = References to message definitions for messages this system can send or receive
  Comments = This is a proposed alternative to the messaging.event structure.

 -- Row 79 -----------------------------------
  Element = CapabilityStatement.messaging.supportedMessage.mode
  Card. = 1..1
  Summary = Y
  Type = code
  Binding = EventCapabilityMode
  Short Name = sender | receiver
  Definition = The mode of this event declaration - whether application is sender or receiver

 -- Row 80 -----------------------------------
  Element = CapabilityStatement.messaging.supportedMessage.definition
  Card. = 1..1
  Summary = Y
  Type = Reference(MessageDefinition)
  Short Name = Message supported by this system
  Definition = Points to a message definition that identifies the messaging event, message structure, allowed responses, etc.

 -- Row 81 -----------------------------------
  Element = CapabilityStatement.messaging.event
  Card. = 0..*
  Summary = Y
  UML = 550;0
  Short Name = Declare support for this event
  Definition = A description of the solution\'s support for an event at this end-point.
  Comments = The same event may be listed up to two times - once as sender and once as receiver.

 -- Row 82 -----------------------------------
  Element = CapabilityStatement.messaging.event.code
  Card. = 1..1
  Summary = Y
  Type = Coding
  Binding = MessageEvent
  Short Name = Event type
  Definition = A coded identifier of a supported messaging event

 -- Row 83 -----------------------------------
  Element = CapabilityStatement.messaging.event.category
  Card. = 0..1
  Type = code
  Binding = MessageSignificanceCategory
  Short Name = Consequence | Currency | Notification
  Definition = The impact of the content of the message

 -- Row 84 -----------------------------------
  Element = CapabilityStatement.messaging.event.mode
  Card. = 1..1
  Type = code
  Binding = EventCapabilityMode
  Short Name = sender | receiver
  Definition = The mode of this event declaration - whether an application is a sender or receiver

 -- Row 85 -----------------------------------
  Element = CapabilityStatement.messaging.event.focus
  Card. = 1..1
  Type = code
  Binding = ResourceType
  Short Name = Resource that\'s focus of message
  Definition = A resource associated with the event.  This is the resource that defines the event.
  Comments = This SHALL be provided if the event type supports multiple different resource types.

 -- Row 86 -----------------------------------
  Element = CapabilityStatement.messaging.event.request
  Card. = 1..1
  Summary = Y
  Type = Reference(StructureDefinition)
  Short Name = Profile that describes the request
  Definition = Information about the request for this event

 -- Row 87 -----------------------------------
  Element = CapabilityStatement.messaging.event.response
  Card. = 1..1
  Summary = Y
  Type = Reference(StructureDefinition)
  Short Name = Profile that describes the response
  Definition = Information about the response for this event

 -- Row 88 -----------------------------------
  Element = CapabilityStatement.messaging.event.documentation
  Card. = 0..1
  Type = string
  Short Name = Endpoint-specific event documentation
  Definition = Guidance on how this event is handled, such as internal system trigger points, business rules, etc.

 -- Row 89 -----------------------------------
  Element = CapabilityStatement.document
  Card. = 0..*
  Summary = Y
  UML = -20;300
  Inv. = 1
  Short Name = Document definition
  Definition = A document definition

 -- Row 90 -----------------------------------
  Element = CapabilityStatement.document.mode
  Card. = 1..1
  Type = code
  Binding = DocumentMode
  Short Name = producer | consumer
  Definition = Mode of this document declaration - whether an application is a producer or consumer

 -- Row 91 -----------------------------------
  Element = CapabilityStatement.document.documentation
  Card. = 0..1
  Type = string
  Short Name = Description of document support
  Definition = A description of how the application supports or uses the specified document profile.  For example, when documents are created, what action is taken with consumed documents, etc.

 -- Row 92 -----------------------------------
  Element = CapabilityStatement.document.profile
  Card. = 1..1
  Summary = Y
  Type = Reference(StructureDefinition)
  Short Name = Constraint on a resource used in the document
  Definition = A constraint on a resource used in the document
  Comments = The first resource is the document resource.

=== Sheet Search =====================================

 -- Row 1 -----------------------------------
  Name = software
  Type = string
  Description = Part of a the name of a software application
  Path = CapabilityStatement.software.name

 -- Row 2 -----------------------------------
  Name = fhirversion
  Type = token
  Description = The version of FHIR
  Path = CapabilityStatement.version

 -- Row 3 -----------------------------------
  Name = resource
  Type = token
  Description = Name of a resource mentioned in a capability statement
  Path = CapabilityStatement.rest.resource.type

 -- Row 4 -----------------------------------
  Name = event
  Type = token
  Description = Event code in a capability statement
  Path = CapabilityStatement.messaging.event.code

 -- Row 5 -----------------------------------
  Name = mode
  Type = token
  Description = Mode - restful (server/client) or messaging (sender/receiver)
  Path = CapabilityStatement.rest.mode

 -- Row 6 -----------------------------------
  Name = resource-profile
  Type = reference
  Description = A profile id invoked in a capability statement
  Path = CapabilityStatement.rest.resource.profile

 -- Row 7 -----------------------------------
  Name = format
  Type = token
  Path = CapabilityStatement.format

 -- Row 8 -----------------------------------
  Name = security-service
  Type = token
  Path = CapabilityStatement.rest.security.service

 -- Row 9 -----------------------------------
  Name = supported-profile
  Type = reference
  Path = CapabilityStatement.profile

 -- Row 10 -----------------------------------
  Name = guide
  Type = uri
  Path = CapabilityStatement.implementationGuide

=== Sheet Profiles =====================================

 -- Row 1 -----------------------------------
  Name = CapabilityStatement Extensions
  IG Name = core
  Filename = capabilitystatement-extensions-spreadsheet.xml
  Type = spreadsheet

=== Sheet Examples =====================================

 -- Row 1 -----------------------------------
  Name = General
  Identity = example
  Description = General Condition Example
  Filename = capabilitystatement-example.xml

 -- Row 2 -----------------------------------
  Name = PHR
  Identity = phr
  Description = PHR Example
  Filename = capabilitystatement-phr-example.xml

 -- Row 3 -----------------------------------
  Name = Base
  Identity = capabilitystatement-base
  Description = Complete Capability Statement
  Filename = capabilitystatement-base.xml
  Type = tool

 -- Row 4 -----------------------------------
  Name = Base2
  Identity = capabilitystatement-base2
  Description = EmptyCapabilityStatement
  Filename = capabilitystatement-base2.xml
  Type = tool

 -- Row 5 -----------------------------------
  Name = TerminologyServer
  Identity = terminology-server
  Description = Terminology Server Base Capability Statement
  Filename = capabilitystatement-terminology-server.xml

 -- Row 6 -----------------------------------
  Name = KnowledgeRepository
  Identity = knowledge-repository
  Description = Knowledge Repository Base Capability Statement
  Filename = capabilitystatement-knowledge-repository.xml

 -- Row 7 -----------------------------------
  Name = MeasureProcessor
  Identity = measure-processor
  Description = Measure Processor Base Capability Statement
  Filename = capabilitystatement-measure-processor.xml

 -- Row 8 -----------------------------------
  Name = MessageDefinition
  Identity = messagedefinition
  Description = Showing new message definition structure
  Filename = capabilitystatement-messagedefinition.xml

=== Sheet Examples =====================================

 -- Row 1 -----------------------------------
  Name = subset
  Use = Resource | Instance
  Documentation = This operation asks the server to return a subset of the CapabilityStatement resource - just the REST parts that relate to a set of nominated resources - the resources that the client is interested in
  Type = operation
  Example.Request = $subset-request.txt
  Example.Response = $subset-response.txt
  Title = Fetch a subset of the CapabilityStatement resource
  Idempotent = True

 -- Row 2 -----------------------------------
  Name = subset.server
  Use = in
  Documentation = The canonical URL - use this if the subset is not invoked on an instance (or on the /metadata end-point)
  Type = uri
  Min = 0
  Max = 1

 -- Row 3 -----------------------------------
  Name = subset.resource
  Use = in
  Documentation = A resource that the client would like to include in the return
  Type = code
  Min = 1
  Max = *

 -- Row 4 -----------------------------------
  Name = subset.return
  Use = out
  Documentation = The subsetted CapabilityStatement resource that is returned. This should be tagged with the SUBSETTED code
  Type = CapabilityStatement
  Min = 1
  Max = 1

 -- Row 5 -----------------------------------
  Name = implements
  Use = Resource | Instance
  Documentation = This operation asks the server to check that it implements all the resources, interactions, search parameters, and operations that the client provides in its capability statement. The client provides its capability statement inline, or by referring the server to the canonical URL of its capability statement
  Type = operation
  Example.Request = $implements-request.txt
  Example.Response = $implements-response.txt
  Title = Test if a server implements a client\'s required operations
  Footer = The operation does not perform a full conformance check; in particular it does not check that the profiles align. It merely checks that the behaviors the client wishes to use are provided\n\nTechnically, this operation is implemented as follows:\n * The server\'s capability statement must have an entry for each resource in the client\'s capability statement \n * The servers\' resource support must have matching flags for updateCreate, conditionalCreate, conditionalRead, conditionalUpdate, conditionalDelete, searchInclude, searchRevInclude\n * The server capability statement must have a matching interaction for each interaction in the client capability statement (whether or not it is on a resource)\n * The server must have a search parameter with matching name and definition for any search parameters in the client capability statement\n * The server must have an operation definitions with a matching reference for any operations in the client capability statement\n\nIf the capability statements match by these rules, then the return value is a 200 OK with an operation outcome that contains no issues with severity >= error. If the capability statement doesn\'t match, the return value is a 4xx error, with an OperationOutcome with at least one issue with severity >= error
  Idempotent = True

 -- Row 6 -----------------------------------
  Name = implements.server
  Use = in
  Documentation = The canonical URL for the server capability statement - use this if the implements is not invoked on an instance (or on the /metadata end-point)
  Type = uri
  Min = 0
  Max = 1

 -- Row 7 -----------------------------------
  Name = implements.client
  Use = in
  Documentation = The canonical URL for the client capability statement - use this if the implements is not invoked on an instance (or on the /metadata end-point)
  Type = uri
  Min = 0
  Max = 1

 -- Row 8 -----------------------------------
  Name = implements.resource
  Use = in
  Documentation = The client capability statement, provided inline
  Type = CapabilityStatement
  Min = 0
  Max = 1

 -- Row 9 -----------------------------------
  Name = implements.return
  Use = out
  Documentation = Outcome of the CapabilityStatement test
  Type = OperationOutcome
  Min = 1
  Max = 1

 -- Row 10 -----------------------------------
  Name = conforms
  Use = Resource
  Documentation = This operation asks the server to check that it implements all the resources, interactions, search parameters, and operations that the client provides in its capability statement. The client provides both capability statements by reference, and must ensure that all the referenced resources are available to the conformance server
  Type = operation
  Example.Request = $conforms-request.txt
  Example.Response = $conforms-response.txt
  Title = Test if a server implements a client\'s required operations
  Footer = The operation performs a full comparison of the functionality described by the two capability statements, including the profiles and value sets they reference, and also including concept maps and structure maps. \n\nThe full execution of this operation is still a matter of research, but it is intended to support comparison of systems to see if they will interoperate\n\nIf the capability statements can be successfully compared, then the return value is a 200 OK with an OperationOutcome along with intersection and union capability statements. The operation outcome can contain errors relating to differences between the capability statements. If the capability statements cannot be compared, because dependencies cannot be located, the return value is a 4xx error, with an OperationOutcome with at least one issue with severity >= error
  Idempotent = True

 -- Row 11 -----------------------------------
  Name = conforms.left
  Use = in
  Documentation = The canonical URL for the left-hand system\'s capability statement
  Type = uri
  Min = 0
  Max = 1

 -- Row 12 -----------------------------------
  Name = conforms.right
  Use = in
  Documentation = The canonical URL for the right-hand system\'s capability statement
  Type = uri
  Min = 0
  Max = 1

 -- Row 13 -----------------------------------
  Name = conforms.mode
  Use = in
  Documentation = What kind of comparison to perform - server to server, or client to server (use the codes \'server/server\' or \'client/server\')
  Type = code
  Min = 0
  Max = 1

 -- Row 14 -----------------------------------
  Name = conforms.issues
  Use = out
  Documentation = Outcome of the CapabilityStatement test
  Type = OperationOutcome
  Min = 1
  Max = 1

 -- Row 15 -----------------------------------
  Name = conforms.union
  Use = out
  Documentation = The intersection of the functionality described by the CapabilityStatement resources
  Type = CapabilityStatement
  Min = 0
  Max = 1

 -- Row 16 -----------------------------------
  Name = conforms.intersection
  Use = out
  Documentation = The union of the functionality described by the CapabilityStatement resources
  Type = CapabilityStatement
  Min = 0
  Max = 1
