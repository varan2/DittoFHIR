
=== Sheet Bindings =====================================

 -- Row 1 -----------------------------------
  Binding Name = TestScriptOperationCode
  Binding = value set
  Reference = valueset-testscript-operation-codes
  Definition = The allowable operation code types.
  Description = FHIR Operation Code Types
  Conformance = extensible

 -- Row 2 -----------------------------------
  Binding Name = !FHIRDefinedType
  Binding = value set
  Reference = http://hl7.org/fhir/defined-types
  Definition = The FHIR defined types.
  Description = FHIR Defined Types
  Conformance = example
  Uri = http://hl7.org/fhir/defined-types

 -- Row 3 -----------------------------------
  Binding Name = ContentType
  Binding = code list
  Reference = #content-type
  Definition = The content or mime type.
  Description = The content type or mime type to be specified in Accept or Content-Type header.
  Conformance = required

 -- Row 4 -----------------------------------
  Binding Name = AssertionDirectionType
  Binding = code list
  Reference = #assert-direction-codes
  Definition = The type of direction to use for assertion.
  Description = The direction to use for assertions.
  Conformance = required

 -- Row 5 -----------------------------------
  Binding Name = AssertionOperatorType
  Binding = code list
  Reference = #assert-operator-codes
  Definition = The type of operator to use for assertion.
  Description = The type of operator to use for assertions.
  Conformance = required

 -- Row 6 -----------------------------------
  Binding Name = AssertionResponseTypes
  Binding = code list
  Reference = #assert-response-code-types
  Definition = The type of response code to use for assertion.
  Description = The response code to expect in the response.
  Conformance = required

 -- Row 7 -----------------------------------
  Binding Name = TestScriptProfileOriginType
  Binding = value set
  Reference = valueset-testscript-profile-origin-types
  Definition = The type of origin profile the test system supports.
  Description = The type of origin profile the test system supports.
  Conformance = extensible

 -- Row 8 -----------------------------------
  Binding Name = TestScriptProfileDestinationType
  Binding = value set
  Reference = valueset-testscript-profile-destination-types
  Definition = The type of destination profile the test system supports.
  Description = The type of destination profile the test system supports.
  Conformance = extensible

 -- Row 9 -----------------------------------
  Binding Name = TestScriptRequestMethodCode
  Binding = code list
  Reference = #http-operations
  Definition = The allowable request method or HTTP operation codes.
  Description = The allowable request method or HTTP operation codes.
  Conformance = required

=== Sheet content-type =====================================

 -- Row 1 -----------------------------------
  Id = 1
  Code = xml
  Display = xml
  Definition = XML content-type corresponding to the application/fhir+xml mime-type.

 -- Row 2 -----------------------------------
  Id = 2
  Code = json
  Display = json
  Definition = JSON content-type corresponding to the application/fhir+json mime-type.

 -- Row 3 -----------------------------------
  Id = 3
  Code = ttl
  Display = ttl
  Definition = RDF content-type corresponding to the text/turtle mime-type.

 -- Row 4 -----------------------------------
  Id = 4
  Code = none
  Display = none
  Definition = Prevent the use of the corresponding http header.

=== Sheet assert-direction-codes =====================================

 -- Row 1 -----------------------------------
  Id = 1
  Code = response
  Display = response
  Definition = The assertion is evaluated on the response. This is the default value.

 -- Row 2 -----------------------------------
  Id = 2
  Code = request
  Display = request
  Definition = The assertion is evaluated on the request.

=== Sheet assert-operator-codes =====================================

 -- Row 1 -----------------------------------
  Id = 1
  Code = equals
  Display = equals
  Definition = Default value. Equals comparison.

 -- Row 2 -----------------------------------
  Id = 2
  Code = notEquals
  Display = notEquals
  Definition = Not equals comparison.

 -- Row 3 -----------------------------------
  Id = 3
  Code = in
  Display = in
  Definition = Compare value within a known set of values.

 -- Row 4 -----------------------------------
  Id = 4
  Code = notIn
  Display = notIn
  Definition = Compare value not within a known set of values.

 -- Row 5 -----------------------------------
  Id = 5
  Code = greaterThan
  Display = greaterThan
  Definition = Compare value to be greater than a known value.

 -- Row 6 -----------------------------------
  Id = 6
  Code = lessThan
  Display = lessThan
  Definition = Compare value to be less than a known value.

 -- Row 7 -----------------------------------
  Id = 7
  Code = empty
  Display = empty
  Definition = Compare value is empty.

 -- Row 8 -----------------------------------
  Id = 8
  Code = notEmpty
  Display = notEmpty
  Definition = Compare value is not empty.

 -- Row 9 -----------------------------------
  Id = 9
  Code = contains
  Display = contains
  Definition = Compare value string contains a known value.

 -- Row 10 -----------------------------------
  Id = 10
  Code = notContains
  Display = notContains
  Definition = Compare value string does not contain a known value.

 -- Row 11 -----------------------------------
  Id = 11
  Code = eval
  Display = evaluate
  Definition = Evaluate the fluentpath expression as a boolean condition.

=== Sheet assert-response-code-types =====================================

 -- Row 1 -----------------------------------
  Id = 1
  Code = okay
  Display = okay
  Definition = Response code is 200.

 -- Row 2 -----------------------------------
  Id = 2
  Code = created
  Display = created
  Definition = Response code is 201.

 -- Row 3 -----------------------------------
  Id = 3
  Code = noContent
  Display = noContent
  Definition = Response code is 204.

 -- Row 4 -----------------------------------
  Id = 4
  Code = notModified
  Display = notModified
  Definition = Response code is 304.

 -- Row 5 -----------------------------------
  Id = 5
  Code = bad
  Display = bad
  Definition = Response code is 400.

 -- Row 6 -----------------------------------
  Id = 6
  Code = forbidden
  Display = forbidden
  Definition = Response code is 403.

 -- Row 7 -----------------------------------
  Id = 7
  Code = notFound
  Display = notFound
  Definition = Response code is 404.

 -- Row 8 -----------------------------------
  Id = 8
  Code = methodNotAllowed
  Display = methodNotAllowed
  Definition = Response code is 405.

 -- Row 9 -----------------------------------
  Id = 9
  Code = conflict
  Display = conflict
  Definition = Response code is 409.

 -- Row 10 -----------------------------------
  Id = 10
  Code = gone
  Display = gone
  Definition = Response code is 410.

 -- Row 11 -----------------------------------
  Id = 11
  Code = preconditionFailed
  Display = preconditionFailed
  Definition = Response code is 412.

 -- Row 12 -----------------------------------
  Id = 12
  Code = unprocessable
  Display = unprocessable
  Definition = Response code is 422.

=== Sheet http-operations =====================================

 -- Row 1 -----------------------------------
  Id = 1
  Code = delete
  Display = DELETE
  Definition = HTTP DELETE operation

 -- Row 2 -----------------------------------
  Id = 2
  Code = get
  Display = GET
  Definition = HTTP GET operation

 -- Row 3 -----------------------------------
  Id = 3
  Code = options
  Display = OPTIONS
  Definition = HTTP OPTIONS operation

 -- Row 4 -----------------------------------
  Id = 4
  Code = patch
  Display = PATCH
  Definition = HTTP PATCH operation

 -- Row 5 -----------------------------------
  Id = 5
  Code = post
  Display = POST
  Definition = HTTP POST operation

 -- Row 6 -----------------------------------
  Id = 6
  Code = put
  Display = PUT
  Definition = HTTP PUT operation

=== Sheet Invariants =====================================

 -- Row 1 -----------------------------------
  Id = 1
  Context = TestScript.setup.action
  English = Setup action SHALL contain either an operation or assert but not both.
  XPath = (f:operation or f:assert) and not(f:operation and f:assert)
  Expression = operation.exists() xor assert.exists()

 -- Row 2 -----------------------------------
  Id = 2
  Context = TestScript.test.action
  English = Test action SHALL contain either an operation or assert but not both.
  XPath = (f:operation or f:assert) and not(f:operation and f:assert)
  Expression = operation.exists() xor assert.exists()

 -- Row 3 -----------------------------------
  Id = 3
  Context = TestScript.variable
  English = Variable can only contain one of expression, headerField or path.
  XPath = not(f:expression and f:headerField and f:path)
  Expression = expression.empty() or headerField.empty() or path.empty()

 -- Row 4 -----------------------------------
  Id = 4
  Context = TestScript.metadata
  English = TestScript metadata capability SHALL contain required or validated or both.
  XPath = f:capability/f:required or f:capability/f:validated or (f:capability/f:required and f:capability/f:validated)
  Expression = capability.required.exists() or capability.validated.exists()

 -- Row 5 -----------------------------------
  Id = 5
  Context = TestScript.setup.action.assert
  English = Only a single assertion SHALL be present within setup action assert element.
  XPath = count(f:contentType) + count(f:expression) + count(f:headerField) + count(f:minimumId) + count(f:navigationLinks) + count(f:path) + count(f:requestMethod) + count(f:resource) + count(f:responseCode) + count(f:response) + count(f:rule) + count(f:ruleset) + count(f:validateProfileId)  <=1
  Expression = contentType.count() + expression.count() + headerField.count() + minimumId.count() + navigationLinks.count() + path.count() + requestMethod.count() + resource.count() + responseCode.count() + response.count() + rule.count() + ruleset.count() + validateProfileId.count() <=1

 -- Row 6 -----------------------------------
  Id = 6
  Context = TestScript.test.action.assert
  English = Only a single assertion SHALL be present within test action assert element.
  XPath = count(f:contentType) + count(f:expression) + count(f:headerField) + count(f:minimumId) + count(f:navigationLinks) + count(f:path) + count(f:requestMethod) + count(f:resource) + count(f:responseCode) + count(f:response) + count(f:rule) + count(f:ruleset) + count(f:validateProfileId)  <=1
  Expression = contentType.count() + expression.count() + headerField.count() + minimumId.count() + navigationLinks.count() + path.count() + requestMethod.count() + resource.count() + responseCode.count() + response.count() + rule.count() + ruleset.count() + validateProfileId.count() <=1

 -- Row 7 -----------------------------------
  Id = 7
  Context = TestScript.setup.action.operation
  English = Setup operation SHALL contain either sourceId or targetId or params or url.
  XPath = f:sourceId or ((f:targetId or f:url or f:params) and (count(f:targetId) + count(f:url) + count(f:params) =1)) or (f:type/f:code/@value=\'capabilities\' or f:type/f:code/@value=\'search\' or f:type/f:code/@value=\'transaction\' or f:type/f:code/@value=\'history\')
  Expression = sourceId.exists() or (targetId.count() + url.count() + params.count() = 1) or (type.code in (\'capabilities\' |\'search\' | \'transaction\' | \'history\'))

 -- Row 8 -----------------------------------
  Id = 8
  Context = TestScript.test.action.operation
  English = Test operation SHALL contain either sourceId or targetId or params or url.
  XPath = f:sourceId or (f:targetId or f:url or f:params) and (count(f:targetId) + count(f:url) + count(f:params) =1) or (f:type/f:code/@value=\'capabilities\' or f:type/f:code/@value=\'search\' or f:type/f:code/@value=\'transaction\' or f:type/f:code/@value=\'history\')
  Expression = sourceId.exists() or (targetId.count() + url.count() + params.count() = 1) or (type.code in (\'capabilities\' | \'search\' | \'transaction\' | \'history\'))

 -- Row 9 -----------------------------------
  Id = 9
  Context = TestScript.teardown.action.operation
  English = Teardown operation SHALL contain either sourceId or targetId or params or url.
  XPath = f:sourceId or (f:targetId or f:url or (f:params and f:resource)) and (count(f:targetId) + count(f:url) + count(f:params) =1) or (f:type/f:code/@value=\'capabilities\' or f:type/f:code/@value=\'search\' or f:type/f:code/@value=\'transaction\' or f:type/f:code/@value=\'history\')
  Expression = sourceId.exists() or (targetId.count() + url.count() + params.count() = 1) or (type.code in (\'capabilities\' | \'search\' | \'transaction\' | \'history\'))

 -- Row 10 -----------------------------------
  Id = 10
  Context = TestScript.setup.action.assert
  English = Setup action assert SHALL contain either compareToSourceId and compareToSourceExpression, compareToSourceId and compareToSourcePath or neither.
  XPath = (f:compareToSourceId and f:compareToSourceExpression) or (f:compareToSourceId and f:compareToSourcePath) or not(f:compareToSourceId or f:compareToSourceExpression or f:compareToSourcePath)
  Expression = compareToSourceId.empty() xor (compareToSourceExpression.exists() or compareToSourcePath.exists())

 -- Row 11 -----------------------------------
  Id = 11
  Context = TestScript.test.action.assert
  English = Test action assert SHALL contain either compareToSourceId and compareToSourceExpression, compareToSourceId and compareToSourcePath or neither.
  XPath = (f:compareToSourceId and f:compareToSourceExpression) or (f:compareToSourceId and f:compareToSourcePath) or not(f:compareToSourceId or f:compareToSourceExpression or f:compareToSourcePath)
  Expression = compareToSourceId.empty() xor (compareToSourceExpression.exists() or compareToSourcePath.exists())

 -- Row 12 -----------------------------------
  Id = 12
  Context = TestScript.setup.action.assert
  English = Setup action assert response and responseCode SHALL be empty when direction equals request
  XPath = ((count(f:response) + count(f:responseCode)) = 0 and (f:direction/@value=\'request\')) or (count(f:direction) = 0) or (f:direction/@value=\'response\')
  Expression = (response.empty() and responseCode.empty() and direction = \'request\') or direction.empty() or direction = \'response\'

 -- Row 13 -----------------------------------
  Id = 13
  Context = TestScript.test.action.assert
  English = Test action assert response and response and responseCode SHALL be empty when direction equals request
  XPath = ((count(f:response) + count(f:responseCode)) = 0 and (f:direction/@value=\'request\')) or (count(f:direction) = 0) or (f:direction/@value=\'response\')
  Expression = (response.empty() and responseCode.empty() and direction = \'request\') or direction.empty() or direction = \'response\'

=== Sheet Data Elements =====================================

 -- Row 1 -----------------------------------
  Element = TestScript
  UML = 200;150
  Type = MetadataResource
  Short Name = Describes a set of tests
  Definition = A structured set of tests against a FHIR server implementation to determine compliance against the FHIR specification.
  RIM Mapping = n/a
  w5 = conformance.misc

 -- Row 2 -----------------------------------
  Element = TestScript.url
  Card. = 1..1
  Aliases = url, authoritative-url, destination, identity

 -- Row 3 -----------------------------------
  Element = TestScript.identifier
  Card. = 0..1
  w5 = id

 -- Row 4 -----------------------------------
  Element = TestScript.version

 -- Row 5 -----------------------------------
  Element = TestScript.name
  Card. = 1..1

 -- Row 6 -----------------------------------
  Element = TestScript.title

 -- Row 7 -----------------------------------
  Element = TestScript.status

 -- Row 8 -----------------------------------
  Element = TestScript.experimental

 -- Row 9 -----------------------------------
  Element = TestScript.date

 -- Row 10 -----------------------------------
  Element = TestScript.publisher

 -- Row 11 -----------------------------------
  Element = TestScript.contact

 -- Row 12 -----------------------------------
  Element = TestScript.description

 -- Row 13 -----------------------------------
  Element = TestScript.useContext

 -- Row 14 -----------------------------------
  Element = TestScript.jurisdiction

 -- Row 15 -----------------------------------
  Element = TestScript.purpose

 -- Row 16 -----------------------------------
  Element = TestScript.copyright

 -- Row 17 -----------------------------------
  Element = TestScript.origin
  Card. = 0..*
  UML = -70;140
  Short Name = An abstract server representing a client or sender in a message exchange
  Definition = An abstract server used in operations within this test script in the origin element.
  Comments = The purpose of this element is to define the profile of an origin element used elsewhere in the script.  Test engines could then use the origin-profile mapping to offer a filtered list of test systems that can serve as the sender for the interaction.

 -- Row 18 -----------------------------------
  Element = TestScript.origin.index
  Card. = 1..1
  Type = integer
  Short Name = The index of the abstract origin server starting at 1
  Definition = Abstract name given to an origin server in this test script.  The name is provided as a number starting at 1.
  Comments = A given origin index (e.g. 1) can appear only once in the list (e.g. Origin 1 cannot be specified twice ... once as FormFiller and and again as FormProcessor within the same script as that could get confusing during test configuration). \n\nDifferent origin indices could play the same actor in the same test script (e.g. You could have two different test systems acting as Form-Filler).\n\nThe origin indices provided elsewhere in the test script must be one of these origin indices.

 -- Row 19 -----------------------------------
  Element = TestScript.origin.profile
  Card. = 1..1
  Type = Coding
  Binding = TestScriptProfileOriginType
  Short Name = FHIR-Client | FHIR-SDC-FormFiller
  Definition = The type of origin profile the test system supports.
  Comments = Must be a \"sender\"/\"client\" profile.
  Missing Meaning = FHIR-Client

 -- Row 20 -----------------------------------
  Element = TestScript.destination
  Card. = 0..*
  UML = -120;220
  Short Name = An abstract server representing a destination or receiver in a message exchange
  Definition = An abstract server used in operations within this test script in the destination element.
  Comments = The purpose of this element is to define the profile of a destination element used elsewhere in the script.  Test engines could then use the destination-profile mapping to offer a filtered list of test systems that can serve as the receiver for the interaction.

 -- Row 21 -----------------------------------
  Element = TestScript.destination.index
  Card. = 1..1
  Type = integer
  Short Name = The index of the abstract destination server starting at 1
  Definition = Abstract name given to a destination server in this test script.  The name is provided as a number starting at 1.
  Comments = A given destination index (e.g. 1) can appear only once in the list (e.g. Destination 1 cannot be specified twice ... once as Form-Manager and again as Form-Processor within the same script as that could get confusing during test configuration). \n\nDifferent destination indices could play the same actor in the same test script (e.g. You could have two different test systems acting as Form-Manager).\n\nThe destination indices provided elsewhere in the test script must be one of these destination indices.

 -- Row 22 -----------------------------------
  Element = TestScript.destination.profile
  Card. = 1..1
  Type = Coding
  Binding = TestScriptProfileDestinationType
  Short Name = FHIR-Server | FHIR-SDC-FormManager | FHIR-SDC-FormReceiver | FHIR-SDC-FormProcessor
  Definition = The type of destination profile the test system supports.
  Comments = Must be a \"receiver\"/\"server\" profile.
  Missing Meaning = FHIR-Server

 -- Row 23 -----------------------------------
  Element = TestScript.metadata
  Card. = 0..1
  UML = 260;30
  Short Name = Required capability that is assumed to function correctly on the FHIR server being tested
  Definition = The required capability must exist and are assumed to function correctly on the FHIR server being tested.

 -- Row 24 -----------------------------------
  Element = TestScript.metadata.link
  Card. = 0..*
  UML = 360;0
  Short Name = Links to the FHIR specification
  Definition = A link to the FHIR specification that this test is covering.

 -- Row 25 -----------------------------------
  Element = TestScript.metadata.link.url
  Card. = 1..1
  Type = uri
  Short Name = URL to the specification
  Definition = URL to a particular requirement or feature within the FHIR specification.

 -- Row 26 -----------------------------------
  Element = TestScript.metadata.link.description
  Card. = 0..1
  Type = string
  Short Name = Short description
  Definition = Short description of the link.

 -- Row 27 -----------------------------------
  Element = TestScript.metadata.capability
  Card. = 1..*
  UML = -70;0
  Short Name = Capabilities  that are assumed to function correctly on the FHIR server being tested
  Definition = Capabilities that must exist and are assumed to function correctly on the FHIR server being tested.
  Comments = When the metadata capabilities section is defined at TestScript.metadata or at TestScript.setup.metadata, and the server\'s conformance statement does not contain the elements defined in the minimal conformance statement, then all the tests in the TestScript are skipped.  When the metadata capabilities section is defined at TestScript.test.metadata and the server\'s conformance statement does not contain the elements defined in the minimal conformance statement, then only that test is skipped.  The \"metadata.capabilities.required\" and \"metadata.capabilities.validated\" elements only indicate whether the capabilities are the primary focus of the test script or not.  They do not impact the skipping logic.  Capabilities whose \"metadata.capabilities.validated\" flag is true are the primary focus of the test script.

 -- Row 28 -----------------------------------
  Element = TestScript.metadata.capability.required
  Card. = 0..1
  Type = boolean
  Short Name = Are the capabilities required?
  Definition = Whether or not the test execution will require the given capabilities of the server in order for this test script to execute.
  Default Value = False

 -- Row 29 -----------------------------------
  Element = TestScript.metadata.capability.validated
  Card. = 0..1
  Type = boolean
  Short Name = Are the capabilities validated?
  Definition = Whether or not the test execution will validate the given capabilities of the server in order for this test script to execute.
  Default Value = False

 -- Row 30 -----------------------------------
  Element = TestScript.metadata.capability.description
  Card. = 0..1
  Type = string
  Short Name = The expected capabilities of the server
  Definition = Description of the capabilities that this test script is requiring the server to support.

 -- Row 31 -----------------------------------
  Element = TestScript.metadata.capability.origin
  Card. = 0..*
  Type = integer
  Short Name = Which origin server these requirements apply to
  Definition = Which origin server these requirements apply to

 -- Row 32 -----------------------------------
  Element = TestScript.metadata.capability.destination
  Card. = 0..1
  Type = integer
  Short Name = Which server these requirements apply to
  Definition = Which server these requirements apply to.

 -- Row 33 -----------------------------------
  Element = TestScript.metadata.capability.link
  Card. = 0..*
  Type = uri
  Short Name = Links to the FHIR specification
  Definition = Links to the FHIR specification that describes this interaction and the resources involved in more detail.

 -- Row 34 -----------------------------------
  Element = TestScript.metadata.capability.capabilities
  Card. = 1..1
  Type = Reference(CapabilityStatement)
  Short Name = Required Capability Statement
  Definition = Minimum capabilities required of server for test script to execute successfully.   If server does not meet at a minimum the referenced capability statement, then all tests in this script are skipped.
  Comments = The conformance statement of the server has to contain at a minimum the contents of the reference pointed to by this element.

 -- Row 35 -----------------------------------
  Element = TestScript.fixture
  Card. = 0..*
  UML = 550;150
  Short Name = Fixture in the test script - by reference (uri)
  Definition = Fixture in the test script - by reference (uri). All fixtures are required for the test script to execute.

 -- Row 36 -----------------------------------
  Element = TestScript.fixture.autocreate
  Card. = 0..1
  Type = boolean
  Short Name = Whether or not to implicitly create the fixture during setup
  Definition = Whether or not to implicitly create the fixture during setup. If true, the fixture is automatically created on each server being tested during setup, therefore no create operation is required for this fixture in the TestScript.setup section.
  Default Value = False

 -- Row 37 -----------------------------------
  Element = TestScript.fixture.autodelete
  Card. = 0..1
  Type = boolean
  Short Name = Whether or not to implicitly delete the fixture during teardown
  Definition = Whether or not to implicitly delete the fixture during teardown. If true, the fixture is automatically deleted on each server being tested during teardown, therefore no delete operation is required for this fixture in the TestScript.teardown section.
  Default Value = False

 -- Row 38 -----------------------------------
  Element = TestScript.fixture.resource
  Card. = 0..1
  Type = Reference(Any)
  Short Name = Reference of the resource
  Definition = Reference to the resource (containing the contents of the resource needed for operations)
  Comments = See http://build.fhir.org/resourcelist.html for complete list of resource types.

 -- Row 39 -----------------------------------
  Element = TestScript.profile
  Card. = 0..*
  Type = Reference(Any)
  Short Name = Reference of the validation profile
  Definition = Reference to the profile to be used for validation.
  Comments = See http://build.fhir.org/resourcelist.html for complete list of resource types.

 -- Row 40 -----------------------------------
  Element = TestScript.variable
  Card. = 0..*
  UML = 580;250
  Short Name = Placeholder for evaluated elements
  Definition = Variable is set based either on element value in response body or on header field value in the response headers.
  Comments = Variables would be set based either on XPath/JSONPath expressions against fixtures (static and response), or headerField evaluations against response headers. If variable evaluates to nodelist or anything other than a primitive value, then test engine would report an error.  Variables would be used to perform clean replacements in \"operation.params\", \"operation.requestHeader.value\", and \"operation.url\" element values during operation calls and in \"assert.value\" during assertion evaluations. This limits the places that test engines would need to look for placeholders \"${}\".  Variables are scoped to the whole script. They are NOT evaluated at declaration. They are evaluated by test engine when used for substitutions in \"operation.params\", \"operation.requestHeader.value\", and \"operation.url\" element values during operation calls and in \"assert.value\" during assertion evaluations.  See example testscript-search.xml.

 -- Row 41 -----------------------------------
  Element = TestScript.variable.name
  Card. = 1..1
  Type = string
  Short Name = Descriptive name for this variable
  Definition = Descriptive name for this variable
  Comments = Placeholders would contain the variable name wrapped in ${} in \"operation.params\", \"operation.requestHeader.value\", and \"operation.url\" elements.  These placeholders would need to be replaced by the variable value before the operation is executed.

 -- Row 42 -----------------------------------
  Element = TestScript.variable.defaultValue
  Card. = 0..1
  Type = string
  Short Name = Default, hard-coded, or user-defined value for this variable
  Definition = A default, hard-coded, or user-defined value for this variable
  Comments = The purpose of this element is to allow for a pre-defined value that can be used as a default or as an override value. Test engines can optionally use this as a placeholder for user-defined execution time values.

 -- Row 43 -----------------------------------
  Element = TestScript.variable.description
  Card. = 0..1
  Type = string
  Short Name = Natural language description of the variable
  Definition = A free text natural language description of the variable and its purpose

 -- Row 44 -----------------------------------
  Element = TestScript.variable.expression
  Card. = 0..1
  Type = string
  Short Name = The fluentpath expression against the fixture body
  Definition = The fluentpath expression to evaluate against the fixture body. When variables are defined, only one of either expression, headerField or path must be specified.
  Comments = If headerField is defined, then the variable will be evaluated against the headers that sourceId is pointing to.  If expression or path is defined, then the variable will be evaluated against the fixture body that sourceId is pointing to.  It is an error to define any combination of expression, headerField and path.

 -- Row 45 -----------------------------------
  Element = TestScript.variable.headerField
  Card. = 0..1
  Type = string
  Short Name = HTTP header field name for source
  Definition = Will be used to grab the HTTP header field value from the headers that sourceId is pointing to.
  Comments = If headerField is defined, then the variable will be evaluated against the headers that sourceId is pointing to.  If path is defined, then the variable will be evaluated against the fixture body that sourceId is pointing to.  It is an error to define both headerField and path.

 -- Row 46 -----------------------------------
  Element = TestScript.variable.hint
  Card. = 0..1
  Type = string
  Short Name = Hint help text for default value to enter
  Definition = Displayable text string with hint help information to the user when entering a default value

 -- Row 47 -----------------------------------
  Element = TestScript.variable.path
  Card. = 0..1
  Type = string
  Short Name = XPath or JSONPath against the fixture body
  Definition = XPath or JSONPath to evaluate against the fixture body.  When variables are defined, only one of either expression, headerField or path must be specified.
  Comments = If headerField is defined, then the variable will be evaluated against the headers that sourceId is pointing to.  If expression or path is defined, then the variable will be evaluated against the fixture body that sourceId is pointing to.  It is an error to define any combination of expression, headerField and path.

 -- Row 48 -----------------------------------
  Element = TestScript.variable.sourceId
  Card. = 0..1
  Type = id
  Short Name = Fixture Id of source expression or headerField within this variable
  Definition = Fixture to evaluate the XPath/JSONPath expression or the headerField  against within this variable.
  Comments = This can be a statically defined fixture (at the top of the TestScript) or a dynamically set fixture created by responseId of the `action.operation` element.

 -- Row 49 -----------------------------------
  Element = TestScript.rule
  Card. = 0..*
  UML = 520;0
  Short Name = Assert rule used within the test script
  Definition = Assert rule to be used in one or more asserts within the test script
  Comments = Each rule should be treated by test engines as one assertion regardless of how many assertions are contained within the external rule template.  The impact of negative rule evaluation on test script execution is the same as an assertion failure which is described elsewhere in the TestScript resource.

 -- Row 50 -----------------------------------
  Element = TestScript.rule.resource
  Card. = 1..1
  Type = Reference(Any)
  Short Name = Assert rule resource reference
  Definition = Reference to the resource (containing the contents of the rule needed for assertions)

 -- Row 51 -----------------------------------
  Element = TestScript.rule.param
  Card. = 0..*
  UML = 720;0
  Type = =RuleParam
  Short Name = Rule parameter template
  Definition = Each rule template can take one or more parameters for rule evaluation
  Comments = The parameter value can be dynamic at runtime.

 -- Row 52 -----------------------------------
  Element = TestScript.rule.param.name
  Card. = 1..1
  Type = string
  Short Name = Parameter name matching external assert rule parameter
  Definition = Descriptive name for this parameter that matches the external assert rule parameter name
  Comments = The external rule template would be looking for the parameter by this name.

 -- Row 53 -----------------------------------
  Element = TestScript.rule.param.value
  Card. = 0..1
  Type = string
  Short Name = Parameter value defined either explicitly or dynamically
  Definition = The explicit or dynamic value for the parameter that will be passed on to the external rule template.
  Comments = This value can be overwritten by the assert.rule.param.value i.e. TestScript.rule.param.value will be used if assert.rule.param.value is not specified.  The param value can be a string-representation of a number, string, or boolean that is expected. Test engines do have to look for placeholders (${}) and replace the variable placeholders with the variable values at runtime before supplying this value to the external rule template.

 -- Row 54 -----------------------------------
  Element = TestScript.ruleset
  Card. = 0..*
  UML = 540;70
  Short Name = Assert ruleset used within the test script
  Definition = Contains one or more rules.  Offers a way to group rules so assertions could reference the group of rules and have them all applied.
  Comments = Each rule within a ruleset should be treated by test engines as one assertion regardless of how many assertions are contained within the external rule template.  The impact of negative rule evaluation on test script execution is the same as an assertion failure which is described elsewhere in the TestScript resource.

 -- Row 55 -----------------------------------
  Element = TestScript.ruleset.resource
  Card. = 1..1
  Type = Reference(Any)
  Short Name = Assert ruleset resource reference
  Definition = Reference to the resource (containing the contents of the ruleset needed for assertions)

 -- Row 56 -----------------------------------
  Element = TestScript.ruleset.rule
  Card. = 1..*
  UML = 740;70
  Type = =RulesetRule
  Short Name = The referenced rule within the ruleset
  Definition = The referenced rule within the external ruleset template
  Comments = This qualifies each param name so that  a parameter with the same name can be used differently by the different rules with the ruleset.

 -- Row 57 -----------------------------------
  Element = TestScript.ruleset.rule.ruleId
  Card. = 1..1
  Type = id
  Short Name = Id of referenced rule within the ruleset
  Definition = Id of the referenced rule within the external ruleset template

 -- Row 58 -----------------------------------
  Element = TestScript.ruleset.rule.param
  Card. = 0..*
  UML = 760;160
  Type = =RulesetRuleParam
  Short Name = Ruleset rule parameter template
  Definition = Each rule template can take one or more parameters for rule evaluation
  Comments = The parameter value can be dynamic at runtime.

 -- Row 59 -----------------------------------
  Element = TestScript.ruleset.rule.param.name
  Card. = 1..1
  Type = string
  Short Name = Parameter name matching external assert ruleset rule parameter
  Definition = Descriptive name for this parameter that matches the external assert ruleset rule parameter name
  Comments = The external rule template would be looking for the parameter by this name.

 -- Row 60 -----------------------------------
  Element = TestScript.ruleset.rule.param.value
  Card. = 0..1
  Type = string
  Short Name = Parameter value defined either explicitly or dynamically
  Definition = The value for the parameter that will be passed on to the external ruleset rule template.
  Comments = This value can be overwritten by the assert.ruleset.rule.param.value i.e. TestScript.ruleset.rule.param.value will be used if assert.ruleset.rule.param.value is not specified.  The param value can be a string-representation of a number, string, or boolean that is expected. Test engines do have to look for placeholders (${}) and replace the variable placeholders with the variable values at runtime before supplying this value to the external rule template.

 -- Row 61 -----------------------------------
  Element = TestScript.setup
  Card. = 0..1
  UML = 0;300
  Short Name = A series of required setup operations before tests are executed
  Definition = A series of required setup operations before tests are executed.

 -- Row 62 -----------------------------------
  Element = TestScript.setup.action
  Card. = 1..*
  UML = 20;390
  Type = =SetupAction
  Short Name = A setup operation or assert to perform
  Definition = Action would contain either an operation or an assertion.
  Comments = An action should contain either an operation or an assertion but not both.  It can contain any number of variables.

 -- Row 63 -----------------------------------
  Element = TestScript.setup.action.operation
  Card. = 0..1
  UML = -40;490
  Short Name = The setup operation to perform
  Definition = The operation to perform

 -- Row 64 -----------------------------------
  Element = TestScript.setup.action.operation.type
  Card. = 0..1
  Type = Coding
  Binding = TestScriptOperationCode
  Short Name = The operation code type that will be executed
  Definition = Server interaction or operation type
  Comments = See http://build.fhir.org/http.html for list of server interactions

 -- Row 65 -----------------------------------
  Element = TestScript.setup.action.operation.resource
  Card. = 0..1
  Type = code
  Binding = FHIRDefinedType
  Short Name = Resource type
  Definition = The type of the resource.  See http://build.fhir.org/resourcelist.html.
  Comments = If \"url\" element is specified, then \"targetId\", \"params\", and \"resource\" elements will be ignored as \"url\" element will have everything needed for constructing the request url.  If \"params\" element is specified, then \"targetId\" element is ignored. For FHIR operations that require a resource (e.g. \"read\" and \"vread\" operations), the \"resource\" element must be specified when \"params\" element is specified.  If \"url\" and \"params\" elements are absent, then the request url will be constructed from \"targetId\" fixture if present. For \"read\" operation, the resource and id values will be extracted from \"targetId\" fixture and used to construct the url. For \"vread\" and \"history\" operations, the versionId value will also be used.

 -- Row 66 -----------------------------------
  Element = TestScript.setup.action.operation.label
  Card. = 0..1
  Type = string
  Short Name = Tracking/logging operation label
  Definition = The label would be used for tracking/logging purposes by test engines.
  Comments = This has no impact on the verification itself.

 -- Row 67 -----------------------------------
  Element = TestScript.setup.action.operation.description
  Card. = 0..1
  Type = string
  Short Name = Tracking/reporting operation description
  Definition = The description would be used by test engines for tracking and reporting purposes.
  Comments = This has no impact on the verification itself.

 -- Row 68 -----------------------------------
  Element = TestScript.setup.action.operation.accept
  Card. = 0..1
  Type = code
  Binding = ContentType
  Short Name = xml | json | ttl | none
  Definition = The content-type or mime-type to use for RESTful operation in the \'Accept\' header.
  Comments = If this is specified, then test engine shall set the \'Accept\' header to the corresponding value.    If \'xml\' is specified, then \'Accept\' header of \'application/fhir+xml\' will be set.  If \'json\' is specified, then \'application/fhir+json\' will be used.    If you\'d like to explicitly set the \'Accept\' to some other value then use the \'requestHeader\' element.
  Missing Meaning = xml

 -- Row 69 -----------------------------------
  Element = TestScript.setup.action.operation.contentType
  Card. = 0..1
  Type = code
  Binding = ContentType
  Short Name = xml | json | ttl | none
  Definition = The content-type or mime-type to use for RESTful operation in the \'Content-Type\' header.
  Comments = If this is specified, then test engine shall set the \'Content-Type\' header to the corresponding value.    If \'xml\' is specified, then \'Content-Type\' header of \'application/fhir+xml\' will be set.    If \'json\' is specified, then \'application/fhir+json\' will be used.    If you\'d like to explicitly set the \'Content-Type\' to some other value then use the \'requestHeader\' element.
  Missing Meaning = xml

 -- Row 70 -----------------------------------
  Element = TestScript.setup.action.operation.destination
  Card. = 0..1
  Type = integer
  Short Name = Server responding to the request
  Definition = The server where the request message is destined for.  Must be one of the server numbers listed in TestScript.destination section.
  Comments = If multiple TestScript.destination elements are defined and operation.destination is undefined, test engine will report an error as it cannot determine what destination to use for the exchange.

 -- Row 71 -----------------------------------
  Element = TestScript.setup.action.operation.encodeRequestUrl
  Card. = 0..1
  Type = boolean
  Short Name = Whether or not to send the request url in encoded format
  Definition = Whether or not to implicitly send the request url in encoded format. The default is true to match the standard RESTful client behavior. Set to false when communicating with a server that does not support encoded url paths.
  Default Value = True

 -- Row 72 -----------------------------------
  Element = TestScript.setup.action.operation.origin
  Card. = 0..1
  Type = integer
  Short Name = Server initiating the request
  Definition = The server where the request message originates from.  Must be one of the server numbers listed in TestScript.origin section.
  Comments = If absent, test engine will send the message.  When present, test engine will not send the request message but will wait for the request message to be sent from this origin server.

 -- Row 73 -----------------------------------
  Element = TestScript.setup.action.operation.params
  Card. = 0..1
  Type = string
  Short Name = Explicitly defined path parameters
  Definition = Path plus parameters after [type].  Used to set parts of the request URL explicitly.
  Comments = If \"url\" element is specified, then \"targetId\", \"params\", and \"resource\" elements will be ignored as \"url\" element will have everything needed for constructing the request url.  If \"params\" element is specified, then \"targetId\" element is ignored.  For FHIR operations that require a resource (e.g. \"read\" and \"vread\" operations), the \"resource\" element must be specified when \"params\" element is specified.  If \"url\" and \"params\" elements are absent, then the request url will be constructed from \"targetId\" fixture if present.  For \"read\" operation, the resource and id values will be extracted from \"targetId\" fixture and used to construct the url.  For \"vread\" and \"history\" operations, the versionId value will also be used.   Test engines would append whatever is specified for \"params\" to the URL after the resource type without tampering with the string (beyond encoding the URL for HTTP).  The \"params\" element does not correspond exactly to \"search parameters\".  Nor is it the \"path\".  It corresponds to the part of the URL that comes after the [type] (when \"resource\" element is specified); e.g. It corresponds to \"/[id]/_history/[vid] {?_format=[mime-type]}\" in the following operation: GET [base]/[type]/[id]/_history/[vid] {?_format=[mime-type]}  Test engines do have to look for placeholders (${}) and replace the variable placeholders with the variable values at runtime before sending the request.

 -- Row 74 -----------------------------------
  Element = TestScript.setup.action.operation.requestHeader
  Card. = 0..*
  UML = -30;780
  Short Name = Each operation can have one or more header elements
  Definition = Header elements would be used to set HTTP headers.
  Comments = This gives control to test-script writers to set headers explicitly based on test requirements.  It will allow for testing using:  - \"If-Modified-Since\" and \"If-None-Match\" headers.  See http://build.fhir.org/http.html#2.1.0.5.1 - \"If-Match\" header.  See http://build.fhir.org/http.html#2.1.0.11 - Conditional Create using \"If-None-Exist\".  See http://build.fhir.org/http.html#2.1.0.13.1 - Invalid \"Content-Type\" header for negative testing. - etc.

 -- Row 75 -----------------------------------
  Element = TestScript.setup.action.operation.requestHeader.field
  Card. = 1..1
  Type = string
  Short Name = HTTP header field name
  Definition = The HTTP header field e.g. \"Accept\"
  Comments = If header element is specified, then field is required.

 -- Row 76 -----------------------------------
  Element = TestScript.setup.action.operation.requestHeader.value
  Card. = 1..1
  Type = string
  Short Name = HTTP headerfield value
  Definition = The value of the header e.g. \"application/fhir+xml\"
  Comments = If header element is specified, then value is required.  No conversions will be done by the test engine e.g. \"xml\" to \"application/fhir+xml\".  The values will be set in HTTP headers \"as-is\".  Test engines do have to look for placeholders (${}) and replace the variable placeholders with the variable values at runtime before sending the request.

 -- Row 77 -----------------------------------
  Element = TestScript.setup.action.operation.requestId
  Card. = 0..1
  Type = id
  Short Name = Fixture Id of mapped request
  Definition = The fixture id (maybe new) to map to the request.
  Comments = If a requestId is supplied, then the resulting request (both headers and body) is mapped to the fixture ID (which may be entirely new and previously undeclared) designated by \"requestId\".  If requestId is not specified, it is the test engine\'s responsibility to store the request and use it as the requestId in subsequent assertions when assertion path and/or headerField is specified, direction is equal to request, and the requestId in not specified.

 -- Row 78 -----------------------------------
  Element = TestScript.setup.action.operation.responseId
  Card. = 0..1
  Type = id
  Short Name = Fixture Id of mapped response
  Definition = The fixture id (maybe new) to map to the response.
  Comments = If a responseId is supplied, and the server responds, then the resulting response (both headers and body) is mapped to the fixture ID (which may be entirely new and previously undeclared) designated by \"responseId\".  If responseId is not specified, it is the test engine\'s responsibility to store the response and use it as the responseId in subsequent assertions when assertion path and/or headerField is specified and the responseId is not specified.

 -- Row 79 -----------------------------------
  Element = TestScript.setup.action.operation.sourceId
  Card. = 0..1
  Type = id
  Short Name = Fixture Id of body for PUT and POST requests
  Definition = The id of the fixture used as the body of a PUT or POST request.

 -- Row 80 -----------------------------------
  Element = TestScript.setup.action.operation.targetId
  Card. = 0..1
  Type = id
  Short Name = Id of fixture used for extracting the [id],  [type], and [vid] for GET requests
  Definition = Id of fixture used for extracting the [id],  [type], and [vid] for GET requests
  Comments = If \"url\" element is specified, then \"targetId\", \"params\", and \"resource\" elements will be ignored as \"url\" element will have everything needed for constructing the request url.  If \"params\" element is specified, then \"targetId\" element is ignored.  For FHIR operations that require a resource (e.g. \"read\" and \"vread\" operations), the \"resource\" element must be specified when \"params\" element is specified.  If \"url\" and \"params\" elements are absent, then the request url will be constructed from \"targetId\" fixture if present.  For \"read\" operation, the resource and id values will be extracted from \"targetId\" fixture and used to construct the url.  For \"vread\" and \"history\" operations, the versionId value will also be used.

 -- Row 81 -----------------------------------
  Element = TestScript.setup.action.operation.url
  Card. = 0..1
  Type = string
  Short Name = Request URL
  Definition = Complete request URL.
  Comments = Used to set the request URL explicitly.  If \"url\" element is defined, then \"targetId\", \"resource\", and \"params\" elements will be ignored.  Test engines would use whatever is specified in \"url\" without tampering with the string (beyond encoding the URL for HTTP).  Test engines do have to look for placeholders (${}) and replace the variable placeholders with the variable values at runtime before sending the request.

 -- Row 82 -----------------------------------
  Element = TestScript.setup.action.assert
  Card. = 0..1
  UML = 280;490
  Short Name = The assertion to perform
  Definition = Evaluates the results of previous operations to determine if the server under test behaves appropriately.
  Comments = In order to evaluate an assertion, the request, response, and results of the most recently executed operation must always be maintained by the test engine.

 -- Row 83 -----------------------------------
  Element = TestScript.setup.action.assert.label
  Card. = 0..1
  Type = string
  Short Name = Tracking/logging assertion label
  Definition = The label would be used for tracking/logging purposes by test engines.
  Comments = This has no impact on the verification itself.

 -- Row 84 -----------------------------------
  Element = TestScript.setup.action.assert.description
  Card. = 0..1
  Type = string
  Short Name = Tracking/reporting assertion description
  Definition = The description would be used by test engines for tracking and reporting purposes.
  Comments = This has no impact on the verification itself.

 -- Row 85 -----------------------------------
  Element = TestScript.setup.action.assert.direction
  Card. = 0..1
  Type = code
  Binding = AssertionDirectionType
  Short Name = response | request
  Definition = The direction to use for the assertion.
  Comments = If the direction is specified as \"response\" (the default), then the processing of this assert is against the received response message. If the direction is specified as \"request\", then the processing of this assert is against the sent request message.

 -- Row 86 -----------------------------------
  Element = TestScript.setup.action.assert.compareToSourceId
  Card. = 0..1
  Type = string
  Short Name = Id of the source fixture to be evaluated
  Definition = Id of the source fixture used as the contents to be evaluated by either the \"source/expression\" or \"sourceId/path\" definition.

 -- Row 87 -----------------------------------
  Element = TestScript.setup.action.assert.compareToSourceExpression
  Card. = 0..1
  Type = string
  Short Name = The fluentpath expression to evaluate against the source fixture
  Definition = The fluentpath expression to evaluate against the source fixture. When compareToSourceId is defined, either compareToSourceExpression or compareToSourcePath must be defined, but not both.
  Comments = Thefhirpath expression to be evaluated against the expected fixture to compare to. Ignored if \"assert.value\" is used. The evaluation will be done before the assertion is evaluated.

 -- Row 88 -----------------------------------
  Element = TestScript.setup.action.assert.compareToSourcePath
  Card. = 0..1
  Type = string
  Short Name = XPath or JSONPath expression to evaluate against the source fixture
  Definition = XPath or JSONPath expression to evaluate against the source fixture. When compareToSourceId is defined, either compareToSourceExpression or compareToSourcePath must be defined, but not both.
  Comments = The XPath or JSONPath expression to be evaluated against the expected fixture to compare to. Ignored if \"assert.value\" is used. The evaluation will be done before the assertion is evaluated.

 -- Row 89 -----------------------------------
  Element = TestScript.setup.action.assert.contentType
  Card. = 0..1
  Type = code
  Binding = ContentType
  Short Name = xml | json | ttl | none
  Definition = The content-type or mime-type to use for RESTful operation in the \'Content-Type\' header.
  Comments = If this is specified, then test engine shall confirm that the content-type of the last operation\'s headers is set to this value.  If \"assert.sourceId\" element is specified, then the evaluation will be done against the headers mapped to that sourceId (and not the last operation\'s headers).    If \'xml\' is specified, then \'Content-Type\' header of \'application/fhir+xml\' will be confirmed. If \'json\' is specified, then \'application/fhir+json\' will be used. If you\'d like to have more control over the string, then use \'assert.headerField\' instead.
  Missing Meaning = xml

 -- Row 90 -----------------------------------
  Element = TestScript.setup.action.assert.expression
  Card. = 0..1
  Type = string
  Short Name = The fluentpath expression to be evaluated
  Definition = The fluentpath expression to be evaluated against the request or response message contents - HTTP headers and payload.
  Comments = If both \"expression\" and a \"fixtureId\" are specified, then the expression will be evaluated against the request or response body mapped to the fixtureId.  If \"expression\" is specified and a \"fixtureId\" is not, then the expression will be evaluated against the response body of the last operation.  Test engines are to store the request and response body and headers of the last operation at all times for subsequent assertions.

 -- Row 91 -----------------------------------
  Element = TestScript.setup.action.assert.headerField
  Card. = 0..1
  Type = string
  Short Name = HTTP header field name
  Definition = The HTTP header field name e.g. \'Location\'
  Comments = If \"headerField\" is specified then \"value\" must be specified.  If \"sourceId\" is not specified, then \"headerField\" will be evaluated against the last operation\'s response headers.  Test engines are to keep track of the last operation\'s response body and response headers.

 -- Row 92 -----------------------------------
  Element = TestScript.setup.action.assert.minimumId
  Card. = 0..1
  Type = string
  Short Name = Fixture Id of minimum content resource
  Definition = The ID of a fixture.  Asserts that the response contains at a minimum the fixture specified by minimumId.
  Comments = Asserts that the response contains all the element/content in another fixture pointed to by minimumId.  This can be a statically defined fixture or one that is dynamically set via responseId.

 -- Row 93 -----------------------------------
  Element = TestScript.setup.action.assert.navigationLinks
  Card. = 0..1
  Type = boolean
  Short Name = Perform validation on navigation links?
  Definition = Whether or not the test execution performs validation on the bundle navigation links
  Comments = Asserts that the Bundle contains first, last, and next links.

 -- Row 94 -----------------------------------
  Element = TestScript.setup.action.assert.operator
  Card. = 0..1
  Type = code
  Binding = AssertionOperatorType
  Short Name = equals | notEquals | in | notIn | greaterThan | lessThan | empty | notEmpty | contains | notContains | eval
  Definition = The operator type defines the conditional behavior of the assert. If not defined, the default is equals.
  Comments = Operators are useful especially for negative testing.  If operator is not specified, then the \"equals\" operator is assumed; e.g. <code>   <assert>  <operator value=\"in\" />  <responseCode value=\"200,201,204\" />    </assert>    <assert>  <operator value=\"notEquals\" />  <response value=\"okay\"/>   </assert>    <assert>  <operator value=\"greaterThan\" />    <responseHeader>     <field value=\"Content-Length\" />     <value value=\"0\" />    <responseHeader/>   </assert> </code>

 -- Row 95 -----------------------------------
  Element = TestScript.setup.action.assert.path
  Card. = 0..1
  Type = string
  Short Name = XPath or JSONPath expression
  Definition = The XPath or JSONPath expression to be evaluated against the fixture representing the response received from server.
  Comments = If both \"path\" and a \"fixtureId\" are specified, then the path will be evaluated against the request or response body mapped to the fixtureId.  If \"path\" is specified and a \"fixtureId\" is not, then the path will be evaluated against the response body of the last operation.  Test engines are to store the request and response body and headers of the last operation at all times for subsequent assertions.

 -- Row 96 -----------------------------------
  Element = TestScript.setup.action.assert.requestMethod
  Card. = 0..1
  Type = code
  Binding = TestScriptRequestMethodCode
  Short Name = delete | get | options | patch | post | put
  Definition = The request method or HTTP operation code to compare against that used by the client system under test.
  Comments = If \"requestMethod\" is specified then it will be used in place of \"value\". The \"requestMethod\" will evaluate against the last operation\'s request HTTP operation.

 -- Row 97 -----------------------------------
  Element = TestScript.setup.action.assert.requestURL
  Card. = 0..1
  Type = string
  Short Name = Request URL comparison value
  Definition = The value to use in a comparison against the request URL path string.
  Comments = If \"requestURL\" is specified then it will be used in place of \"value\". The \"requestURL\" will evaluate against the last operation\'s full request URL path string.

 -- Row 98 -----------------------------------
  Element = TestScript.setup.action.assert.resource
  Card. = 0..1
  Type = code
  Binding = FHIRDefinedType
  Short Name = Resource type
  Definition = The type of the resource.  See http://build.fhir.org/resourcelist.html.
  Comments = This will be expected resource type in response body e.g. in read, vread, search, etc.  See http://build.fhir.org/resourcelist.html for complete list of resource types; e.g. <assert > <resourceType value=\"Patient\" </assert>

 -- Row 99 -----------------------------------
  Element = TestScript.setup.action.assert.response
  Card. = 0..1
  Type = code
  Binding = AssertionResponseTypes
  Short Name = okay | created | noContent | notModified | bad | forbidden | notFound | methodNotAllowed | conflict | gone | preconditionFailed | unprocessable
  Definition = okay | created | noContent | notModified | bad | forbidden | notFound | methodNotAllowed | conflict | gone | preconditionFailed | unprocessable
  Comments = This is a shorter way of achieving similar verifications via \"assert.responseCode\".  If you need more control, then use \"assert.responseCode\"  e.g. <assert>  <contentType value=\"json\" />  <response value=\"okay\"/> </assert>

 -- Row 100 -----------------------------------
  Element = TestScript.setup.action.assert.responseCode
  Card. = 0..1
  Type = string
  Short Name = HTTP response code to test
  Definition = The value of the HTTP response code to be tested
  Comments = To be used with \"operator\" attribute value. Asserts that the response code equals this value if \"operator\" is not specified.   If the operator is \"in\" or \"notIn\" then the responseCode would be a comma-separated list of values e.g. \"200,201\". Otherwise, it\'s expected to be a numeric value.   If \"fixture\" is not specified, then the \"responseBodyId\" value of the last operation is assumed.

 -- Row 101 -----------------------------------
  Element = TestScript.setup.action.assert.rule
  Card. = 0..1
  UML = 600;550
  Type = =ActionAssertRule
  Short Name = The reference to a TestScript.rule
  Definition = The TestScript.rule this assert will evaluate
  Comments = Each rule should get evaluated by test engines as one assertion regardless of how many assertions are contained within the external rule template.  The impact of negative rule evaluation on test script execution is the same as an assertion failure which is descibed elsewhere in the TestScript resource.

 -- Row 102 -----------------------------------
  Element = TestScript.setup.action.assert.rule.ruleId
  Card. = 1..1
  Type = id
  Short Name = Id of the TestScript.rule
  Definition = The TestScript.rule id value this assert will evaluate

 -- Row 103 -----------------------------------
  Element = TestScript.setup.action.assert.rule.param
  Card. = 0..*
  UML = 760;550
  Type = =ActionAssertRuleParam
  Short Name = Rule parameter template
  Definition = Each rule template can take one or more parameters for rule evaluation
  Comments = The parameter value can be dynamic at runtime.

 -- Row 104 -----------------------------------
  Element = TestScript.setup.action.assert.rule.param.name
  Card. = 1..1
  Type = string
  Short Name = Parameter name matching external assert rule parameter
  Definition = Descriptive name for this parameter that matches the external assert rule parameter name
  Comments = The external rule template would be looking for the parameter by this name.

 -- Row 105 -----------------------------------
  Element = TestScript.setup.action.assert.rule.param.value
  Card. = 1..1
  Type = string
  Short Name = Parameter value defined either explicitly or dynamically
  Definition = The value for the parameter that will be passed on to the external rule template.
  Comments = This value overwrites the value (if any) specified in TestScript.rule.param.value.  The param value can be a string-representation of a number, string, or boolean that is expected.  Test engines do have to look for placeholders (${}) and replace the variable placeholders with the variable values at runtime before supplying this value to the external rule template.

 -- Row 106 -----------------------------------
  Element = TestScript.setup.action.assert.ruleset
  Card. = 0..1
  UML = 600;650
  Type = =ActionAssertRuleset
  Short Name = The reference to a TestScript.ruleset
  Definition = The TestScript.ruleset this assert will evaluate
  Comments = Each rule within a ruleset should get evaluated by test engines as a separate assertion.  The impact of negative rule evaluation on test script execution is the same as an assertion failure which is descibed elsewhere in the TestScript resource.  If the first rule within the ruleset results in a failed assertion, then test engines do not have to evaluate the rest of the rules within the ruleset.

 -- Row 107 -----------------------------------
  Element = TestScript.setup.action.assert.ruleset.rulesetId
  Card. = 1..1
  Type = id
  Short Name = Id of the TestScript.ruleset
  Definition = The TestScript.ruleset id value this assert will evaluate

 -- Row 108 -----------------------------------
  Element = TestScript.setup.action.assert.ruleset.rule
  Card. = 0..*
  UML = 760;650
  Type = =ActionAssertRulesetRule
  Short Name = The referenced rule within the ruleset
  Definition = The referenced rule within the external ruleset template
  Comments = This qualifies each param name so that  a parameter with the same name can be used differently by the different rules with the ruleset.

 -- Row 109 -----------------------------------
  Element = TestScript.setup.action.assert.ruleset.rule.ruleId
  Card. = 1..1
  Type = id
  Short Name = Id of referenced rule within the ruleset
  Definition = Id of the referenced rule within the external ruleset template

 -- Row 110 -----------------------------------
  Element = TestScript.setup.action.assert.ruleset.rule.param
  Card. = 0..*
  UML = 760;750
  Short Name = Rule parameter template
  Definition = Each rule template can take one or more parameters for rule evaluation
  Comments = The parameter value can be dynamic at runtime.

 -- Row 111 -----------------------------------
  Element = TestScript.setup.action.assert.ruleset.rule.param.name
  Card. = 1..1
  Type = string
  Short Name = Parameter name matching external assert ruleset rule parameter
  Definition = Descriptive name for this parameter that matches the external assert ruleset rule parameter name
  Comments = The external rule template would be looking for the parameter by this name.

 -- Row 112 -----------------------------------
  Element = TestScript.setup.action.assert.ruleset.rule.param.value
  Card. = 1..1
  Type = string
  Short Name = Parameter value defined either explicitly or dynamically
  Definition = The value for the parameter that will be passed on to the external ruleset rule template.
  Comments = This value overwrites the value (if any) specified in TestScript.ruleset.rule.param.value.  The param value can be a string-representation of a number, string, or boolean that is expected.  Test engines do have to look for placeholders (${}) and replace the variable placeholders with the variable values at runtime before supplying this value to the external rule template.

 -- Row 113 -----------------------------------
  Element = TestScript.setup.action.assert.sourceId
  Card. = 0..1
  Type = id
  Short Name = Fixture Id of source expression or headerField
  Definition = Fixture to evaluate the XPath/JSONPath expression or the headerField  against.
  Comments = This can be a statically defined fixture (at the top of the testscript) or a dynamically set fixture created by responseId of the action.operation element.

 -- Row 114 -----------------------------------
  Element = TestScript.setup.action.assert.validateProfileId
  Card. = 0..1
  Type = id
  Short Name = Profile Id of validation profile reference
  Definition = The ID of the Profile to validate against.
  Comments = The ID of a Profile fixture. Asserts that the response is valid according to the Profile specified by validateProfileId.

 -- Row 115 -----------------------------------
  Element = TestScript.setup.action.assert.value
  Card. = 0..1
  Type = string
  Short Name = The value to compare to
  Definition = The value to compare to
  Comments = The string-representation of a number, string, or boolean that is expected.  Test engines do have to look for placeholders (${}) and replace the variable placeholders with the variable values at runtime before comparing this value to the actual value.

 -- Row 116 -----------------------------------
  Element = TestScript.setup.action.assert.warningOnly
  Card. = 0..1
  Type = boolean
  Short Name = Will this assert produce a warning only on error?
  Definition = Whether or not the test execution will produce a warning only on error for this assert
  Comments = If this element is specified and it is true, then assertion failures can be logged by test engine but should not stop the test script execution from proceeding.  There are likely cases where the spec is not clear on what should happen. If the spec says something is optional (maybe a response header for example), but a server doesn’t do it, we could choose to issue a warning.
  Default Value = False

 -- Row 117 -----------------------------------
  Element = TestScript.test
  Card. = 0..*
  UML = 540;410
  Short Name = A test in this script
  Definition = A test in this script.

 -- Row 118 -----------------------------------
  Element = TestScript.test.name
  Card. = 0..1
  Type = string
  Short Name = Tracking/logging name of this test
  Definition = The name of this test used for tracking/logging purposes by test engines.

 -- Row 119 -----------------------------------
  Element = TestScript.test.description
  Card. = 0..1
  Type = string
  Short Name = Tracking/reporting short description of the test
  Definition = A short description of the test used by test engines for tracking and reporting purposes.

 -- Row 120 -----------------------------------
  Element = TestScript.test.action
  Card. = 1..*
  UML = 360;420
  Type = =TestAction
  Short Name = A test operation or assert to perform
  Definition = Action would contain either an operation or an assertion.
  Comments = An action should contain either an operation or an assertion but not both.  It can contain any number of variables.

 -- Row 121 -----------------------------------
  Element = TestScript.test.action.operation
  Card. = 0..1
  Type = @TestScript.setup.action.operation
  Short Name = The setup operation to perform
  Definition = An operation would involve a REST request to a server.

 -- Row 122 -----------------------------------
  Element = TestScript.test.action.assert
  Card. = 0..1
  Type = @TestScript.setup.action.assert
  Short Name = The setup assertion to perform
  Definition = Evaluates the results of previous operations to determine if the server under test behaves appropriately.
  Comments = In order to evaluate an assertion, the request, response, and results of the most recently executed operation must always be maintained by the test engine.

 -- Row 123 -----------------------------------
  Element = TestScript.teardown
  Card. = 0..1
  UML = 60;330
  Short Name = A series of required clean up steps
  Definition = A series of operations required to clean up after the all the tests are executed (successfully or otherwise).

 -- Row 124 -----------------------------------
  Element = TestScript.teardown.action
  Card. = 1..*
  UML = 130;390
  Type = =TeardownAction
  Short Name = One or more teardown operations to perform
  Definition = The teardown action will only contain an operation.
  Comments = An action should contain either an operation or an assertion but not both.  It can contain any number of variables.

 -- Row 125 -----------------------------------
  Element = TestScript.teardown.action.operation
  Card. = 1..1
  Type = @TestScript.setup.action.operation
  Short Name = The teardown operation to perform
  Definition = An operation would involve a REST request to a server.

=== Sheet Search =====================================

 -- Row 1 -----------------------------------
  Name = testscript-capability
  Type = string
  Description = TestScript required and validated capability
  Path = TestScript.metadata.capability.description

=== Sheet Profiles =====================================

=== Sheet Examples =====================================

 -- Row 1 -----------------------------------
  Name = General
  Identity = testscript-example
  Description = General TestScript Example
  Filename = testscript-example.xml

 -- Row 2 -----------------------------------
  Name = History Test
  Identity = testscript-example-history
  Description = History TestScript Example
  Filename = testscript-example-history.xml

 -- Row 3 -----------------------------------
  Name = Multisystem
  Identity = testscript-example-multisystem
  Description = Multisystem TestScript Example
  Filename = testscript-example-multisystem.xml

 -- Row 4 -----------------------------------
  Name = Read Test
  Identity = testscript-example-readtest
  Description = Read TestScript Example
  Filename = testscript-example-readtest.xml

 -- Row 5 -----------------------------------
  Name = Rule
  Identity = testscript-example-rule
  Description = Rule TestScript Example
  Filename = testscript-example-rule.xml

 -- Row 6 -----------------------------------
  Name = Search Test
  Identity = testscript-example-search
  Description = Search TestScript Example
  Filename = testscript-example-search.xml

 -- Row 7 -----------------------------------
  Name = Update Test
  Identity = testscript-example-update
  Description = Update TestScript Example
  Filename = testscript-example-update.xml

=== Sheet Examples =====================================
