
=== Sheet Bindings =====================================

 -- Row 1 -----------------------------------
  Binding Name = FilterOperator
  Binding = value set
  Reference = http://hl7.org/fhir/ValueSet/filter-operator
  Definition = The kind of operation to perform as a part of a property based filter.
  Conformance = required

 -- Row 2 -----------------------------------
  Binding Name = ConceptDesignationUse
  Binding = value set
  Reference = http://hl7.org/fhir/ValueSet/designation-use
  Definition = Details of how a designation would be used.
  Conformance = extensible

 -- Row 3 -----------------------------------
  Binding Name = PropertyType
  Binding = code list
  Reference = #concept-property-type
  Definition = The type of a property value
  Conformance = required

 -- Row 4 -----------------------------------
  Binding Name = CodeSystemContentMode
  Binding = code list
  Reference = #codesystem-content-mode
  Definition = How much of the content of the code system - the concepts and codes it defines - are represented in a code system resource
  Conformance = required

 -- Row 5 -----------------------------------
  Binding Name = CodeSystemHierarchyMeaning
  Binding = code list
  Reference = #codesystem-hierarchy-meaning
  Definition = The meaning of the hierarchy of concepts in a code system
  Conformance = required

=== Sheet concept-property-type =====================================

 -- Row 1 -----------------------------------
  Id = 1
  Code = code
  Display = code (internal reference)
  Definition = The property value is a code that identifies a concept defined in the code system

 -- Row 2 -----------------------------------
  Id = 2
  Code = Coding
  Display = Coding (external reference)
  Definition = The property  value is a code defined in an external code system. This may be used for translations, but is not the intent

 -- Row 3 -----------------------------------
  Id = 3
  Code = string
  Display = string
  Definition = The property value is a string

 -- Row 4 -----------------------------------
  Id = 4
  Code = integer
  Display = integer
  Definition = The property value is a string (often used to assign ranking values to concepts for supporting score assessments)

 -- Row 5 -----------------------------------
  Id = 5
  Code = boolean
  Display = boolean
  Definition = The property value is a boolean true | false

 -- Row 6 -----------------------------------
  Id = 6
  Code = dateTime
  Display = dateTime
  Definition = The property is a date or a date + time

=== Sheet codesystem-content-mode =====================================

 -- Row 1 -----------------------------------
  Id = 1
  Code = not-present
  Display = Not Present
  Definition = None of the concepts defined by the code system are included in the code system resource

 -- Row 2 -----------------------------------
  Id = 2
  Code = example
  Display = Example
  Definition = A few representative concepts are included in the code system resource

 -- Row 3 -----------------------------------
  Id = 3
  Code = fragment
  Display = Fragment
  Definition = A subset of the code system concepts are included in the code system resource

 -- Row 4 -----------------------------------
  Id = 4
  Code = complete
  Display = Complete
  Definition = All the concepts defined by the code system are included in the code system resource

=== Sheet codesystem-hierarchy-meaning =====================================

 -- Row 1 -----------------------------------
  Id = 1
  Code = grouped-by
  Display = Grouped By
  Definition = No particular relationship between the concepts can be assumed, except what can be determined by inspection of the definitions of the elements (possible reasons to use this: importing from a source where this is not defined, or where various parts of the hierarchy have different meanings)

 -- Row 2 -----------------------------------
  Id = 2
  Code = is-a
  Display = Is-A
  Definition = A hierarchy where the child concepts have an IS-A relationship with the parents - that is, all the properties of the parent are also true for its child concepts

 -- Row 3 -----------------------------------
  Id = 3
  Code = part-of
  Display = Part Of
  Definition = Child elements list the individual parts of a composite whole (e.g. body site)

 -- Row 4 -----------------------------------
  Id = 4
  Code = classified-with
  Display = Classified With
  Definition = Child concepts in the hierarchy may have only one parent, and there is a presumption that the code system is a \"closed world\" meaning all things must be in the hierarchy. This results in concepts such as \"not otherwise classified.\"

=== Sheet Invariants =====================================

 -- Row 1 -----------------------------------
  Id = 1
  Context = CodeSystem
  English = Within a code system definition, all the codes SHALL be unique
  XPath = count(distinct-values(descendant::f:concept/f:code/@value))=count(descendant::f:concept)
  Expression = (concept.code | descendants().concept.code).isDistinct()

=== Sheet Data Elements =====================================

 -- Row 1 -----------------------------------
  Element = CodeSystem
  UML = 0;0
  Type = MetadataResource
  Short Name = A set of codes drawn from one or more code systems
  Definition = A code system resource specifies a set of codes drawn from one or more code systems.
  RIM Mapping = N/A
  w5 = conformance.terminology

 -- Row 2 -----------------------------------
  Element = CodeSystem.url
  Short Name = & (Coding.system)
  Definition = & This is used in [Coding]{datatypes.html#Coding}.system

 -- Row 3 -----------------------------------
  Element = CodeSystem.identifier
  Card. = 0..1

 -- Row 4 -----------------------------------
  Element = CodeSystem.version
  Short Name = & (Coding.version)
  Definition = & This is used in [Coding]{datatypes.html#Coding}.version

 -- Row 5 -----------------------------------
  Element = CodeSystem.name

 -- Row 6 -----------------------------------
  Element = CodeSystem.title

 -- Row 7 -----------------------------------
  Element = CodeSystem.status

 -- Row 8 -----------------------------------
  Element = CodeSystem.experimental

 -- Row 9 -----------------------------------
  Element = CodeSystem.date

 -- Row 10 -----------------------------------
  Element = CodeSystem.publisher

 -- Row 11 -----------------------------------
  Element = CodeSystem.contact

 -- Row 12 -----------------------------------
  Element = CodeSystem.description
  Aliases = Scope; Purpose
  RIM Mapping = N/A

 -- Row 13 -----------------------------------
  Element = CodeSystem.useContext

 -- Row 14 -----------------------------------
  Element = CodeSystem.jurisdiction

 -- Row 15 -----------------------------------
  Element = CodeSystem.purpose

 -- Row 16 -----------------------------------
  Element = CodeSystem.copyright
  Comments = ... Sometimes, the copyright differs between the code system and the codes that are included. The copyright statement should clearly differentiate between these when required

 -- Row 17 -----------------------------------
  Element = CodeSystem.caseSensitive
  Card. = 0..1
  Summary = y
  Type = boolean
  Short Name = If code comparison is case sensitive
  Definition = If code comparison is case sensitive when codes within this system are compared to each other
  Comments = If this value is missing, then it is not specified whether a code system is case sensitive or not. When the rule is not known, Postel\'s law should be followed: produce codes with the correct case, and accept codes in any case. This element is primarily provided to support validation software

 -- Row 18 -----------------------------------
  Element = CodeSystem.valueSet
  Card. = 0..1
  Summary = y
  Type = uri
  Short Name = Canonical URL for value set with entire code system
  Definition = Canonical URL of value set that contains the entire code system
  Comments = The definition of the value set SHALL include all codes from this code system, and it SHALL be immutable

 -- Row 19 -----------------------------------
  Element = CodeSystem.hierarchyMeaning
  Card. = 0..1
  Summary = y
  Type = code
  Binding = CodeSystemHierarchyMeaning
  Short Name = grouped-by | is-a | part-of | classified-with
  Definition = The meaning of the hierarchy of concepts

 -- Row 20 -----------------------------------
  Element = CodeSystem.compositional
  Card. = 0..1
  Aliases = grammar
  Summary = Y
  Type = boolean
  Short Name = If code system defines a post-composition grammar
  Definition = True If code system defines a post-composition grammar
  Comments = Note that the code system resource does not define what the compositional grammar is, only whether or not there is one

 -- Row 21 -----------------------------------
  Element = CodeSystem.versionNeeded
  Card. = 0..1
  Summary = y
  Type = boolean
  Short Name = If definitions are not stable
  Definition = This flag is used to signify that the code system has not (or does not) maintain the definitions, and a version must be specified when referencing this code system
  Comments = Best practice is that code systems do not redefine concepts, or that if concepts are redefined, a new code system definition is created. But this is not always possible, so some code systems may be defined as \'versionNeeded\'

 -- Row 22 -----------------------------------
  Element = CodeSystem.content
  Card. = 1..1
  Summary = y
  Type = code
  Binding = CodeSystemContentMode
  Short Name = not-present | example | fragment | complete
  Definition = How much of the content of the code system - the concepts and codes it defines - are represented in this resource

 -- Row 23 -----------------------------------
  Element = CodeSystem.count
  Card. = 0..1
  Summary = Y
  Type = unsignedInt
  Short Name = Total concepts in the code system
  Definition = The total number of concepts defined by the code system. Where the code system has a compositional grammar, the count refers to the number of base (primitive) concepts
  Comments = The count of concepts defined in this resource cannot be more than this value, but may be less for several reasons - see the content value

 -- Row 24 -----------------------------------
  Element = CodeSystem.filter
  Card. = 0..*
  Summary = Y
  UML = 200;400
  Short Name = Filter that can be used in a value set
  Definition = A filter that can be used in a value set compose statement when selecting concepts using a filter

 -- Row 25 -----------------------------------
  Element = CodeSystem.filter.code
  Card. = 1..1
  Summary = y
  Type = code
  Binding = !
  Short Name = Code that identifies the filter
  Definition = The code that identifies this filter when it is used in the instance

 -- Row 26 -----------------------------------
  Element = CodeSystem.filter.description
  Card. = 0..1
  Summary = y
  Type = string
  Short Name = How or why the filter is used
  Definition = A description of how or why the filter is used

 -- Row 27 -----------------------------------
  Element = CodeSystem.filter.operator
  Card. = 1..*
  Summary = y
  Type = code
  Binding = FilterOperator
  Short Name = Operators that can be used with filter
  Definition = A list of operators that can be used with the filter

 -- Row 28 -----------------------------------
  Element = CodeSystem.filter.value
  Card. = 1..1
  Summary = y
  Type = string
  Short Name = What to use for the value
  Definition = A description of what the value for the filter should be

 -- Row 29 -----------------------------------
  Element = CodeSystem.property
  Card. = 0..*
  Summary = y
  UML = 400;400
  Type = =Property
  Short Name = Additional information supplied about each concept
  Definition = A property defines an additional slot through which additional information can be provided about a concept

 -- Row 30 -----------------------------------
  Element = CodeSystem.property.code
  Card. = 1..1
  Summary = y
  Type = code
  Binding = !
  Short Name = Identifies the property on the concepts, and when referred to in operations
  Definition = A code that is used to identify the property. The code is used internally (in CodeSystem.concept.property.code) and also externally, such as in property filters

 -- Row 31 -----------------------------------
  Element = CodeSystem.property.uri
  Card. = 0..1
  Summary = y
  Type = uri
  Short Name = Formal identifier for the property
  Definition = Reference to the formal meaning of the property. One possible source of meaning is the [Concept Properties](codesystem-concept-properties.html) code system

 -- Row 32 -----------------------------------
  Element = CodeSystem.property.description
  Card. = 0..1
  Summary = y
  Type = string
  Short Name = Why the property is defined, and/or what it conveys
  Definition = A description of the property- why it is defined, and how its value might be used

 -- Row 33 -----------------------------------
  Element = CodeSystem.property.type
  Card. = 1..1
  Summary = y
  Type = code
  Binding = PropertyType
  Short Name = code | Coding | string | integer | boolean | dateTime
  Definition = The type of the property value. Properties of type \"code\" contain a code defined by the code system (e.g. a reference to anotherr defined concept)

 -- Row 34 -----------------------------------
  Element = CodeSystem.concept
  Card. = 0..*
  UML = right
  Type = =ConceptDefinition
  Short Name = Concepts in the code system
  Definition = Concepts that are in the code system. The concept definitions are inherently hierarchical, but the definitions must be consulted to determine what the meaning of the hierarchical relationships are
  Comments = If this is empty, it means that the code system resource does not represent the content of the code system

 -- Row 35 -----------------------------------
  Element = CodeSystem.concept.code
  Card. = 1..1
  Type = code
  Binding = !
  Short Name = Code that identifies concept
  Definition = A code - a text symbol - that uniquely identifies the concept within the code system

 -- Row 36 -----------------------------------
  Element = CodeSystem.concept.display
  Card. = 0..1
  Type = string
  Short Name = Text to display to the user
  Definition = A human readable string that is the recommended default way to present this concept to a user

 -- Row 37 -----------------------------------
  Element = CodeSystem.concept.definition
  Card. = 0..1
  Type = string
  Short Name = Formal definition
  Definition = The formal definition of the concept. The code system resource does not make formal definitions required, because of the prevalence of legacy systems. However, they are highly recommended, as without them there is no formal meaning associated with the concept

 -- Row 38 -----------------------------------
  Element = CodeSystem.concept.designation
  Card. = 0..*
  UML = up
  Short Name = Additional representations for the concept
  Definition = Additional representations for the concept - other languages, aliases, specialized purposes, used for particular purposes, etc.
  Requirements = Many concept definition systems support multiple representations, in multiple languages, and for multiple purposes

 -- Row 39 -----------------------------------
  Element = CodeSystem.concept.designation.language
  Card. = 0..1
  Type = code
  Binding = Language
  Short Name = Human language of the designation
  Definition = The language this designation is defined for
  Comments = In the absence of a language, the resource language applies

 -- Row 40 -----------------------------------
  Element = CodeSystem.concept.designation.use
  Card. = 0..1
  Type = Coding
  Binding = ConceptDesignationUse
  Short Name = Details how this designation would be used
  Definition = A code that details how this designation would be used
  Comments = If no use is provided, the designation can be assumed to be suitable for general display to a human user

 -- Row 41 -----------------------------------
  Element = CodeSystem.concept.designation.value
  Card. = 1..1
  Type = string
  Short Name = The text value for this designation
  Definition = The text value for this designation

 -- Row 42 -----------------------------------
  Element = CodeSystem.concept.property
  Card. = 0..*
  UML = 400;260
  Type = =ConceptProperty
  Short Name = Property value for the concept
  Definition = A property value for this concept

 -- Row 43 -----------------------------------
  Element = CodeSystem.concept.property.code
  Card. = 1..1
  Type = code
  Binding = !
  Short Name = Reference to CodeSystem.property.code
  Definition = A code that is a reference to CodeSystem.property.code

 -- Row 44 -----------------------------------
  Element = CodeSystem.concept.property.value[x]
  Card. = 1..1
  Type = code | Coding | string | integer | boolean | dateTime
  Short Name = Value of the property for this concept
  Definition = The value of this property

 -- Row 45 -----------------------------------
  Element = CodeSystem.concept.concept
  Card. = 0..*
  Type = @CodeSystem.concept
  Short Name = Child Concepts (is-a/contains/categorizes)
  Definition = Defines children of a concept to produce a hierarchy of concepts. The nature of the relationships is variable (is-a/contains/categorizes) - see hierarchyMeaning

=== Sheet Search =====================================

 -- Row 1 -----------------------------------
  Name = system
  Type = uri
  Description = The system for any codes defined by this code system (same as \'url\')
  Path = CodeSystem.url

 -- Row 2 -----------------------------------
  Name = code
  Type = token
  Description = A code defined in the code system
  Path = CodeSystem.concept.code

 -- Row 3 -----------------------------------
  Name = language
  Type = token
  Description = A language in which a designation is provided
  Path = CodeSystem.concept.designation.language

 -- Row 4 -----------------------------------
  Name = content-mode
  Type = token
  Path = CodeSystem.content

=== Sheet Profiles =====================================

 -- Row 1 -----------------------------------
  Name = CodeSystem Extensions
  IG Name = core
  Filename = codesystem-extensions.xml
  Type = spreadsheet

 -- Row 2 -----------------------------------
  Name = Shareable Code System
  IG Name = core
  Filename = codesystem-shareable.xml
  Type = spreadsheet

=== Sheet Examples =====================================

 -- Row 1 -----------------------------------
  Name = Simple
  Identity = example
  Description = Simple Code System
  Filename = codesystem-example.xml

 -- Row 2 -----------------------------------
  Name = NHIN PurposeOfUse
  Identity = nhin-purposeofuse
  Description = NHIN Purpose of Use
  Filename = codesystem-nhin-purposeofuse.xml

 -- Row 3 -----------------------------------
  Name = SNOMED CT
  Identity = snomedct
  Description = Canonical Definition for SNOMED CT
  Filename = codesystem-snomedct.xml

 -- Row 4 -----------------------------------
  Name = Summary
  Identity = summary
  Description = Code system summary
  Filename = codesystem-example-summary.xml

=== Sheet Examples =====================================

 -- Row 1 -----------------------------------
  Name = lookup
  Use = Resource
  Documentation = Given a code/system, or a Coding, get additional details about the concept, including definition, status, designations, and properties. One of the products of this operation is a full decomposition of a code from a structure terminology
  Type = operation
  Example.Request = $lookup-request.txt
  Example.Response = $lookup-response.txt
  Title = Concept Look Up & Decomposition
  Footer = Note that the $lookup operation is more than just a code system search  - the server finds the concept, and gathers the return information from the underlying code system definitions.
  Idempotent = True

 -- Row 2 -----------------------------------
  Name = lookup.code
  Use = in
  Documentation = The code that is to be located. If a code is provided, a system must be provided
  Type = code
  Min = 0
  Max = 1

 -- Row 3 -----------------------------------
  Name = lookup.system
  Use = in
  Documentation = The system for the code that is to be located
  Type = uri
  Min = 0
  Max = 1

 -- Row 4 -----------------------------------
  Name = lookup.version
  Use = in
  Documentation = The version of the system, if one was provided in the source data
  Type = string
  Min = 0
  Max = 1

 -- Row 5 -----------------------------------
  Name = lookup.coding
  Use = in
  Documentation = A coding to look up
  Type = Coding
  Min = 0
  Max = 1

 -- Row 6 -----------------------------------
  Name = lookup.date
  Use = in
  Documentation = The date for which the information should be returned. Normally, this is the current conditions (which is the default value) but under some circumstances, systems need to acccess this information as it would have been in the past. A typical example of this would be where code selection is constrained to the set of codes that were available when the patient was treated, not when the record is being edited. Note that which date is appropriate is a matter for implementation policy.
  Type = dateTime
  Min = 0
  Max = 1

 -- Row 7 -----------------------------------
  Name = lookup.displayLanguage
  Use = in
  Documentation = The requested language for display (see ExpansionProfile.displayLanguage)
  Type = code
  Min = 0
  Max = 1

 -- Row 8 -----------------------------------
  Name = lookup.property
  Use = in
  Documentation = A property that the client wishes to be returned in the output. If no properties are specified, the server chooses what to return. The following properties are defined for all code systems: url, name, version (code system info) and code information: display, definition, designation, parent and child, and for designations, lang.X where X is a designation language code. Some of the properties are returned explicit in named parameters (when the names match), and the rest (except for lang.X) in the property parameter group
  Type = code
  Min = 0
  Max = *

 -- Row 9 -----------------------------------
  Name = lookup.name
  Use = out
  Documentation = A display name for the code system
  Type = string
  Min = 1
  Max = 1

 -- Row 10 -----------------------------------
  Name = lookup.version
  Use = out
  Documentation = The version that these details are based on
  Type = string
  Min = 0
  Max = 1

 -- Row 11 -----------------------------------
  Name = lookup.display
  Use = out
  Documentation = The preferred display for this concept
  Type = string
  Min = 1
  Max = 1

 -- Row 12 -----------------------------------
  Name = lookup.designation
  Use = out
  Documentation = Additional representations for this concept
  Type = Tuple
  Min = 0
  Max = *

 -- Row 13 -----------------------------------
  Name = lookup.designation.language
  Documentation = The language this designation is defined for
  Type = code
  Min = 0
  Max = 1

 -- Row 14 -----------------------------------
  Name = lookup.designation.use
  Documentation = A code that details how this designation would be used
  Type = Coding
  Min = 0
  Max = 1

 -- Row 15 -----------------------------------
  Name = lookup.designation.value
  Documentation = The text value for this designation
  Type = string
  Min = 1
  Max = 1

 -- Row 16 -----------------------------------
  Name = lookup.property
  Use = out
  Documentation = One or more properties that contain additional information about the code, including status. For complex terminologies (e.g. SNOMED CT, LOINC, medications), these properties serve to decompose the code
  Type = Tuple
  Min = 0
  Max = *

 -- Row 17 -----------------------------------
  Name = lookup.property.code
  Documentation = Identifies the property returned
  Type = code
  Min = 1
  Max = 1

 -- Row 18 -----------------------------------
  Name = lookup.property.value
  Documentation = The value of the property returned
  Type = code | Coding | string | integer | boolean | dateTime
  Min = 0
  Max = 1

 -- Row 19 -----------------------------------
  Name = lookup.property.description
  Documentation = Human Readable representation of the property value (e.g. display for a code)
  Type = string
  Min = 0
  Max = 1

 -- Row 20 -----------------------------------
  Name = lookup.property.subproperty
  Documentation = Nested Properties (mainly used for SNOMED CT decomposition, for relationship Groups)
  Type = Tuple
  Min = 0
  Max = *

 -- Row 21 -----------------------------------
  Name = lookup.property.subproperty.code
  Documentation = Identifies the sub-property returned
  Type = code
  Min = 1
  Max = 1

 -- Row 22 -----------------------------------
  Name = lookup.property.subproperty.value
  Documentation = The value of the sub-property returned
  Type = code | Coding | string | integer | boolean | dateTime
  Min = 1
  Max = 1

 -- Row 23 -----------------------------------
  Name = lookup.property.subproperty.description
  Documentation = Human Readable representation of the property value (e.g. display for a code)
  Type = string
  Min = 0
  Max = 1

 -- Row 24 -----------------------------------
  Name = subsumes
  Use = Resource | Instance
  Documentation = Test the subsumption relationship between code/Coding A and code/Coding B given the semantics of subsumption in the underlying code system (see hierarchyMeaning)
  Type = operation
  Example.Request = $subsumes-request.txt
  Example.Response = $subsumes-response.txt
  Title = Subsumption Testing
  Idempotent = True

 -- Row 25 -----------------------------------
  Name = subsumes.codeA
  Use = in
  Documentation = The \"A\" code that is to be tested. If a code is provided, a system must be provided
  Type = code
  Min = 0
  Max = 1

 -- Row 26 -----------------------------------
  Name = subsumes.codeB
  Use = in
  Documentation = The \"B\" code that is to be tested. If a code is provided, a system must be provided
  Type = code
  Min = 0
  Max = 1

 -- Row 27 -----------------------------------
  Name = subsumes.system
  Use = in
  Documentation = The code system in which subsumption testing is to be performed. This must be provided unless the operation is invoked on a code system instance
  Type = uri
  Min = 0
  Max = 1

 -- Row 28 -----------------------------------
  Name = subsumes.version
  Use = in
  Documentation = The version of the code system, if one was provided in the source data
  Type = string
  Min = 0
  Max = 1

 -- Row 29 -----------------------------------
  Name = subsumes.codingA
  Use = in
  Documentation = The \"A\" Coding that is to be tested. The code system does not have to match the specified subsumption code system, but the relationships between the code systems must be well established
  Type = Coding
  Min = 0
  Max = 1

 -- Row 30 -----------------------------------
  Name = subsumes.codingB
  Use = in
  Documentation = The \"B\" Coding that is to be tested. The code system does not have to match the specified subsumption code system, but the relationships between the code systems must be well established
  Type = Coding
  Min = 0
  Max = 1

 -- Row 31 -----------------------------------
  Name = subsumes.outcome
  Use = out
  Documentation = The subsumption relationship between code/Coding \"A\" and code/Coding \"B\". There are 4 possible codes to be returned: equivalent, subsumes, subsumed-by, and not-subsumed. If the server is unable to determine the relationship between the codes/Codings, then it returns an error (i.e. an OperationOutcome)
  Type = code
  Min = 1
  Max = 1

 -- Row 32 -----------------------------------
  Name = compose
  Use = Resource | Instance
  Documentation = Given a set of properties, return one or more possible matching codes\n\nThis operation takes a set of properties, and examines the code system looking for codes in the code system that match a set of known properties. \n\nWhen looking for matches, there are 3 possible types of match:\n* a complete match - a code that represents all the provided properties correctly\n* a partial match - a code that represents some of the provided properties correctly, and not others \n* a possible match - a code that may represent the provided properties closely, but may capture less or more precise informationfor some of the properties\n\nThe $compose operation can be called in one of 2 modes:\n* By a human, looking for the best match for a set of properties. In this mode, the server returns a list of complete, possible or partial matches (possibly with comments), so that the user can choose (or not) the most appropriate code\n* By a machine (typically in a system interface performing a transformation). In this mode, the server returns only a list of complete and partial matches, but no possible matches. The machine can choose a code from the list (or not) based on what properties are not coded\n\nThese modes are differentiated by the \'exact\' parameter, so the client can indicate whether it only wants exact matches (including partial matches) or whether potential matches based on text matching are desired\n \nThe compose operation is still preliminary. The interface can be expected to change as more experience is gained from implementations.
  Type = operation
  Example.Request = $compose-request.txt
  Example.Response = $compose-response.txt
  Title = Code Composition based on supplied properties
  Idempotent = True

 -- Row 33 -----------------------------------
  Name = compose.system
  Use = in
  Documentation = The system in which composition is to be performed. This must be provided unless the operation is invoked on a code system instance
  Type = uri
  Min = 0
  Max = 1

 -- Row 34 -----------------------------------
  Name = compose.version
  Use = in
  Documentation = The version of the system for the inferencing to be performed
  Type = string
  Min = 0
  Max = 1

 -- Row 35 -----------------------------------
  Name = compose.property
  Use = in
  Documentation = One or more properties that contain information to be composed into the code
  Type = Tuple
  Min = 0
  Max = *

 -- Row 36 -----------------------------------
  Name = compose.property.code
  Documentation = Identifies the property provided
  Type = code
  Min = 1
  Max = 1

 -- Row 37 -----------------------------------
  Name = compose.property.value
  Documentation = The value of the property provided
  Type = code | Coding | string | integer | boolean | dateTime
  Min = 0
  Max = 1

 -- Row 38 -----------------------------------
  Name = compose.property.subproperty
  Documentation = Nested Properties (mainly used for SNOMED CT composition, for relationship Groups)
  Type = Tuple
  Min = 0
  Max = *

 -- Row 39 -----------------------------------
  Name = compose.property.subproperty.code
  Documentation = Identifies the sub-property provided
  Type = code
  Min = 1
  Max = 1

 -- Row 40 -----------------------------------
  Name = compose.property.subproperty.value
  Documentation = The value of the sub-property provided
  Type = code | Coding | string | integer | boolean | dateTime
  Min = 1
  Max = 1

 -- Row 41 -----------------------------------
  Name = compose.exact
  Use = in
  Documentation = Whether the operation is being used by a human, or a machine. If the operation is being used by a human, the terminology server can return a list of possible matches, with commentary. For a machine, the server returns sure matches, or none at all
  Type = boolean
  Min = 1
  Max = 1

 -- Row 42 -----------------------------------
  Name = compose.compositional
  Use = in
  Documentation = Post-coordinated expressions are allowed to be returned in the matching codes (mainly for SNOMED CT). Default = false
  Type = boolean
  Min = 0
  Max = 1

 -- Row 43 -----------------------------------
  Name = compose.match
  Use = out
  Documentation = Concepts returned by the server as a result of the inferencing operation
  Type = Tuple
  Min = 0
  Max = *

 -- Row 44 -----------------------------------
  Name = compose.match.code
  Documentation = A code that matches the properties provided
  Type = Coding
  Min = 1
  Max = 1

 -- Row 45 -----------------------------------
  Name = compose.match.unmatched
  Documentation = One or more properties that contain properties that could not be matched into the code
  Type = Tuple
  Min = 0
  Max = *

 -- Row 46 -----------------------------------
  Name = compose.match.unmatched.code
  Documentation = Identifies the property provided
  Type = code
  Min = 1
  Max = 1

 -- Row 47 -----------------------------------
  Name = compose.match.unmatched.value
  Documentation = The value of the property provided
  Type = code | Coding | string | integer | boolean | dateTime
  Min = 1
  Max = 1

 -- Row 48 -----------------------------------
  Name = compose.match.unmatched.property
  Documentation = Nested Properties (mainly used for SNOMED CT composition, for relationship Groups)
  Type = Tuple
  Min = 0
  Max = *

 -- Row 49 -----------------------------------
  Name = compose.match.unmatched.property.code
  Documentation = Identifies the sub-property provided
  Type = code
  Min = 1
  Max = 1

 -- Row 50 -----------------------------------
  Name = compose.match.unmatched.property.value
  Documentation = The value of the sub-property provided
  Type = code | Coding | string | integer | boolean | dateTime
  Min = 1
  Max = 1

 -- Row 51 -----------------------------------
  Name = compose.match.comment
  Documentation = Information about the quality of the match, if operation is for a human
  Type = string
  Min = 0
  Max = 1
