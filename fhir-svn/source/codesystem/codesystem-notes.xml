<div xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.w3.org/1999/xhtml ../../schema/fhir-xhtml.xsd" xmlns="http://www.w3.org/1999/xhtml">


<a name="versioning"> </a>
<h3>Versioning Code Systems</h3>
<p>
Most code systems evolve over time, due to corrections, clarifications, and changes to approach or underlying knowledge or reality.
If these changes lead to the meanings of existing codes changing significantly, then the interpretation of the code system becomes
version dependent. This significantly complicates implementation based on the code system, to the point where it is not clear that
safety can be assured, so changing the meaning of an existing code SHOULD be avoided whenever possible. It is preferable to assign a new identifier to a code system
when any concepts in it have a significant change in meaning (for example, the German diagnostic classification code system
ICD10GM2009 has a different <i>system</i> to ICD10GM2008), but this also can have substantial impact on implementation, so
is often not practical - for instance, <a href="snomedct.html">SNOMED CT</a> has a complex version release framework, which
may lead to variations in meaning of concepts, but there is only one identifier for SNOMED CT.
</p>
<p>
For this reason, a code system MAY provide a version identifier which can be specified in <code>CodeSystem.version</code>. The version specific identifier SHOULD be
provided whenever there are potentially significant changes in meaning across multiple releases of a code system.
There is no particular format requirement for the version identifier, though HL7 recommends a date based approach.
</p>
<p>
When the <code>CodeSystem.versionNeeded</code> is 'true', then the version identifier SHALL be used in <a href="datatypes.html#coding">Coding</a> instances that refer to the code system.
</p>
<p>
Where the terminology does not clearly define what string should be used to identify code system versions, the recommendation is to use as the version string the date (expressed in FHIR date format) on which the version of the code system that is being used was officially published.
</p>


<a name="properties"> </a>
<h2>Properties</h2>
<p>
Each code system can have one or more properties. Each concept defined by the code system
may have one more values for each property defined by the code system. Typical uses for
properties include:
</p>
<ul>
 <li>Tracking administrative status (inactive, deprecation date)</li>
 <li>Providing additional statements about the meaning of the concept</li>
 <li>Defining structured relationships with other concepts in the code system</li>
 <li>Assigning scoring values to the concepts</li>
</ul>
<p>
Properties are identified by their master URI (<code>CodeSystem.property.uri</code>), and then, by their
code (<code>CodeSystem.property.code</code>), which is used both internally within the
code system resource (<code>CodeSystem.concept.property.code</code>) and also externally, in the following
places:
</p>
<ul>
 <li><a href="conceptmap-definitions.html#ConceptMap.group.element.target.dependsOn.property">ConceptMap</a>: <code>ConceptMap.element.target.dependsOn.property</code> and <code>ConceptMap.element.target.product.property</code></li>
 <li><a href="valueset-definitions.html#ValueSet.compose.include.filter.property">ValueSet</a>: <code>ValueSet.compose.include.filter.property</code> can refer to any defined code system property</li>
 <li><a href="codesystem-operations.html#lookup">$lookup operation</a>: In <code>Parameters.parameter.name</code> when returning information about a code</li>
 <li><a href="conceptmap-operations.html#translate">$translate operation</a>: In <code>Parameters.parameter.part.name</code> for dependencies and products</li>
 <li><a href="codesystem-operations.html#infer">$compose operation</a>: In <code>Parameters.parameter.name</code> when providing codes, and in <code>Parameters.parameter.name</code> when asking for codes</li>
</ul>
<p>
Properties are defined using the following elements:
</p>
<table class="grid">
 <tr>
  <td><b>Name</b></td>
  <td><b>Details</b></td>
  <td><b>Description</b></td>
 </tr>
 <tr>
  <td>code</td>
  <td><a href="datatypes.html#code">code</a></td>
  <td>Used to identify the property, as enumerated above</td>
 </tr>
 <tr>
  <td>uri</td>
  <td>optional <a href="datatypes.html#code">uri</a></td>
  <td>Reference to the formal meaning of the property. One possible source of meaning is the <a href="codesystem-concept-properties.html">Concept Properties</a> code system.
    This part of the definition is optional, but is recommended to provide an additional level of definitional consistency</td>
 </tr>
 <tr>
  <td>description</td>
  <td>optional <a href="datatypes.html#code">string</a></td>
  <td>A description of the property- why it is defined, and how its value might be used</td>
 </tr>
 <tr>
  <td>type</td>
  <td>code | Coding | string | integer | boolean | dateTime</td>
  <td>The type of the property value. Properties of type "code" contain a code defined by the code system (e.g. a reference to anotherr defined concept)</td>
 </tr>
</table>
<p>
Note that properties provide a common view of concept relationships that is common across all code systems.
Some code systems define properties with more sophistication, such as groups of properties, or subsumption
relationships between properties (e.g. SNOMED CT). Servers providing support for these code systems will need
to know full details about the underlying relationships in order to provide the correct information about
concepts and their properties, but this information does not surface in the resources or operations defined
by the FHIR specification.
</p>


<a name="status"> </a>
<h2>Concept Status</h2>

<p>
Many Code Systems have a 'status' associated with the concept. This may categorise the concept
as:
</p>
<ul>
  <li>Experimental - provided for trial, but may be removed in the future</li>
  <li>Active - in normal use</li>
  <li>Deprecated - planned to be removed from use</li>
  <li>Retired - still present for historical reasons, but no longer allowed to be used</li>
</ul>
<p>
There is wide variation in the life cycles supported by the different code systems, the words
they use to describe the various status values they use, and some code systems have additional
status values. HL7 uses Active and Retired. In addition to these status codes, concepts may be
also be labeled as "Abstract' (not to be used in some circumstances), and have dates associated
with their retirement or deprecation. All this information is represented as properties of
the concepts. In order to assist with consistency between code systems, the following
basic property URIs are defined:
</p>
<table class="grid">
 <tr><td>http://hl7.org/fhir/concept-properties#status</td><td>A property that indicates the status of the concept. If the property is identified by this URL, then it SHALL use at least these status values (where appropriate):
     <ul>
      <li>active - the concept is for normal use (this is the default value)</li>
      <li>experimental - provided for trial, but may be removed in the future</li>
      <li>deprecated - planned to be removed from use</li>
      <li>retired - still present for historical reasons, but no longer allowed to be used</li>
     </ul>
   </td></tr>
 <tr><td>http://hl7.org/fhir/concept-properties#retirementDate</td><td>Date Concept was retired</td></tr>
 <tr><td>http://hl7.org/fhir/concept-properties#deprecationDate</td><td>Date Concept was deprecated</td></tr>
 <tr><td>http://hl7.org/fhir/concept-properties#parent</td><td>An immediate parent of the concept in the hierarchy</td></tr>
 <tr><td>http://hl7.org/fhir/concept-properties#child</td><td>An immediate child of the concept in the hierarchy</td></tr>
 <tr><td>http://hl7.org/fhir/concept-properties#notSelectable</td><td>This concept is a grouping concept and not intended to be used in
   the normal use of the code system (though my be used for filters etc). This is also known as 'Abstract'</td></tr>
</table>
<p>
Typically, Code systems are presented hierachically, where the hierachy has <a href="codesystem-definitions.html#CodeSystem.hierarchyMeaning">a defined meaning</a>.
For this reason, the parent and child properties are mostly only used when performing concept lookup.
Note that in some code systems, concepts may have multiple parents, so the parent property may repeat.
These code systems are not usually presented in a hierachical fashion in a <code>CodeSystem</code> if they are represented in a CodeSystem at all. If they are,
then the <a href="extension-codesystem-subsumes.html">subsumes extension</a> must be used.
</p>

<a name="subsumption"> </a>
<h3>Subsumption Testing</h3>
<p>
The words 'subsume', 'subsumes', 'subsumed' and 'subsumption' are defined in terms of the CodeSystem hierarchy (i.e. <a href="codesystem-definitions.html#CodeSystem.hierarchyMeaning">CodeSystem.hierarchyMeaning</a>).
Concept A is considered to be subsumed by Concept B if it comes under Concept B in the hierarchy, or if subsumption is declared explicitly using the <a href="extension-codesystem-subsumes.html">subsumes extension</a>).
</p>
<p>
Where a CodeSystem does not declare its hierarchy meaning directly, then
the code system documentation must be consulted manually to determinw how subsumption is determined. If there is no definition, none of the
subsumption based features can be used with the code system.
</p>
<p>
Subsumption based logic arises explicitly or implicitly in the following places in the FHIR specification:
</p>
<ul>
 <li><a href="codesystem-operations.html#subsumes">CodeSystem $subsumes operation</a></li>
 <li><a href="codesystem-operations.html#lookup">CodeSystem $lookup operation</a></li>
 <li><a href="conceptmap-operations.html#closure">ConceptMap $closure operation</a></li>
 <li><a href="search.html#subsumption">Search by subsumption</a></li>
 <li><a href="valueset-operations.html#expand">ValueSet $expand operation</a></li>
 <li><a href="valueset-operations.html#validate-code">ValueSet $validate-code operation</a></li>
</ul>

<a name="filters"> </a>
<h3>Filters</h3>

<p>
The following filters are defined for all code systems:
</p>
<table class="grid">
 <tr>
   <th>Property Name</th>
   <th>Operation</th>
   <th>Value</th>
   <th>Definition</th>
   <th>Notes</th>
 </tr>
 <tr>
   <td>[property]</td>
   <td>=</td>
   <td>[string]</td>
   <td>Includes all codes that have a property value equal to the specified string, where [property] is the code for any <a href="#properties">defined property</a></td>
   <td></td>
 </tr>
 <tr>
   <td>[property]</td>
   <td>in</td>
   <td>[string,string...]</td>
   <td>Includes all codes that have a property value equal to one of the specified strings, where [property] is the code for any <a href="#properties">defined property</a></td>
   <td>The values cannot include ",", since it is being used as a delimited</td>
 </tr>
</table>

<a name="detailed-metadata"> </a>
<h3>Code systems with detailed metadata</h3>
<p>
Sometimes code systems may be used to represent more complex information than just
code, display name and code system.  For example, a code system of drug information
which contains information about the content of the medication (e.g., RxNorm), or a set of
observation types, that contain methods, units, etc. (e.g., LOINC).
In FHIR, these are handled by splitting the concept into two distinct parts - the
Terminology, (<b>Code System</b> &amp; <code>ValueSet</code> resources) is used to
manage the codes, display names and relationships.  A separate "detail"
resource (e.g., <a href="medication.html">Medication</a> for drugs,
<a href="location.html">Location</a> for location, etc.) is used to convey detailed
information (dose form &amp; strength, allowed data type or permitted values, address &amp;
hours of operation, etc.).  One "detail" resource instance is created for each code.
</p>
<p>
This division accomplishes several things:
</p>
<ul>
<li>It allows generic systems that support terminology management to perform standard
terminology operations on code systems dealing with complex structures - code lookup,
validation, subsumption testing, mapping and translation.</li>
<li>It allows information to be exchanged about individual medications, data elements
and locations.  Codes can't be retrieved individually in FHIR - it is necessary to
retrieve the entire resource.  By packaging the detailed information in separate
resources, independent retrieval and update is possible.</li>
<li>It supports use-cases for sharing medication, location, observation type and
similar information in circumstances where the code may be unknown, unavailable or
occasionally non-existent (e.g., custom compounds, non-registered locations).  Having
a distinct resource supports these capabilities, which would not be possible using
<code>CodeSystem</code>/<code>ValueSet</code>.</li>
</ul>
<p>
Note that this division in FHIR does not imply that a similar division is required in
the internal representation used by systems exposing a FHIR interface.  Similarly, some
systems may choose to only expose or maintain one aspect of such information types (i.e.
only the discrete resource instances or only the value set).
</p>
<p>
The linkage between the "detail" resource and the Terminology resources is accomplished via the
<code>code</code> element (or equivalent) on the detail resource.  As well, the "name" or
"title" on the detail resource generally corresponds with the display name on the matching
code.  Most detail resources will also have an "identifier" element.  This <i>can</i> be
set to the same value and namespace as the code, but if the only identifier a resource has
is its defining code, it may be better to omit the identifier entirely. For further
information, see <a href="conceptmap.html#implicit">Implicit Code Systems</a>.
</p>

</div>
