API to support mapping: 
  value set membership
  translations 
  instance managements 
  agrements about multi-instances
    reading 
    producing

Date syntax variations are handled as a seraialisation issue. But string microformats are still something to be resolved. Types that have microformat issues: 
  -string, code, id, markdown, xhtml, uri??


	

ModelMap
  InstanceMapping
     id : id
     LeftType
     RightType
     LeftVar
     RightVar

  TransformRule
    identity : id [1..1] the id of the rule for internal references 
    sources [0..*] one or more inputs to the mapping. If all the sources are null, the rule has no defined output
      context : id [1..1] the source variable this is taken from (may not be the same as the sourceVariable, but has the same rules - if null, source = null. if not defined, error  
      field : code [1..1] the field of the source variable to take a value from (e.g. an element in the object that is the context)
      variable : id [0..] a variable name assigned to this source so that it can be used as a context in dependent rules
    condition [0..1] : String Fluent path that runs in the context of the source Variable
    target [0..*]: a field to produce in the target model. Note: each target must have at least one of (field, variable)
      context : id [1..1] the target that the field will be added to 
      field : code [0..1] a field that will be assigned the value as specified in the transform. 
      variable : id [0..1] a variable name assigned to this target so that it can be used as a context in dependent rules
      listMode : code [0..*] <<ModelMapListMode>> controls how fields in the target with cardinality >1 are managed (to be defined)
      listRuleId : id [0..1] if mode = share, the id of the rule the list item is shared with
      transform : code [0..1] <<ModelMapTransformCode>> specifies how content is copied from the sources to the target. See below for values
      parameter [1..*]
        value[x] : id | String the value of a parameter for the transform
    dependents [0..*] : id - rules that apply to the source and target variables defined by this transform rule

    
    
ModelMapListMode
     only_one - if the input has more than one match, then the mapping fails with an error
     first - this is the first item in the target list. If more that one rule defines a first item (for a given instance of mapping) then this is an error
     share - the target instance is shared with the target instances generated by another rule (up to the first common n items, then create new ones)


ModelMapTransformCode
   create(type) - type is passed through to the application on the standard API, and must be known by it
   copy(source)
   truncate(source, length) - source must be stringy type
   escape(source, fmt1, fmt2) - change source from one kind of escaping to another (plain, java, xml, json). note that this is for when the string itself is escaped
   cast(source, type?) - case source from one type to another. target type can be left as implicit if there is one and only one target type known
   append(source...) - source is element or string
   translate(source, uri_of_map) - use the translate operation
   reference(source) - return a string that references the provided tree properly



