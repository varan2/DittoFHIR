
=== Sheet Bindings =====================================

 -- Row 1 -----------------------------------
  Binding Name = StructureMapModelMode
  Binding = code list
  Reference = #map-model-mode
  Definition = How the referenced structure is used in this mapping
  Conformance = required

 -- Row 2 -----------------------------------
  Binding Name = StructureMapInputMode
  Binding = code list
  Reference = #map-input-mode
  Definition = Mode for this instance of data
  Conformance = required

 -- Row 3 -----------------------------------
  Binding Name = StructureMapContextType
  Binding = code list
  Reference = #map-context-type
  Definition = How to interpret the context
  Conformance = required

 -- Row 4 -----------------------------------
  Binding Name = StructureMapTransform
  Binding = code list
  Reference = #map-transform
  Definition = How data is copied/created
  Conformance = required

 -- Row 5 -----------------------------------
  Binding Name = StructureMapSourceListMode
  Binding = code list
  Reference = #map-source-list-mode
  Definition = If field is a list, how to manage the source
  Conformance = required

 -- Row 6 -----------------------------------
  Binding Name = StructureMapTargetListMode
  Binding = code list
  Reference = #map-target-list-mode
  Definition = If field is a list, how to manage the production
  Conformance = required

 -- Row 7 -----------------------------------
  Binding Name = StructureMapGroupTypeMode
  Binding = code list
  Reference = #map-group-type-mode
  Definition = If this is the default rule set to apply for the source type, or this combination of types
  Conformance = required

=== Sheet map-model-mode =====================================

 -- Row 1 -----------------------------------
  Id = 1
  Code = source
  Display = Source Structure Definition
  Definition = This structure describes an instance passed to the mapping engine that is used a source of data

 -- Row 2 -----------------------------------
  Id = 2
  Code = queried
  Display = Queried Structure Definition
  Definition = This structure describes an instance that the mapping engine may ask for that is used a source of data

 -- Row 3 -----------------------------------
  Id = 3
  Code = target
  Display = Target Structure Definition
  Definition = This structure describes an instance passed to the mapping engine that is used a target of data

 -- Row 4 -----------------------------------
  Id = 4
  Code = produced
  Display = Produced Structure Definition
  Definition = This structure describes an instance that the mapping engine may ask to create that is used a target of data

=== Sheet map-input-mode =====================================

 -- Row 1 -----------------------------------
  Id = 1
  Code = source
  Display = Source Instance
  Definition = Names an input instance used a source for mapping

 -- Row 2 -----------------------------------
  Id = 2
  Code = target
  Display = Target Instance
  Definition = Names an instance that is being populated

=== Sheet map-context-type =====================================

 -- Row 1 -----------------------------------
  Id = 1
  Code = type
  Display = Type
  Definition = The context specifies a type

 -- Row 2 -----------------------------------
  Id = 2
  Code = variable
  Display = Variable
  Definition = The context specifies a variable

=== Sheet map-transform =====================================

 -- Row 1 -----------------------------------
  Id = 1
  Code = create
  Display = create
  Definition = create(type : string) - type is passed through to the application on the standard API, and must be known by it

 -- Row 2 -----------------------------------
  Id = 2
  Code = copy
  Display = copy
  Definition = copy(source)

 -- Row 3 -----------------------------------
  Id = 3
  Code = truncate
  Display = truncate
  Definition = truncate(source, length) - source must be stringy type

 -- Row 4 -----------------------------------
  Id = 4
  Code = escape
  Display = escape
  Definition = escape(source, fmt1, fmt2) - change source from one kind of escaping to another (plain, java, xml, json). note that this is for when the string itself is escaped

 -- Row 5 -----------------------------------
  Id = 5
  Code = cast
  Display = cast
  Definition = cast(source, type?) - case source from one type to another. target type can be left as implicit if there is one and only one target type known

 -- Row 6 -----------------------------------
  Id = 6
  Code = append
  Display = append
  Definition = append(source...) - source is element or string

 -- Row 7 -----------------------------------
  Id = 7
  Code = translate
  Display = translate
  Definition = translate(source, uri_of_map) - use the translate operation

 -- Row 8 -----------------------------------
  Id = 8
  Code = reference
  Display = reference
  Definition = reference(source : object) - return a string that references the provided tree properly

 -- Row 9 -----------------------------------
  Id = 9
  Code = dateOp
  Display = dateOp
  Definition = Perform a date operation. *Parameters to be documented*

 -- Row 10 -----------------------------------
  Id = 10
  Code = uuid
  Display = uuid
  Definition = Generate a random UUID (in lowercase). No Parameters

 -- Row 11 -----------------------------------
  Id = 11
  Code = pointer
  Display = pointer
  Definition = Return the appropriate string to put in a reference that refers to the resource provided as a parameter

 -- Row 12 -----------------------------------
  Id = 12
  Code = evaluate
  Display = evaluate
  Definition = Execute the supplied fluentpath expression and use the value returned by that

 -- Row 13 -----------------------------------
  Id = 13
  Code = cc
  Display = cc
  Definition = Create a CodeableConcept. Parameters = (text) or (system. Code[, display])

 -- Row 14 -----------------------------------
  Id = 14
  Code = c
  Display = c
  Definition = Create a Coding. Parameters = (system. Code[, display])

 -- Row 15 -----------------------------------
  Id = 15
  Code = qty
  Display = qty
  Definition = Create a quantity. Parameters = (text) or (value, unit, [system, code]) where text is the natural representation e.g. [comparator]value[space]unit

 -- Row 16 -----------------------------------
  Id = 16
  Code = id
  Display = id
  Definition = Create an identifier. Parameters = (system, value[, type]) where type is a code from the identifier type value set

 -- Row 17 -----------------------------------
  Id = 17
  Code = cp
  Display = cp
  Definition = Create a contact details. Parameters = (value) or (system, value). If no system is provided, the system should be inferred from the content of the value

=== Sheet map-source-list-mode =====================================

 -- Row 1 -----------------------------------
  Id = 1
  Code = first
  Display = First
  Definition = Only process this rule for the first in the list

 -- Row 2 -----------------------------------
  Id = 2
  Code = not_first
  Display = All but the first
  Definition = Process this rule for all but the first

 -- Row 3 -----------------------------------
  Id = 3
  Code = last
  Display = Last
  Definition = Only process this rule for the last in the list

 -- Row 4 -----------------------------------
  Id = 4
  Code = not_last
  Display = All but the last
  Definition = Process this rule for all but the last

 -- Row 5 -----------------------------------
  Id = 5
  Code = only_one
  Display = Enforce only one
  Definition = Only process this rule is there is only item

=== Sheet map-target-list-mode =====================================

 -- Row 1 -----------------------------------
  Id = 1
  Code = first
  Display = First
  Definition = when the target list is being assembled, the items for this rule go first. If more that one rule defines a first item (for a given instance of mapping) then this is an error

 -- Row 2 -----------------------------------
  Id = 2
  Code = share
  Display = Share
  Definition = the target instance is shared with the target instances generated by another rule (up to the first common n items, then create new ones)

 -- Row 3 -----------------------------------
  Id = 3
  Code = last
  Display = Last
  Definition = when the target list is being assembled, the items for this rule go last. If more that one rule defines a last item (for a given instance of mapping) then this is an error

 -- Row 4 -----------------------------------
  Id = 4
  Code = collate
  Display = Collate
  Definition = re-use the first item in the list, and keep adding content to it

=== Sheet map-group-type-mode =====================================

 -- Row 1 -----------------------------------
  Id = 1
  Code = none
  Display = Not a Default
  Definition = This group is not a default group for the types

 -- Row 2 -----------------------------------
  Id = 2
  Code = types
  Display = Default for Type Combination
  Definition = This group is a default mapping group for the specified types and for the primary source type

 -- Row 3 -----------------------------------
  Id = 3
  Code = type-and-types
  Display = Default for type + combination
  Definition = This group is a default mapping group for the specified types

=== Sheet Invariants =====================================

 -- Row 1 -----------------------------------
  Id = 1
  Context = StructureMap.group.rule.target
  English = Can only have a element if you have a context
  XPath = not(f:element) or (f:context)
  Expression = element.exists() implies context.exists()
  Severity = error

 -- Row 2 -----------------------------------
  Id = 2
  Context = StructureMap.group.rule.target
  English = Must have a contextType if you have a context
  XPath = not(f:context) or (f:contextType)
  Expression = context.exists() implies contextType.exists()
  Severity = error

=== Sheet Data Elements =====================================

 -- Row 1 -----------------------------------
  Element = StructureMap
  Card. = 1..1
  Aliases = Template, Profile
  Type = MetadataResource
  Short Name = A Map of relationships between 2 structures that can be used to transform data
  Definition = A Map of relationships between 2 structures that can be used to transform data
  RIM Mapping = n/a
  Committee Notes = 0;0
  w5 = conformance.content

 -- Row 2 -----------------------------------
  Element = StructureMap.url
  Card. = 1..1
  Aliases = url, authoritative-url, destination, identity

 -- Row 3 -----------------------------------
  Element = StructureMap.identifier
  Card. = 0..*

 -- Row 4 -----------------------------------
  Element = StructureMap.version

 -- Row 5 -----------------------------------
  Element = StructureMap.name
  Card. = 1..1

 -- Row 6 -----------------------------------
  Element = StructureMap.title

 -- Row 7 -----------------------------------
  Element = StructureMap.status

 -- Row 8 -----------------------------------
  Element = StructureMap.experimental

 -- Row 9 -----------------------------------
  Element = StructureMap.date

 -- Row 10 -----------------------------------
  Element = StructureMap.publisher

 -- Row 11 -----------------------------------
  Element = StructureMap.contact
  UML = left
  Committee Notes = 400;0

 -- Row 12 -----------------------------------
  Element = StructureMap.description

 -- Row 13 -----------------------------------
  Element = StructureMap.useContext

 -- Row 14 -----------------------------------
  Element = StructureMap.jurisdiction

 -- Row 15 -----------------------------------
  Element = StructureMap.purpose

 -- Row 16 -----------------------------------
  Element = StructureMap.copyright

 -- Row 17 -----------------------------------
  Element = StructureMap.structure
  Card. = 0..*
  Summary = y
  UML = right
  Short Name = Structure Definition used by this map
  Definition = A structure definition used by this map. The structure definition may describe instances that are converted, or the instances that are produced
  Comments = It is not necessary for a structure map to identify any dependent structures, though not losting them may restrict its usefulness

 -- Row 18 -----------------------------------
  Element = StructureMap.structure.url
  Card. = 1..1
  Summary = y
  Type = uri
  Short Name = Canonical URL for structure definition
  Definition = The canonical URL that identifies the structure

 -- Row 19 -----------------------------------
  Element = StructureMap.structure.mode
  Card. = 1..1
  Summary = y
  Type = code
  Binding = StructureMapModelMode
  Short Name = source | queried | target | produced
  Definition = How the referenced structure is used in this mapping

 -- Row 20 -----------------------------------
  Element = StructureMap.structure.alias
  Card. = 0..1
  Summary = y
  Type = string
  Short Name = Name for type in this map
  Definition = The name used for this type in the map
  Comments = This is needed if both types have the same name (e.g. version conversion)

 -- Row 21 -----------------------------------
  Element = StructureMap.structure.documentation
  Card. = 0..1
  Type = string
  Short Name = Documentation on use of structure
  Definition = Documentation that describes how the structure is used in the mapping

 -- Row 22 -----------------------------------
  Element = StructureMap.import
  Card. = 0..*
  Summary = y
  Type = uri
  Short Name = Other maps used by this map (canonical URLs)
  Definition = Other maps used by this map (canonical URLs)

 -- Row 23 -----------------------------------
  Element = StructureMap.group
  Card. = 1..*
  Summary = y
  UML = down
  Short Name = Named sections for reader convenience
  Definition = Organizes the mapping into managable chunks for human review/ease of maintenance

 -- Row 24 -----------------------------------
  Element = StructureMap.group.name
  Card. = 1..1
  Summary = y
  Type = id
  Short Name = Human-readable label
  Definition = A unique name for the group for the convenience of human readers

 -- Row 25 -----------------------------------
  Element = StructureMap.group.extends
  Card. = 0..1
  Summary = y
  Type = id
  Short Name = Another group that this group adds rules to

 -- Row 26 -----------------------------------
  Element = StructureMap.group.typeMode
  Card. = 1..1
  Summary = y
  Type = code
  Binding = StructureMapGroupTypeMode
  Short Name = none | types | type-and-types
  Definition = If this is the default rule set to apply for thie source type, or this combination of types
  Comments = Not applicable if the underlying model is untyped. There can only be one default mapping for any particular type combination

 -- Row 27 -----------------------------------
  Element = StructureMap.group.documentation
  Card. = 0..1
  Summary = y
  Type = string
  Short Name = Additional description/explaination for group
  Definition = Additional supporting documentation that explains the purpose of the group and the types of mappings within it.

 -- Row 28 -----------------------------------
  Element = StructureMap.group.input
  Card. = 1..*
  Summary = y
  UML = left
  Short Name = Named instance provided when invoking the map
  Definition = A name assigned to an instance of data. The instance must be provided when the mapping is invoked
  Comments = If no inputs are named, then the entry mappings are type based

 -- Row 29 -----------------------------------
  Element = StructureMap.group.input.name
  Card. = 1..1
  Summary = y
  Type = id
  Short Name = Name for this instance of data

 -- Row 30 -----------------------------------
  Element = StructureMap.group.input.type
  Card. = 0..1
  Summary = y
  Type = string
  Short Name = Type for this instance of data

 -- Row 31 -----------------------------------
  Element = StructureMap.group.input.mode
  Card. = 1..1
  Summary = y
  Type = code
  Binding = StructureMapInputMode
  Short Name = source | target
  Definition = Mode for this instance of data

 -- Row 32 -----------------------------------
  Element = StructureMap.group.input.documentation
  Card. = 0..1
  Type = string
  Short Name = Documentation for this instance of data

 -- Row 33 -----------------------------------
  Element = StructureMap.group.rule
  Card. = 1..*
  Summary = y
  UML = down
  Short Name = Transform Rule from source to target

 -- Row 34 -----------------------------------
  Element = StructureMap.group.rule.name
  Card. = 1..1
  Summary = y
  Type = id
  Short Name = Name of the rule for internal references

 -- Row 35 -----------------------------------
  Element = StructureMap.group.rule.source
  Card. = 1..*
  Summary = y
  UML = left
  Short Name = Source inputs to the mapping

 -- Row 36 -----------------------------------
  Element = StructureMap.group.rule.source.context
  Card. = 1..1
  Summary = y
  Type = id
  Short Name = Type or variable this rule applies to
  Definition = Type or variable this rule applies to

 -- Row 37 -----------------------------------
  Element = StructureMap.group.rule.source.min
  Card. = 0..1
  Summary = y
  Type = integer
  Short Name = Specified minimum cardinality
  Definition = Specified minimum cardinality for the element. This is optional; if present, it acts an implicit check on the input content

 -- Row 38 -----------------------------------
  Element = StructureMap.group.rule.source.max
  Card. = 0..1
  Summary = y
  Type = string
  Short Name = Specified maximum cardinality (number or *)
  Definition = Specified maximum cardinality for the element - a number or a \"*\". This is optional; if present, it acts an implicit check on the input content (* just serves as documentation; it\'s the default value)

 -- Row 39 -----------------------------------
  Element = StructureMap.group.rule.source.type
  Card. = 0..1
  Summary = y
  Type = string
  Short Name = Rule only applies if source has this type
  Definition = Specified type for the element. This works as a condition on the mapping - use for polymorphic elements

 -- Row 40 -----------------------------------
  Element = StructureMap.group.rule.source.defaultValue[x]
  Card. = 0..1
  Summary = y
  Type = *
  Short Name = Default value if no value exists
  Definition = A value to use if there is no existing value in the source object
  Comments = If there\'s a default value on an item that can repeat, it will only be used once

 -- Row 41 -----------------------------------
  Element = StructureMap.group.rule.source.element
  Card. = 0..1
  Summary = y
  Type = string
  Short Name = Optional field for this source

 -- Row 42 -----------------------------------
  Element = StructureMap.group.rule.source.listMode
  Card. = 0..1
  Summary = y
  Type = code
  Binding = StructureMapSourceListMode
  Short Name = first | not_first | last | not_last | only_one
  Definition = How to handle the list mode for this element

 -- Row 43 -----------------------------------
  Element = StructureMap.group.rule.source.variable
  Card. = 0..1
  Summary = y
  Type = id
  Short Name = Named context for field, if a field is specified

 -- Row 44 -----------------------------------
  Element = StructureMap.group.rule.source.condition
  Card. = 0..1
  Summary = y
  Type = string
  Short Name = FHIRPath expression  - must be true or the rule does not apply

 -- Row 45 -----------------------------------
  Element = StructureMap.group.rule.source.check
  Card. = 0..1
  Summary = y
  Type = string
  Short Name = FHIRPath expression  - must be true or the mapping engine throws an error instead of completing

 -- Row 46 -----------------------------------
  Element = StructureMap.group.rule.target
  Card. = 0..*
  Summary = y
  UML = right
  Short Name = Content to create because of this mapping rule

 -- Row 47 -----------------------------------
  Element = StructureMap.group.rule.target.context
  Card. = 0..1
  Summary = y
  Type = id
  Short Name = Type or variable this rule applies to
  Definition = Type or variable this rule applies to

 -- Row 48 -----------------------------------
  Element = StructureMap.group.rule.target.contextType
  Card. = 0..1
  Summary = y
  Type = code
  Binding = StructureMapContextType
  Short Name = type | variable
  Definition = How to interpret the context

 -- Row 49 -----------------------------------
  Element = StructureMap.group.rule.target.element
  Card. = 0..1
  Summary = y
  Type = string
  Short Name = Field to create in the context

 -- Row 50 -----------------------------------
  Element = StructureMap.group.rule.target.variable
  Card. = 0..1
  Summary = y
  Type = id
  Short Name = Named context for field, if desired, and a field is specified

 -- Row 51 -----------------------------------
  Element = StructureMap.group.rule.target.listMode
  Card. = 0..*
  Summary = y
  Type = code
  Binding = StructureMapTargetListMode
  Short Name = first | share | last | collate
  Definition = If field is a list, how to manage the list

 -- Row 52 -----------------------------------
  Element = StructureMap.group.rule.target.listRuleId
  Card. = 0..1
  Summary = y
  Type = id
  Short Name = Internal rule reference for shared list items

 -- Row 53 -----------------------------------
  Element = StructureMap.group.rule.target.transform
  Card. = 0..1
  Summary = y
  Type = code
  Binding = StructureMapTransform
  Short Name = create | copy +
  Definition = How the data is copied / created

 -- Row 54 -----------------------------------
  Element = StructureMap.group.rule.target.parameter
  Card. = 0..*
  Summary = y
  UML = up
  Short Name = Parameters to the transform

 -- Row 55 -----------------------------------
  Element = StructureMap.group.rule.target.parameter.value[x]
  Card. = 1..1
  Summary = y
  Type = id | string | boolean | integer | decimal
  Short Name = Parameter value - variable or literal

 -- Row 56 -----------------------------------
  Element = StructureMap.group.rule.rule
  Card. = 0..*
  Summary = y
  Type = @StructureMap.group.rule
  Short Name = Rules contained in this rule

 -- Row 57 -----------------------------------
  Element = StructureMap.group.rule.dependent
  Card. = 0..*
  Summary = y
  UML = down
  Short Name = Which other rules to apply in the context of this rule

 -- Row 58 -----------------------------------
  Element = StructureMap.group.rule.dependent.name
  Card. = 1..1
  Summary = y
  Type = id
  Short Name = Name of a rule or group to apply

 -- Row 59 -----------------------------------
  Element = StructureMap.group.rule.dependent.variable
  Card. = 1..*
  Summary = y
  Type = string
  Short Name = Variable to pass to the rule or group

 -- Row 60 -----------------------------------
  Element = StructureMap.group.rule.documentation
  Card. = 0..1
  Type = string
  Short Name = Documentation for this instance of data

=== Sheet Search =====================================

=== Sheet Profiles =====================================

=== Sheet Examples =====================================

 -- Row 1 -----------------------------------
  Name = Example
  Identity = example
  Description = Example
  Filename = structuremap-example.xml

 -- Row 2 -----------------------------------
  Name = SupplyRequest Transform
  Identity = supplyrequest-transform
  Description = Transforms an ActivityDefinition to a SupplyRequest
  Filename = structuremap-supplyrequest-transform.xml

=== Sheet Examples =====================================

 -- Row 1 -----------------------------------
  Name = transform
  Use = Resource | Instance
  Documentation = The transform operation takes input content, applies a structure map transform, and then returns the output.
  Type = operation
  Example.Request = $transform-request.txt
  Example.Response = $transform-response.txt
  Title = Model Instance Transformation
  Footer = The input and return are specified as \'Resources\'. In most usage of the $transform operation, either the input or return content is not a valid FHIR resource. In these cases, the return type is actually a [Binary](binary.html) resource. For this operation, the Binary resources may be encoded directly, using a mime-type, as shown in the example. Note: this specification does not yet address the means by which the servers may know the correct mime types for the various content involved
  Idempotent = True

 -- Row 2 -----------------------------------
  Name = transform.source
  Use = in
  Documentation = The structure map to apply. This is only needed if the operation is invoked at the resource level. If the $transform operation is invoked on a particular structure map, this will be ignored by the server
  Type = uri
  Min = 0
  Max = 1

 -- Row 3 -----------------------------------
  Name = transform.content
  Use = in
  Documentation = The logical content to transform
  Type = Resource
  Min = 1
  Max = 1

 -- Row 4 -----------------------------------
  Name = transform.return
  Use = out
  Documentation = The result of the transform
  Type = Resource
  Min = 1
  Max = 1
