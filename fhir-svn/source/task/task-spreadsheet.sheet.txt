
=== Sheet Bindings =====================================

 -- Row 1 -----------------------------------
  Binding Name = TaskBusinessStatus
  Binding = unbound
  Definition = The domain-specific business-contextual sub-state of the task.  For example: \"Blood drawn\", \"IV inserted\", \"Awaiting physician signature\", etc.

 -- Row 2 -----------------------------------
  Binding Name = TaskCode
  Binding = unbound
  Definition = Codes to identify what the task involves.  These will typically be specific to a particular workflow.

 -- Row 3 -----------------------------------
  Binding Name = TaskInputParameterType
  Binding = unbound
  Definition = Codes to identify types of input parameters.  These will typically be specific to a particular workflow.  E.g. \"Comparison source\", \"Applicable consent\", \"Concommitent Medications\", etc.

 -- Row 4 -----------------------------------
  Binding Name = TaskIntent
  Binding = value set
  Reference = http://hl7.org/fhir/ValueSet/request-intent
  Definition = Distinguishes whether the task is a proposal, plan or full order
  Conformance = required

 -- Row 5 -----------------------------------
  Binding Name = TaskOutputParameterType
  Binding = unbound
  Definition = Codes to identify types of input parameters.  These will typically be specific to a particular workflow.  E.g. \"Identified issues\", \"Preliminary results\", \"Filler order\", \"Final results\", etc.

 -- Row 6 -----------------------------------
  Binding Name = TaskPerformerType
  Binding = code list
  Reference = #task-performer-type
  Definition = The type(s) of task performers allowed
  Description = A code describing the kind of performer that will act on this task.
  Conformance = preferred

 -- Row 7 -----------------------------------
  Binding Name = TaskPriority
  Binding = value set
  Reference = http://hl7.org/fhir/ValueSet/request-priority
  Definition = The task\'s priority
  Description = The priority of a task (may affect service level applied to the task).
  Conformance = required

 -- Row 8 -----------------------------------
  Binding Name = TaskReason
  Binding = unbound
  Definition = Indicates why the task is needed.  E.g. Suspended because patient admitted to hospital.

 -- Row 9 -----------------------------------
  Binding Name = TaskStatus
  Binding = code list
  Reference = #task-status
  Definition = The current status of the task.
  Conformance = required

 -- Row 10 -----------------------------------
  Binding Name = TaskStatusReason
  Binding = unbound
  Definition = Codes to identify the reason for current status.  These will typically be specific to a particular workflow.

=== Sheet task-performer-type =====================================

 -- Row 1 -----------------------------------
  Id = 1
  Code = requester
  Display = Requester
  Definition = A workflow participant that requests services.

 -- Row 2 -----------------------------------
  Id = 2
  Code = dispatcher
  Display = Dispatcher
  Definition = A workflow participant that dispatches services (assigns another task to a participant).

 -- Row 3 -----------------------------------
  Id = 3
  Code = scheduler
  Display = Scheduler
  Definition = A workflow participant that schedules (dispatches and sets the time or date for performance of) services.
  Parent = #2

 -- Row 4 -----------------------------------
  Id = 4
  Code = performer
  Display = Performer
  Definition = A workflow participant that performs services.

 -- Row 5 -----------------------------------
  Id = 5
  Code = monitor
  Display = Monitor
  Definition = A workflow participant that monitors task activity.

 -- Row 6 -----------------------------------
  Id = 6
  Code = manager
  Display = Manager
  Definition = A workflow participant that manages task activity.

 -- Row 7 -----------------------------------
  Id = 7
  Code = acquirer
  Display = Acquirer
  Definition = A workflow participant that acquires resources (specimens, images, etc) necessary to perform the task.

 -- Row 8 -----------------------------------
  Id = 8
  Code = reviewer
  Display = Reviewer
  Definition = A workflow participant that reviews task inputs or outputs.

=== Sheet task-status =====================================

 -- Row 1 -----------------------------------
  Code = draft
  Display = Draft
  Definition = The task is not yet ready to be acted upon.

 -- Row 2 -----------------------------------
  Code = requested
  Display = Requested
  Definition = The task is ready to be acted upon and action is sought.

 -- Row 3 -----------------------------------
  Code = received
  Display = Received
  Definition = A potential performer has claimed ownership of the task and is evaluating whether to perform it.

 -- Row 4 -----------------------------------
  Code = accepted
  Display = Accepted
  Definition = The potential performer has agreed to execute the task but has not yet started work.

 -- Row 5 -----------------------------------
  Code = rejected
  Display = Rejected
  Definition = The potential performer who claimed ownership of the task has decided not to execute it prior to performing any action.

 -- Row 6 -----------------------------------
  Code = ready
  Display = Ready
  Definition = Task is ready to be performed, but no action has yet been taken.  Used in place of requested/received/accepted/rejected when request assignment and acceptance is a given.

 -- Row 7 -----------------------------------
  Code = cancelled
  Display = Cancelled
  Definition = The task was not completed.

 -- Row 8 -----------------------------------
  Code = in-progress
  Display = In Progress
  Definition = Task has been started but is not yet complete.

 -- Row 9 -----------------------------------
  Code = on-hold
  Display = On Hold
  Definition = Task has been started but work has been paused.

 -- Row 10 -----------------------------------
  Code = failed
  Display = Failed
  Definition = The task was attempted but could not be completed due to some error.

 -- Row 11 -----------------------------------
  Code = completed
  Display = Completed
  Definition = The task has been completed.

 -- Row 12 -----------------------------------
  Code = entered-in-error
  Display = Entered in Error
  Definition = The task should never have existed and is retained only because of the possibility it may have used.

=== Sheet Invariants =====================================

 -- Row 1 -----------------------------------
  Id = inv-1
  Context = Task
  English = Last modified date must be greater than or equal to authored-on date.
  XPath = not(exists(f:lastModified/@value)) or not(exists(f:authoredOn/@value)) or f:lastModified/@value >= f:authoredOn/@value
  Expression = lastModified.exists().not() or authoredOn.exists().not() or lastModified >= authoredOn
  Severity = error

=== Sheet Data Elements =====================================

 -- Row 1 -----------------------------------
  Element = Task
  Type = DomainResource
  Short Name = A task to be performed
  Definition = A task to be performed
  Workflow Mapping = Request, Event
  RIM Mapping = ControlAct[moodCode=INT]
  w5 = workflow.order

 -- Row 2 -----------------------------------
  Element = Task.identifier
  Card. = 0..*
  Type = Identifier
  Short Name = Task Instance Identifier
  Definition = The business identifier for this task.
  Workflow Mapping = Request.identifier, Event.identifier
  RIM Mapping = .id
  w5 = id

 -- Row 3 -----------------------------------
  Element = Task.definition[x]
  Card. = 0..1
  Summary = Y
  Type = uri | Reference(ActivityDefinition)
  Short Name = Formal definition of task
  Definition = A reference to a formal or informal definition of the task.  For example, a protocol, a step within a defined workflow definition, etc.
  Requirements = Enables a formal definition of how he task is to be performed (e.g. using BPMN, BPEL, XPDL or other formal notation) to be associated with a task, enabling automation.
  Workflow Mapping = Request.definition, Event.definition
  RIM Mapping = .outboundRelationship[typeCode=DEFN].target

 -- Row 4 -----------------------------------
  Element = Task.basedOn
  Card. = 0..*
  Summary = Y
  Type = Reference(Any)
  Short Name = Request fulfilled by this task
  Definition = BasedOn refers to a higher-level authorization that triggered the creation of the task.  It references a \"request\" resource such as a ProcedureRequest, MedicationRequest, ProcedureRequest, CarePlan, etc. which is distinct from the \"request\" resource the task is seeking to fulfil.  This latter resource is referenced by FocusOn.  For example, based on a ProcedureRequest (= BasedOn), a task is created to fulfil a procedureRequest ( = FocusOn ) to collect a specimen from a patient.
  Workflow Mapping = Request.basedOn, Definition.basedOn
  RIM Mapping = .outboundRelationship[typeCode=FLFS].target[moodCode=INT]

 -- Row 5 -----------------------------------
  Element = Task.groupIdentifier
  Card. = 0..1
  Summary = Y
  Type = Identifier
  Short Name = Requisition or grouper id
  Definition = An identifier that links together multiple tasks and other requests that were created in the same context
  Requirements = Billing and/or reporting can be linked to whether multiple requests were created as a single unit.
  Workflow Mapping = Request.groupIdentifier
  RIM Mapping = .inboundRelationship[typeCode=COMP].source[moodCode=INT].id

 -- Row 6 -----------------------------------
  Element = Task.partOf
  Card. = 0..*
  Summary = Y
  Type = Reference(Task)
  Short Name = Composite task
  Definition = Task that this particular task is part of
  Requirements = Allows tasks to be broken down into sub-steps (and this division can occur independent of the original task)
  Comments = This should usually be 0..1
  Workflow Mapping = Event.partOf
  RIM Mapping = .inboundRelationship[typeCode=COMP].source[moodCode=INT]

 -- Row 7 -----------------------------------
  Element = Task.status
  Card. = 1..1
  Summary = Y
  Type = code
  Binding = TaskStatus
  Short Name = draft | requested | received | accepted | +
  Definition = The current status of the task.
  Requirements = These states enable coordination of task status with off-the-shelf workflow solutions that support automation of tasks.
  Workflow Mapping = Request.status, Event.status
  RIM Mapping = .statusCode
  w5 = status

 -- Row 8 -----------------------------------
  Element = Task.statusReason
  Card. = 0..1
  Summary = Y
  Type = CodeableConcept
  Binding = TaskStatusReason
  Short Name = Reason for current status
  Definition = An explanation as to why this task is held, failed, was refused, etc.
  Comments = This applies to the current status.  Look at the history of the task to see reasons for past statuses
  RIM Mapping = .inboundRelationship[typeCode=SUBJ].source[classCode=CACT, moodCode=EVN, code=\"status change\"].reasonCode

 -- Row 9 -----------------------------------
  Element = Task.businessStatus
  Card. = 0..1
  Summary = Y
  Type = CodeableConcept
  Binding = TaskBusinessStatus
  Short Name = E.g. \"Specimen collected\", \"IV prepped\"
  Definition = Contains business-specific nuances of the business state.
  Requirements = There\'s often a need to track substates of a task - this is often variable by specific workflow implementation
  RIM Mapping = .inboundRelationship[typeCode=SUBJ].source[classCode=OBS, moodCode=EVN, code=\"business status\"]

 -- Row 10 -----------------------------------
  Element = Task.intent
  Card. = 1..1
  Summary = Y
  Type = code
  Binding = TaskIntent
  Short Name = proposal | plan | order +
  Definition = Indicates the \"level\" of actionability associated with the Task.  I.e. Is this a proposed task, a planned task, an actionable task, etc.
  Comments = This element is immutable.  Proposed tasks, planned tasks, etc. must be distinct instances.\n\nIn most cases, Tasks will have an intent of \"order\"
  Workflow Mapping = Request.intent
  RIM Mapping = .moodCode
  w5 = class

 -- Row 11 -----------------------------------
  Element = Task.priority
  Card. = 0..1
  Type = code
  Binding = TaskPriority
  Short Name = normal | urgent | asap | stat
  Definition = Indicates how quickly the Task should be addressed with respect to other requests
  Requirements = Used to identify the service level expected while performing a task.
  Workflow Mapping = Request.priority
  RIM Mapping = .priorityCode
  Missing Meaning = If missing, this task should be performed with normal priority
  w5 = grade

 -- Row 12 -----------------------------------
  Element = Task.code
  Card. = 0..1
  Summary = Y
  Type = CodeableConcept
  Binding = TaskCode
  Short Name = Task Type
  Definition = A name or code (or both) briefly describing what the task involves.
  Comments = The title (eg \"My Tasks\", \"Outstanding Tasks for Patient X\") should go into the code.
  Workflow Mapping = Request.code, Event.code
  RIM Mapping = .code
  w5 = what

 -- Row 13 -----------------------------------
  Element = Task.description
  Card. = 0..1
  Summary = Y
  Type = string
  Short Name = Human-readable explanation of task
  Definition = A free-text description of what is to be performed.
  RIM Mapping = .text

 -- Row 14 -----------------------------------
  Element = Task.focus
  Card. = 0..1
  Summary = Y
  Type = Reference(Any)
  Short Name = What task is acting on
  Definition = The request being actioned or the resource being manipulated by this task
  Requirements = Used to identify the thing to be done
  Comments = If multiple resources need to be manipulated, use sub-tasks.  (This ensures that status can be tracked independently for each referenced resource.)
  RIM Mapping = .outboundRelationship[typeCode=SUBJ].target
  w5 = what

 -- Row 15 -----------------------------------
  Element = Task.for
  Card. = 0..1
  Aliases = Patient
  Summary = Y
  Type = Reference(Any)
  Short Name = Beneficiary of the Task
  Definition = The entity who benefits from the performance of the service specified in the task (e.g., the patient).
  Requirements = Used to track tasks outstanding for a beneficiary.  Do not use to track the task owner or creator (see owner and creator respectively).  This can also affect access control
  Workflow Mapping = Request.subject, Event.subject
  RIM Mapping = .participation[typeCode=RCT].role
  w5 = who.focus

 -- Row 16 -----------------------------------
  Element = Task.context
  Card. = 0..1
  Summary = Y
  Type = Reference(Encounter|EpisodeOfCare)
  Short Name = Healthcare event during which this task originated
  Definition = The healthcare event  (e.g. a patient and healthcare provider interaction) during which this task was created
  Requirements = For some tasks it may be important to know the link between the task or episode of care the task originated within.
  Workflow Mapping = Request.context, Event.context
  RIM Mapping = .inboundRelationship[typeCode=COMP].source[classCode=PCPR, moodCode=EVN]
  w5 = context

 -- Row 17 -----------------------------------
  Element = Task.executionPeriod
  Card. = 0..1
  Summary = Y
  Type = Period
  Short Name = Start and end time of execution
  Definition = Identifies the time action was first taken against the task (start) and/or the time final action was taken against the task prior to marking it as completed (end).
  Workflow Mapping = Event.occurrence[x]
  RIM Mapping = .effectiveTime
  w5 = when.done

 -- Row 18 -----------------------------------
  Element = Task.authoredOn
  Card. = 0..1
  Aliases = Created Date
  Inv. = inv-1
  Type = dateTime
  Short Name = Task Creation Date
  Definition = The date and time this task was created.
  Requirements = Most often used along with lastUpdated to track duration of task to supporting monitoring and management.
  Workflow Mapping = Request.authoredOn
  RIM Mapping = .participation[typeCode=AUT].time
  w5 = when.recorded

 -- Row 19 -----------------------------------
  Element = Task.lastModified
  Card. = 0..1
  Aliases = Update Date
  Summary = Y
  Inv. = inv-1
  Type = dateTime
  Short Name = Task Last Modified Date
  Definition = The date and time of last modification to this task.
  Requirements = Used along with history to track task activity and time in a particular task state.  This enables monitoring and management.
  RIM Mapping = .inboundRelationship[typeCode=SUBJ, ].source[classCode=CACT, moodCode=EVN].effectiveTime

 -- Row 20 -----------------------------------
  Element = Task.requester
  Card. = 0..1
  Summary = Y
  UML = 400;0
  Short Name = Who is asking for task to be done
  Definition = The creator of the task.
  Requirements = Identifies who created this task.  May be used by access control mechanisms (e.g., to ensure that only the creator can cancel a task).
  Workflow Mapping = Request.requester
  RIM Mapping = .participation[typeCode=AUT].role

 -- Row 21 -----------------------------------
  Element = Task.requester.agent
  Card. = 1..1
  Aliases = Initiator; Author
  Summary = Y
  Type = Reference(Device | Organization | Patient | Practitioner | RelatedPerson )
  Short Name = Individual asking for task
  Definition = The device, practitioner, etc. who initiated the task
  Workflow Mapping = Request.requester.agent
  RIM Mapping = .player
  w5 = who.author

 -- Row 22 -----------------------------------
  Element = Task.requester.onBehalfOf
  Card. = 0..1
  Type = Reference(Organization)
  Short Name = Organization individual is acting for
  Definition = The organization the device or practitioner was acting on behalf of when they initiated the task
  Requirements = Practitioners and Devices can be associated with multiple organizations.  This element indicates which organization they were acting on behalf of when authoring the request
  Workflow Mapping = Request.requester.onBehalfOf
  RIM Mapping = .scoper

 -- Row 23 -----------------------------------
  Element = Task.performerType
  Card. = 0..*
  Type = CodeableConcept
  Binding = TaskPerformerType
  Short Name = requester | dispatcher | scheduler | performer | monitor | manager | acquirer | reviewer
  Definition = The type of participant that can execute the task.
  Requirements = Use to distinguish tasks on different activity queues.
  Workflow Mapping = Event.performer.role, Request.performerType
  RIM Mapping = .participation[typeCode=PRF].role.code
  w5 = who.actor

 -- Row 24 -----------------------------------
  Element = Task.owner
  Card. = 0..1
  Aliases = Performer; Executer
  Summary = Y
  Type = Reference(Device | Organization | Patient | Practitioner | RelatedPerson )
  Short Name = Responsible individual
  Definition = Individual organization or Device currently responsible for task execution.
  Requirements = Identifies who is expected to perform this task.
  Comments = Tasks may be created with an owner not yet identified
  Workflow Mapping = Event.performer.actor, Request.performer
  RIM Mapping = .participation[typeCode=PRF].role
  w5 = who.actor

 -- Row 25 -----------------------------------
  Element = Task.reason
  Card. = 0..1
  Type = CodeableConcept
  Binding = TaskReason
  Short Name = Why task is needed
  Definition = A description or code indicating why this task needs to be performed
  Comments = This should only be included if there is no focus or if it differs from the reason indicated on the focus.
  Workflow Mapping = Request.reasonCode, Event.reasonCodeableConcept
  RIM Mapping = .reasonCode
  w5 = why

 -- Row 26 -----------------------------------
  Element = Task.note
  Card. = 0..*
  Type = Annotation
  Short Name = Comments made about the task
  Definition = Free-text information captured about the task as it progresses.
  Workflow Mapping = Request.note, Event.note
  RIM Mapping = .inboundRelationship[typeCode=SUBJ, ].source[classCode=OBS, moodCode=EVN, code=\"annotation\"].value(string)

 -- Row 27 -----------------------------------
  Element = Task.relevantHistory
  Card. = 0..*
  Aliases = Status History
  Type = Reference(Provenance)
  Short Name = Key events in history of the Task
  Definition = Links to Provenance records for past versions of this Task that identify key state transitions or updates that are likely to be relevant to a user looking at the current version of the task
  Comments = This element does not point to the Provenance associated with the *current* version of the resource - as it would be created after this version existed.  The Provenance for the current version can be retrieved with a _revinclude.
  Workflow Mapping = Request.relevantHistory
  RIM Mapping = .inboundRelationship(typeCode=SUBJ].source[classCode=CACT, moodCode=EVN]

 -- Row 28 -----------------------------------
  Element = Task.restriction
  Card. = 0..1
  UML = 400;100
  Short Name = Constraints on fulfillment tasks
  Definition = If the Task.focus is a request resource and the task is seeking fulfillment (i.e is asking for the request to be actioned), this element identifies any limitations on what parts of the referenced request should be actioned
  Requirements = Sometimes when fulfillment is sought, you don\'t want full fulfillment
  RIM Mapping = Instead of pointing to request, would point to component of request, having these characteristics

 -- Row 29 -----------------------------------
  Element = Task.restriction.repetitions
  Card. = 0..1
  Type = positiveInt
  Short Name = How many times to repeat
  Definition = Indicates the number of times the requested action should occur
  Requirements = E.g. order that requests monthly lab tests, fulfillment is sought for 1
  RIM Mapping = .repeatNumber

 -- Row 30 -----------------------------------
  Element = Task.restriction.period
  Card. = 0..1
  Type = Period
  Short Name = When fulfillment sought
  Definition = Over what time-period is fulfillment sought
  Requirements = E.g. order that authorizes 1 year\'s services.  Fulfillment is sought for next 3 months.
  Comments = Note that period.high is the due date representing the time by which the task should be completed.
  RIM Mapping = .effectiveTime(IVL<TS>)

 -- Row 31 -----------------------------------
  Element = Task.restriction.recipient
  Card. = 0..*
  Type = Reference(Patient|Practitioner|RelatedPerson|Group|Organization)
  Short Name = For whom is fulfillment sought?
  Definition = For requests that are targeted to more than on potential recipient/target, for whom is fulfillment sought?
  RIM Mapping = .participation[typeCode=SBJ].role

 -- Row 32 -----------------------------------
  Element = Task.input
  Card. = 0..*
  Aliases = Supporting Information
  UML = 400;225
  Type = =Parameter
  Short Name = Information used to perform task
  Definition = Additional information that may be needed in the execution of the task
  Requirements = Resources and data used to perform the task.  This data is used in the business logic of task execution, and is stored separately because it varies between workflows.
  RIM Mapping = ???

 -- Row 33 -----------------------------------
  Element = Task.input.type
  Card. = 1..1
  Aliases = Name
  Type = CodeableConcept
  Binding = TaskInputParameterType
  Short Name = Label for the input
  Definition = A code or description indicating how the input is intended to be used as part of the task execution
  Requirements = Inputs are named to enable task automation to bind data and pass it from one task to the next.
  Comments = If referencing a BPMN workflow or Protocol, the \"system\" is the URL for the workflow definition and the code is the \"name\" of the required input.
  RIM Mapping = ???

 -- Row 34 -----------------------------------
  Element = Task.input.value[x]
  Card. = 1..1
  Type = *
  Short Name = Content to use in performing the task
  Definition = The value of the input parameter as a basic type.
  RIM Mapping = ???

 -- Row 35 -----------------------------------
  Element = Task.output
  Card. = 0..*
  UML = 400;300
  Type = @Parameter
  Short Name = Information produced as part of task
  Definition = Outputs produced by the Task
  Requirements = Resources and data produced during the execution the task.  This data is generated by the business logic of task execution, and is stored separately because it varies between workflows.
  RIM Mapping = ???

 -- Row 36 -----------------------------------
  Element = Task.output.type
  Card. = 1..1
  Aliases = Name
  Type = CodeableConcept
  Binding = TaskOutputParameterType
  Short Name = Label for output
  Definition = The name of the Output parameter.
  Requirements = Outputs are named to enable task automation to bind data and pass it from one task to the next.
  RIM Mapping = ???

 -- Row 37 -----------------------------------
  Element = Task.output.value[x]
  Card. = 1..1
  Type = *
  Short Name = Result of output
  Definition = The value of the Output parameter as a basic type.
  Requirements = Task outputs can take any form.
  RIM Mapping = ???

=== Sheet Search =====================================

 -- Row 1 -----------------------------------
  Name = identifier
  Type = token
  Description = Search for a task instance by its business identifier
  Path = Task.identifier

 -- Row 2 -----------------------------------
  Name = !definition-ref
  Type = reference
  Description = Search by task definition as a Reference
  Path = Task.definitionReference

 -- Row 3 -----------------------------------
  Name = based-on
  Type = reference
  Description = Search by requests this task is based on
  Path = Task.basedOn

 -- Row 4 -----------------------------------
  Name = group-identifier
  Type = token
  Description = Search by group identifier
  Path = Task.groupIdentifier

 -- Row 5 -----------------------------------
  Name = part-of
  Type = reference
  Description = Search by task this task is part of
  Path = Task.partOf

 -- Row 6 -----------------------------------
  Name = status
  Type = token
  Description = Search by task status
  Path = Task.status

 -- Row 7 -----------------------------------
  Name = business-status
  Type = token
  Description = Search by business status
  Path = Task.businessStatus

 -- Row 8 -----------------------------------
  Name = priority
  Type = token
  Description = Search by task priority
  Path = Task.priority

 -- Row 9 -----------------------------------
  Name = intent
  Type = token
  Description = Search by task intent
  Path = Task.intent

 -- Row 10 -----------------------------------
  Name = code
  Type = token
  Description = Search by task code
  Path = Task.code

 -- Row 11 -----------------------------------
  Name = subject
  Type = reference
  Description = Search by subject
  Path = Task.for

 -- Row 12 -----------------------------------
  Name = patient
  Type = reference
  Description = Search by patient
  Path = Task.for
  Target Types = Patient

 -- Row 13 -----------------------------------
  Name = focus
  Type = reference
  Description = Search by task focus
  Path = Task.focus

 -- Row 14 -----------------------------------
  Name = context
  Type = reference
  Description = Search by encounter or episode
  Path = Task.context

 -- Row 15 -----------------------------------
  Name = period
  Type = date
  Description = Search by period Task is/was underway
  Path = Task.executionPeriod

 -- Row 16 -----------------------------------
  Name = performer
  Type = token
  Description = Search by recommended type of performer (e.g., Requester, Performer, Scheduler).
  Path = Task.performerType

 -- Row 17 -----------------------------------
  Name = !statusreason
  Type = token
  Description = Search by status reason
  Path = Task.statusReason

 -- Row 18 -----------------------------------
  Name = authored-on
  Type = date
  Description = Search by creation date
  Path = Task.authoredOn

 -- Row 19 -----------------------------------
  Name = modified
  Type = date
  Description = Search by last modification date
  Path = Task.lastModified

 -- Row 20 -----------------------------------
  Name = owner
  Type = reference
  Description = Search by task owner
  Path = Task.owner

 -- Row 21 -----------------------------------
  Name = requester
  Type = reference
  Description = Search by task requester
  Path = Task.requester.agent

 -- Row 22 -----------------------------------
  Name = organization
  Type = reference
  Description = Search by responsible organization
  Path = Task.requester.onBehalfOf

=== Sheet Profiles =====================================

 -- Row 1 -----------------------------------
  Name = Task Extensions
  IG Name = core
  Filename = task-extensions.xml
  Type = spreadsheet

=== Sheet Examples =====================================

 -- Row 1 -----------------------------------
  Name = In Progress Lipid Panel Task 1
  Identity = example1
  Description = Example of in-progress/awaiting specimen task for a lipid panel order
  Filename = task-example1.xml

 -- Row 2 -----------------------------------
  Name = Accepted Specimen Collection Task
  Identity = example2
  Description = Example of an accepted, filler generated specimen collection subtask
  Filename = task-example2.xml

 -- Row 3 -----------------------------------
  Name = Completed Specimen Collection Task
  Identity = example4
  Description = Example of a completed  filler generated specimen collection subtask
  Filename = task-example4.xml

 -- Row 4 -----------------------------------
  Name = in Progress Lipid Panel Task 2
  Identity = example5
  Description = Example of in-progress/test results pending task for a lipid panel order
  Filename = task-example5.xml

 -- Row 5 -----------------------------------
  Name = Completed Lipid Panel Task
  Identity = example6
  Description = Example of completed  task for a lipid panel order
  Filename = task-example6.xml

 -- Row 6 -----------------------------------
  Name = Prescription Task
  Identity = example3
  Description = Example of simple prescription task
  Filename = task-example3.xml

=== Sheet Examples =====================================

 -- Row 1 -----------------------------------
  Name = !reserve
  Use = Instance
  Documentation = Reserve this task for the specified entity.  Makes the specified entity the task owner, and transitions the task to the Ready state.  This operation may be used by an entity to claim a task for itself, or to delegate or forward the task to another entity.
  Type = operation
  Title = Reserve Task

 -- Row 2 -----------------------------------
  Name = !reserve.owner
  Use = in
  Documentation = The entity who is to be assigned ownership of this task.
  Type = Reference(Device|Organization|Patient|Practitioner|RelatedPerson)
  Min = 1
  Max = 1

 -- Row 3 -----------------------------------
  Name = !start
  Use = Instance
  Documentation = Start this task by the specified entity (or if none specified, by the present task owner).  If an owner is specified, that owner is assigned as the task owner.  The task is transitioned to the In Progress state.
  Type = operation
  Title = Start Task

 -- Row 4 -----------------------------------
  Name = !start.owner
  Use = in
  Documentation = The entity who is to be assigned ownership of this task.  If no entity is provided, the ownership of the task remains unchanged.
  Type = Reference(Device|Organization|Patient|Practitioner|RelatedPerson)
  Min = 0
  Max = 1

 -- Row 5 -----------------------------------
  Name = !finish
  Use = Instance
  Documentation = Finish this task.  The task is transitioned to the completed state.
  Type = operation
  Title = Finish Task

 -- Row 6 -----------------------------------
  Name = !fail
  Use = Instance
  Documentation = Fail this task.  The task is transitioned to the failed state.
  Type = operation
  Title = Fail Task

 -- Row 7 -----------------------------------
  Name = !fail.reason
  Use = in
  Documentation = The reason for failure.  If present, this is assigned to the failureReason property of the task.
  Type = CodeableConcept
  Min = 0
  Max = 1

 -- Row 8 -----------------------------------
  Name = !release
  Use = Instance
  Documentation = Release a previously reserved task.  The task owner is cleared and the task is transitioned to the Ready state.
  Type = operation
  Title = Release Task

 -- Row 9 -----------------------------------
  Name = !suspend
  Use = Instance
  Documentation = Place a hold on any activity for this task until it is subsequently resumed.  The task remains in  its current state but is marked as being suspended, indicating that no additional activity should b performed.  If the task has subtasks, these are also suspended.
  Type = operation
  Title = Suspend Task

 -- Row 10 -----------------------------------
  Name = !resume
  Use = Instance
  Documentation = Indicate that activity on this task can now be resumed.  Removes the mark that the task is suspended, and propgates the resume to any child tasks.
  Type = operation
  Title = Resume Task

 -- Row 11 -----------------------------------
  Name = !cancel
  Use = Instance
  Documentation = Cancel the task.  Set the status of the task to cancelled.
  Type = operation
  Title = Cancel Task

 -- Row 12 -----------------------------------
  Name = !stop
  Use = Instance
  Documentation = Stop processing the task.  The task is returned to the ready state.
  Type = operation
  Title = Stop Task

 -- Row 13 -----------------------------------
  Name = !set-input
  Use = Instance
  Documentation = Set one of the inputs for a task.
  Type = operation
  Title = Set Task Input

 -- Row 14 -----------------------------------
  Name = !set-input.input
  Use = in
  Type = Tuple
  Min = 1
  Max = *

 -- Row 15 -----------------------------------
  Name = !set-input.input.name
  Documentation = The name of the input to add or update.
  Type = string
  Min = 1
  Max = 1

 -- Row 16 -----------------------------------
  Name = !set-input.input.value[x]
  Documentation = If no value is provided, any current input with that name is removed from the resource.
  Type = *
  Min = 0
  Max = 1

 -- Row 17 -----------------------------------
  Name = !set-output
  Use = Instance
  Documentation = Set one of the outputs of a task.
  Type = operation
  Title = Set Task Output

 -- Row 18 -----------------------------------
  Name = !set-output.output
  Use = out
  Type = Tuple
  Min = 1
  Max = *

 -- Row 19 -----------------------------------
  Name = !set-output.output.name
  Documentation = The name of the output to add or update.
  Type = string
  Min = 1
  Max = 1

 -- Row 20 -----------------------------------
  Name = !set-output.output.value[x]
  Documentation = If no value is provided, any current output with that name is removed from the resource.
  Type = *
  Min = 0
  Max = 1
