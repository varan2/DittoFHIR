<div xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.w3.org/1999/xhtml ../../schema/fhir-xhtml.xsd" xmlns="http://www.w3.org/1999/xhtml">

<h3>Operations defined as part of this Specification</h3>

<%operationslist%>

<h3>Executing Operations and Named Queries</h3>

<p>
Operations are executed by POSTing to a URL that is <a href="operations.html">defined by the operation definition</a>.
Named queries are executed by performing a <a href="search.html">search</a> with the value of the search parameter
"_query" set to the name provided in the definition. 
</p>
<p>
If the named query is to be performed over the RESTful API, all the parameters must be simple search parameters,
so that they can be represented directly in the URL without tricky encoding issues. Named queries always 
return a bundle containing a set of resources, so all the out parameters must be 
resources, not data types.
</p>
 
<h3>Passing Resources to Operations</h3> 

<p>
There are two ways to pass resources to an operation: directly or by reference.
The definition of an operation distinguishes between these two, since they have very different behaviors and consequences.
</p>
<p>
As an example, take the <a href="questionnaire-operations.html#populate">Questionnaire.$populate operation</a>.  
This operation takes a questionnaire as a direct parameter. The type of the parameter is 
defined as 'Questionnaire'. In a <a href="parameters.html">Parameters</a> resource, it would be represented like this:
</p>
<pre class="xml">
  &lt;parameter&gt;
    &lt;name value=&quot;questionnaire&quot;/&gt;
    &lt;resource&gt;
      &lt;Questionnaire&gt;
        &lt;!-- Questionnaire contents --&gt;
      &lt;/Questionnaire&gt;
    &lt;/resource&gt;
  &lt;/parameter&gt; 
</pre>
<p>
or, in JSON:
</p>
<pre>
 "parameter": [
    {
      "name": "questionnaire",
      "resource": {
        "resourceType": "Questionnaire",
        // Questionnaire contents 
      }
    }
  ]
</pre>

<p>
Other parameters are passed by reference. For example, <code>$populate</code> takes a 
set of references to other resources that should be used to pre-populate the 
questionnaire. These are passed by reference, and the type of the 
parameter is <code>Reference(Any)</code> - a reference to any kind of resource.
In a parameters resource, it would be represented like this: 
</p>
<pre class="xml">
  &lt;parameter&gt;
    &lt;name value=&quot;content&quot;/&gt;
    &lt;valueReference&gt;
      &lt;reference value="Patient/123"&gt;
      &lt;/Questionnaire&gt;
    &lt;/valueReference&gt;
  &lt;/parameter&gt; 
</pre>
<p>
or, in JSON:
</p>
<pre>
 "parameter": [
    {
      "name": "questionnaire",
      "valueReference" : {
        "reference" : "Patient/123"
      }
    }
  ]
</pre>

<p>
Some operations can take either form; in that case, two distinct parameters
must be defined, one for a resource as a direct parameter, and one for a reference.
</p>

<h3>Renaming OperationDefinition.name</h3>

<p>
It is possible for two different organizations to create different operation definitions with the same name or, perhaps more likely, to define equivalent operations that have the 
same name but incompatible approaches in their parameter lists. 
</p>
<p>
It is also possible, though unlikely, that a server will be required to support both of 
these operations. If this is the case, the server is able to do this by giving one of them
a new name and referring to it by definition in the capability statement. To illustrate
this, assume that two different organizations, "orgA" and "orgB", both define an operation 
called "dothis", and the definitions are incompatible. OrgA publishes its operation
definition at http://orga.com/fhir/dothis.xml, and OrgB publishes its operation at 
http://fhir.orgb.com/meta/OperationDefinition/dothis. The server is able to implement
both. Its capability statement will say:
</p>
<pre class="xml">
&lt;CapabilityStatement xmlns=&quot;http://hl7.org/fhir&quot;&gt;
  &lt;!-- snip --&gt;
  &lt;rest&gt;
    &lt;!-- snip --&gt;
    &lt;operation&gt;
      &lt;name value=&quot;dothis&quot;/&gt;
      &lt;definition&gt;
        &lt;reference value=&quot;http://orga.com/fhir/dothis.xml&quot;/&gt;
      &lt;/definition&gt;
    &lt;/operation&gt;
    &lt;operation&gt;
      &lt;name value=&quot;dothis2&quot;/&gt;
      &lt;definition&gt;
        &lt;reference value=&quot;http://fhir.orgb.com/meta/OperationDefinition/dothis&quot;/&gt;
      &lt;/definition&gt;
    &lt;/operation&gt;
    &lt;!-- snip --&gt;
  &lt;/rest&gt;
  &lt;!-- snip --&gt;
&lt;/CapabilityStatement&gt;
</pre>
<p>
If a general purpose cross server client is looking for the implementation of the 
http://fhir.orgb.com/meta/OperationDefinition/dothis operation and wants to be
robust against this name clash problem, instead of simply executing the $dothis
operation, it can look at the server's <a href="capabilitystatement.html">CapabilityStatement</a> for the underlying
definition URI and then execute the name given in the capability statement.
</p>

<h3>Determining System Compatibility</h3>

<p>
A client can determine the compatibility of the server by processing its capability
statement and ensuring that the server implements the specific operation definitions and parameters required by the client. The client can then report a useful error to the user rather than allowing mystifying operational errors to occur.
</p>
<p>
However, there are fundamental limitations to this approach because 
there are many aspects of these operations that are not (or cannot be) defined 
in a formal fashion using OperationDefinition, for example, co-occurrence constraints among parameters.
</p>
<p>
In the same sense, a 3rd party tool can examine a server's CapabilityStatement and a client's definition of an acceptable server to determine whether
those two system are interoperable or not.
</p>

<h3>Dynamically Generating Forms</h3>

<p>
Finally, it is possible to generate user interface forms automatically from 
the OperationDefinition. The documentation in the <code>OperationDefinition.description</code> 
and <code>OperationDefinition.parameter.documentation</code> should be sufficient to allow
moderately technical users to guess at the correct content of the form.
For this reason, highly technical documentation should go in <code>OperationDefinition.comment</code>.
</p>
<p>
It is anticipated that this would be used to automate development processes, rather than to generate end-user forms: such users will usually need more support than can be offered in a generated form.
</p>

</div>
