
=== Sheet Bindings =====================================

 -- Row 1 -----------------------------------
  Binding Name = StructureDefinitionKind
  Binding = code list
  Reference = #structure-definition-kind
  Definition = Defines the type of structure that a definition is describing.
  Conformance = required

 -- Row 2 -----------------------------------
  Binding Name = ExtensionContext
  Binding = code list
  Reference = #extension-context
  Definition = How an extension context is interpreted.
  Conformance = required

 -- Row 3 -----------------------------------
  Binding Name = StructureDefinitionCode
  Binding = value set
  Reference = valueset-profile-code
  Definition = Codes for the meaning of the defined structure (SNOMED CT and LOINC codes, as an example).
  Conformance = example

 -- Row 4 -----------------------------------
  Binding Name = TypeDerivationRule
  Binding = code list
  Reference = #type-derivation-rule
  Definition = How a type relates to its baseDefinition.
  Conformance = required

 -- Row 5 -----------------------------------
  Binding Name = FHIRDefinedTypeExt
  Binding = value set
  Reference = http://hl7.org/fhir/ValueSet/defined-types
  Definition = Either a resource or a data type, including logical model types
  Conformance = extensible
  Copyright = FHIR

=== Sheet structure-definition-kind =====================================

 -- Row 1 -----------------------------------
  Id = 4
  Code = primitive-type
  Display = Primitive Data Type
  Definition = A primitive type that has a value and an extension. These can be used throughout Resource and extension definitions. Only the base specification can define primitive types.

 -- Row 2 -----------------------------------
  Id = 1
  Code = complex-type
  Display = Complex Data Type
  Definition = A  complex structure that defines a set of data elements. These can be used throughout Resource and extension definitions, and in logical models.

 -- Row 3 -----------------------------------
  Id = 2
  Code = resource
  Display = Resource
  Definition = A resource defined by the FHIR specification.

 -- Row 4 -----------------------------------
  Id = 3
  Code = logical
  Display = Logical Model
  Definition = A conceptual package of data that will be mapped to resources for implementation.

=== Sheet extension-context =====================================

 -- Row 1 -----------------------------------
  Id = 1
  Code = resource
  Display = Resource
  Definition = The context is all elements matching a particular resource element path.

 -- Row 2 -----------------------------------
  Id = 2
  Code = datatype
  Display = Datatype
  Definition = The context is all nodes matching a particular data type element path (root or repeating element) or all elements referencing a particular primitive data type (expressed as the datatype name).

 -- Row 3 -----------------------------------
  Id = 4
  Code = extension
  Display = Extension
  Definition = The context is a particular extension from a particular profile, a uri that identifies the extension definition.

=== Sheet type-derivation-rule =====================================

 -- Row 1 -----------------------------------
  Id = 1
  Code = specialization
  Display = Specialization
  Definition = This definition defines a new type that adds additional elements to the base type

 -- Row 2 -----------------------------------
  Id = 2
  Code = constraint
  Display = Constraint
  Definition = This definition adds additional rules to an existing concrete type

=== Sheet Invariants =====================================

 -- Row 1 -----------------------------------
  Id = 1
  Context = StructureDefinition
  English = Element paths must be unique unless the structure is a constraint
  XPath = (f:derivation/@value = \'constraint\') or (count(f:snapshot/f:element) = count(distinct-values(f:snapshot/f:element/f:path/@value)))
  Expression = derivation = \'constraint\' or snapshot.element.select(path).isDistinct()

 -- Row 2 -----------------------------------
  Id = 2
  Context = StructureDefinition.mapping
  English = Must have at least a name or a uri (or both)
  XPath = exists(f:uri) or exists(f:name)
  Expression = name.exists() or uri.exists()

 -- Row 3 -----------------------------------
  Id = 3
  Context = StructureDefinition.snapshot
  English = Each element definition in a snapshot must have a formal definition and cardinalities
  XPath = count(f:element) = count(f:element[exists(f:definition) and exists(f:min) and exists(f:max)])
  Expression = element.all(definition and min and max)

 -- Row 4 -----------------------------------
  Id = 4
  Requirements = Ensure that the base types are abstract
  Context = StructureDefinition
  English = If the structure is not abstract, then there SHALL be a baseDefinition
  XPath = (f:abstract/@value=true()) or exists(f:baseDefinition)
  Expression = abstract = true or baseDefinition.exists()

 -- Row 5 -----------------------------------
  Id = 5
  Context = StructureDefinition
  English = If the structure defines an extension then the structure must have context information
  XPath = not(f:type/@value = \'extension\') or (f:derivation/@value = \'specialization\') or (exists(f:context) and exists(f:contextType))
  Expression = type != \'Extension\' or derivation = \'specialization\' or (context.exists() and contextType.exists())

 -- Row 6 -----------------------------------
  Id = 6
  Context = StructureDefinition
  English = A structure must have either a differential, or a snapshot (or both)
  XPath = exists(f:snapshot) or exists(f:differential)
  Expression = snapshot.exists() or differential.exists()

 -- Row 7 -----------------------------------
  Id = 7
  Context = StructureDefinition
  English = If the structure describes a base Resource or Type, the URL has to start with \"http://hl7.org/fhir/StructureDefinition/\" and the tail must match the id
  XPath = (f:derivation/@value = \'constraint\') or (f:kind/@value = \'logical\') or (f:url/@value=concat(\'http://hl7.org/fhir/StructureDefinition/\', f:id/@value))
  Expression = (derivation = \'constraint\') or (kind = \'logical\') or (url = \'http://hl7.org/fhir/StructureDefinition/\'+id)

 -- Row 8 -----------------------------------
  Id = 8
  Context = StructureDefinition.snapshot
  English = In any snapshot, all the elements must be in the specified type
  XPath = f:element[1]/f:path/@value=parent::f:StructureDefinition/f:type/@value and count(f:element[position()!=1])=count(f:element[position()!=1][starts-with(f:path/@value, concat(ancestor::f:StructureDefinition/f:type/@value, \'.\'))])
  Expression = element.first().path = %resource.type and element.tail().all(path.startsWith(%resource.type&\'.\'))

 -- Row 9 -----------------------------------
  Id = 8a
  Context = StructureDefinition.differential
  English = In any differential, all the elements must be in the specified type
  XPath = count(f:element)=count(f:element[f:path/@value=ancestor::f:StructureDefinition/f:type/@value or starts-with(f:path/@value, concat(ancestor::f:StructureDefinition/f:type/@value, \'.\'))])
  Expression = element.first().path.startsWith(%resource.type) and element.tail().all(path.startsWith(%resource.type&\'.\'))

 -- Row 10 -----------------------------------
  Id = 9
  Requirements = Because these 3 fields seem to be have overlapping meaning with the ones in the root of StructureDefinition
  Context = StructureDefinition
  English = In any snapshot or differential, no label, code or requirements on the an element without a \".\" in the path (e.g. the first element)
  XPath = not(exists(f:snapshot/f:element[not(contains(f:path/@value, \'.\')) and (f:label or f:code or f:requirements)])) and not(exists(f:differential/f:element[not(contains(f:path/@value, \'.\')) and (f:label or f:code or f:requirements)]))
  Expression = children().element.first().label.empty() and children().element.first().code.empty() and children().element.first().requirements.empty()

 -- Row 11 -----------------------------------
  Id = 11
  Requirements = Ensure that the type is not inconsistent with the other information in the structure
  Context = StructureDefinition
  English = If there\'s a type, its content must match the path name in the first element of a snapshot
  XPath = not(exists(f:snapshot)) or (f:type/@value = f:snapshot/f:element[1]/f:path/@value)
  Expression = snapshot.empty() or snapshot.element.first().path = type

 -- Row 12 -----------------------------------
  Id = 12
  Requirements = Ensure that element.base appears with base or not
  Context = StructureDefinition
  English = element.base cannot appear if there is no base on the structure definition
  XPath = f:baseDefinition or not(exists(f:snapshot/f:element/f:base) or exists(f:differential/f:element/f:base))
  Expression = snapshot.exists() implies (snapshot.element.base.exists() = baseDefinition.exists())

 -- Row 13 -----------------------------------
  Id = 14
  Requirements = elements have id
  Context = StructureDefinition
  English = All element definitions must have an id
  XPath = count(*/f:element)=count(*/f:element/@id)
  Expression = snapshot.element.all(id.exists()) and differential.element.all(id.exists())

 -- Row 14 -----------------------------------
  Id = 15
  Requirements = No Type on the root element (snapshot)
  Context = StructureDefinition.snapshot
  English = The first element in a snapshot has no type
  XPath = not(f:element[1]/f:type)
  Expression = element.first().type.empty()

 -- Row 15 -----------------------------------
  Id = 15a
  Requirements = No Type on the root element (differential)
  Context = StructureDefinition.differential
  English = If the first element in a differential has no \".\" in the path, it has no type
  XPath = not(f:element[1][not(contains(f:path/@value, \'.\'))]/f:type)
  Expression = element.first().path.contains(\'.\').not() implies element.first().type.empty()

 -- Row 16 -----------------------------------
  Id = 16
  Requirements = element ids need to be unique
  Context = StructureDefinition
  English = All element definitions must have unique ids (snapshot)
  XPath = count(*/f:element)=count(*/f:element/@id)
  Expression = snapshot.element.id.trace(\'ids\').isDistinct()

 -- Row 17 -----------------------------------
  Id = 17
  Requirements = element ids need to be unique
  Context = StructureDefinition
  English = All element definitions must have unique ids (diff)
  XPath = count(*/f:element)=count(*/f:element/@id)
  Expression = differential.element.id.trace(\'ids\').isDistinct()

 -- Row 18 -----------------------------------
  Id = 18
  Requirements = contextInvariant
  Context = StructureDefinition
  English = Context Invariants can only be used for extensions
  XPath = not(exists(f:contextInvariant)) or (f:type/@value = \'Extension\')
  Expression = contextInvariant.exists() implies type = \'Extension\'

 -- Row 19 -----------------------------------
  Id = 19
  Requirements = custom types only in logical models
  Context = StructureDefinition
  English = Custom types can only be used in logical models
  XPath = f:kind/@value = \'logical\' or count(f:differential/f:element/f:type/f:code[@value and not(matches(string(@value), \'^[a-zA-Z0-9]+$\'))]|f:snapshot/f:element/f:type/f:code[@value and not(matches(string(@value), \'^[a-zA-Z0-9]+$\'))]) =0
  Expression = kind = \'logical\' or (differential.element.type.code.all(hasValue() implies matches(\'^[a-zA-Z0-9]+$\')) and snapshot.element.type.code.all(hasValue() implies matches(\'^[a-zA-Z0-9]+$\')))

 -- Row 20 -----------------------------------
  Id = 20
  Requirements = no slicing on root
  Context = StructureDefinition.differential
  English = No slicing on the root element
  XPath = not(f:element[1]/f:slicing)
  Expression = element.first().slicing.empty()

=== Sheet Data Elements =====================================

 -- Row 1 -----------------------------------
  Element = StructureDefinition
  Aliases = Template, Profile
  UML = 0;0
  Type = MetadataResource
  Short Name = Structural Definition
  Definition = A definition of a FHIR structure. This resource is used to describe the underlying resources, data types defined in FHIR, and also for describing extensions and constraints on resources and data types.
  RIM Mapping = n/a
  w5 = conformance.content

 -- Row 2 -----------------------------------
  Element = StructureDefinition.url
  gForge = 3265
  Card. = 1..1
  Aliases = url, authoritative-url, destination, identity

 -- Row 3 -----------------------------------
  Element = StructureDefinition.identifier
  Card. = 0..*
  11179 Mapping = Identifier part

 -- Row 4 -----------------------------------
  Element = StructureDefinition.version
  11179 Mapping = Version

 -- Row 5 -----------------------------------
  Element = StructureDefinition.name
  Card. = 1..1

 -- Row 6 -----------------------------------
  Element = StructureDefinition.title
  Card. = 0..1
  Comments = & Applications don\'t have to use this name, but can always fall back to it. The title also corresponds to the label for the root element

 -- Row 7 -----------------------------------
  Element = StructureDefinition.status
  11179 Mapping = Registration status

 -- Row 8 -----------------------------------
  Element = StructureDefinition.experimental
  11179 Mapping = Registration status

 -- Row 9 -----------------------------------
  Element = StructureDefinition.date

 -- Row 10 -----------------------------------
  Element = StructureDefinition.publisher
  11179 Mapping = Registration Authority

 -- Row 11 -----------------------------------
  Element = StructureDefinition.contact
  UML = 400;0

 -- Row 12 -----------------------------------
  Element = StructureDefinition.description

 -- Row 13 -----------------------------------
  Element = StructureDefinition.useContext

 -- Row 14 -----------------------------------
  Element = StructureDefinition.jurisdiction

 -- Row 15 -----------------------------------
  Element = StructureDefinition.purpose

 -- Row 16 -----------------------------------
  Element = StructureDefinition.copyright

 -- Row 17 -----------------------------------
  Element = StructureDefinition.keyword
  Card. = 0..*
  Summary = y
  Type = Coding
  Binding = StructureDefinitionCode
  Short Name = Assist with indexing and finding
  Definition = A set of key words or terms from external terminologies that may be used to assist with indexing and searching of templates.
  Requirements = Assist in searching for appropriate StructureDefinitions
  11179 Mapping = keywords

 -- Row 18 -----------------------------------
  Element = StructureDefinition.fhirVersion
  Card. = 0..1
  Summary = y
  Type = id
  Short Name = FHIR Version this StructureDefinition targets
  Definition = The version of the FHIR specification on which this StructureDefinition is based - this is the formal version of the specification, without the revision number, e.g. [publication].[major].[minor], which is $version$ for this version
  Comments = A StructureDefinition does not need to specify the target it applies to,as StructureDefinitions will often be valid across multiple versions of FHIR. FHIR tooling can determine whether a StructureDefinition is consistent with a particular StructureDefinition if desired

 -- Row 19 -----------------------------------
  Element = StructureDefinition.mapping
  Card. = 0..*
  UML = 410;80
  Short Name = External specification that the content is mapped to
  Definition = An external specification that the content is mapped to

 -- Row 20 -----------------------------------
  Element = StructureDefinition.mapping.identity
  Card. = 1..1
  Type = id
  Short Name = Internal id when this mapping is used
  Definition = An Internal id that is used to identify this mapping set when specific mappings are made
  Comments = The specification is described once, with general comments, and then specific mappings are made that reference this declaration

 -- Row 21 -----------------------------------
  Element = StructureDefinition.mapping.uri
  Card. = 0..1
  Inv. = 2
  Type = uri
  Short Name = Identifies what this mapping refers to
  Definition = An absolute URI that identifies the specification that this mapping is expressed to
  Comments = A formal identity for the specification being mapped to helps with identifying maps consistently

 -- Row 22 -----------------------------------
  Element = StructureDefinition.mapping.name
  Card. = 0..1
  Inv. = 2
  Type = string
  Short Name = Names what this mapping refers to
  Definition = A name for the specification that is being mapped to

 -- Row 23 -----------------------------------
  Element = StructureDefinition.mapping.comment
  Card. = 0..1
  Type = string
  Short Name = Versions, Issues, Scope limitations etc.
  Definition = Comments about this mapping, including version notes, issues, scope limitations, and other important notes for usage

 -- Row 24 -----------------------------------
  Element = StructureDefinition.kind
  Card. = 1..1
  Summary = Y
  Type = code
  Binding = StructureDefinitionKind
  Short Name = primitive-type | complex-type | resource | logical
  Definition = Defines the kind of structure that this definition is describing

 -- Row 25 -----------------------------------
  Element = StructureDefinition.abstract
  Card. = 1..1
  Summary = Y
  Type = boolean
  Short Name = Whether the structure is abstract
  Definition = Whether structure this definition describes is abstract or not  - that is, whether the structure is not intended to be instantiated. For Resources and Data types, abstract types will never be exchanged  between systems
  Comments = Abstract Resources cannot be instantiated - a concrete sub-type must be used. Abstract datatypes and extensions cannot be used in an instance. For logical models, the exact implication of \"abstract\" will rest with the author, depending how the logical model is used. Flagging a constraint structure as abstract conveys design intent but makes no difference to how the structure definition is handled. Note that inline declared elements that are given the type \"Element\" in the profile, but have children described, are anonymous concrete types that specialise Element

 -- Row 26 -----------------------------------
  Element = StructureDefinition.contextType
  Card. = 0..1
  Summary = Y
  Inv. = 5
  Type = code
  Binding = ExtensionContext
  Short Name = resource | datatype | extension
  Definition = If this is an extension, Identifies the context within FHIR resources where the extension can be used

 -- Row 27 -----------------------------------
  Element = StructureDefinition.context
  Card. = 0..*
  Summary = Y
  Inv. = 5
  Type = string
  Short Name = Where the extension can be used in instances
  Definition = Identifies the types of resource or data type elements to which the extension can be applied
  Comments = If the context is an element that can have multiple types, then use (e.g.) value[x] if the extension works on all choice types, or otherwise an enumeration of explicitly named elements if not. Note that a context of \"string\" doesn\'t mean that the extension can be used with one of the string patterns such as \"id\" etc.

 -- Row 28 -----------------------------------
  Element = StructureDefinition.contextInvariant
  Card. = 0..*
  Summary = y
  Inv. = 18
  Type = string
  Short Name = FHIRPath invariants - when the extension can be used
  Definition = A set of rules as Fluent Invariants about when the extension can be used (e.g. co-occurrence variants for the extension)
  Comments = All the rules must be true. When evaluating the invariant, the fluentpath focus is the element that holds the extension, and %extension refers to the extension itself

 -- Row 29 -----------------------------------
  Element = StructureDefinition.type
  Card. = 1..1
  Summary = Y
  Inv. = 4,11
  Type = code
  Binding = FHIRDefinedTypeExt
  Short Name = Type defined or constrained by this structure
  Definition = The type this structure describes. If the derivation kind is \'specialization\' then this is the master definition for a type, and there is always one of these (a data type, an extension, a resource, including abstract ones). Otherwise the structure definition is a constraint on the stated type (and in this case, the type cannot be an abstract type)
  Comments = Note that in the case of constraints, the type could be determined by chasing through the baseDefinition references until a concrete structure (derivation = specialization) is reached, or by looking at the path of the first element in the snapshot - if present - but providing the type directly makes for simpler tooling and indexing

 -- Row 30 -----------------------------------
  Element = StructureDefinition.baseDefinition
  Card. = 0..1
  Summary = Y
  Inv. = 4
  Type = uri
  Short Name = Definition that this type is constrained/specialized from
  Definition = An absolute URI that is the base structure from which this type is derived, either by specialization or constraint
  Comments = If differential constraints are specified in this structure, they are applied to the base in a \"differential\" fashion. If there is no base, then the differential constraints cannot be provided (snapshot only). Differential structures are useful for the editing perspective, and snapshot structures are suitable for operational use. The FHIR Project provides a number of tools/services to populate snapshots from differential constraints. Logical Models have a base of \"Element\" or another logical model

 -- Row 31 -----------------------------------
  Element = StructureDefinition.derivation
  Card. = 0..1
  Summary = y
  Inv. = 12
  Type = code
  Binding = TypeDerivationRule
  Short Name = specialization | constraint - How relates to base definition
  Definition = How the type relates to the baseDefinition.
  Comments = If the definition is a specialization, then it adds new elements in the differential, and the snapshot includes the inherited elements.\n\nIf the definition is a constraint, then it can not define new elements, it can only make new rules about existing content (see [Profiling Resources](profiling.html#resources))

 -- Row 32 -----------------------------------
  Element = StructureDefinition.snapshot
  Card. = 0..1
  UML = 400;190
  Inv. = 6
  Short Name = Snapshot view of the structure
  Definition = A snapshot view is expressed in a stand alone form that can be used and interpreted without considering the base StructureDefinition

 -- Row 33 -----------------------------------
  Element = StructureDefinition.snapshot.element
  Card. = 1..*
  Inv. = 3
  Type = ElementDefinition
  Short Name = Definition of elements in the resource (if no StructureDefinition)
  Definition = Captures constraints on each element within the resource
  11179 Mapping = --

 -- Row 34 -----------------------------------
  Element = StructureDefinition.differential
  Card. = 0..1
  UML = 400;270
  Inv. = 6
  Short Name = Differential view of the structure
  Definition = A differential view is expressed relative to the base StructureDefinition - a statement of differences that it applies

 -- Row 35 -----------------------------------
  Element = StructureDefinition.differential.element
  Card. = 1..*
  Type = ElementDefinition
  Short Name = Definition of elements in the resource (if no StructureDefinition)
  Definition = Captures constraints on each element within the resource
  11179 Mapping = --

 -- Row 36 -----------------------------------
  Element = !StructureDefinition.searchParam
  Card. = 0..*
  UML = 400;0
  Short Name = Additional Search params defined by this StructureDefinition
  Definition = Additional search parameters defined for this structure that implementations can support and/or make use of

 -- Row 37 -----------------------------------
  Element = !StructureDefinition.searchParam.name
  Card. = 1..1
  Inv. = 3
  Type = string
  Short Name = Name of search parameter
  Definition = The name of the standard or custom search parameter
  Requirements = Parameter names cannot overlap with standard parameter names, and standard parameters cannot be redefined

 -- Row 38 -----------------------------------
  Element = !StructureDefinition.searchParam.type
  Card. = 1..1
  Type = code
  Binding = SearchParamType
  Short Name = number | date | string | token | reference | composite | quantity
  Definition = The type of value a search parameter refers to, and how the content is interpreted

 -- Row 39 -----------------------------------
  Element = !StructureDefinition.searchParam.documentation
  Card. = 1..1
  Type = string
  Short Name = Contents and meaning of search parameter
  Definition = A specification for search parameters. For standard parameters, provides additional information on how the parameter is used in this solution.  For custom parameters, provides a description of what the parameter does

 -- Row 40 -----------------------------------
  Element = !StructureDefinition.searchParam.xpath
  Card. = 0..1
  Type = string
  Short Name = XPath that extracts the parameter set
  Definition = An XPath expression that returns a set of elements for the search parameter
  Requirements = Note that the elements are sometimes complex elements where logic is required to determine quite how to handle them; e.g. CodeableConcepts may contain text and/or multiple codings, where the codings themselves contain a code and a system
  Comments = The XPath expression may use parent references, but this technique should be avoided except in the special case of an extension making rules about its use with other extensions. Parent references SHALL not refer to content outside the resouce that contains the content

 -- Row 41 -----------------------------------
  Element = !StructureDefinition.searchParam.target
  Card. = 0..*
  Type = code
  Binding = ResourceType
  Short Name = Types of resource (if a resource reference)
  Definition = Types of resource (if a resource is referenced)

=== Sheet Search =====================================

 -- Row 1 -----------------------------------
  Name = keyword
  Type = token
  Description = A code for the profile
  Path = StructureDefinition.keyword

 -- Row 2 -----------------------------------
  Name = valueset
  Type = reference
  Description = A vocabulary binding reference
  Path = StructureDefinition.snapshot.element.binding.valueSet[x]

 -- Row 3 -----------------------------------
  Name = type
  Type = token
  Path = StructureDefinition.type

 -- Row 4 -----------------------------------
  Name = kind
  Type = token
  Path = StructureDefinition.kind

 -- Row 5 -----------------------------------
  Name = path
  Type = token
  Description = A path that is constrained in the profile
  Path = StructureDefinition.snapshot.element.path | StructureDefinition.differential.element.path

 -- Row 6 -----------------------------------
  Name = experimental
  Type = token
  Path = StructureDefinition.experimental

 -- Row 7 -----------------------------------
  Name = abstract
  Type = token
  Path = StructureDefinition.abstract

 -- Row 8 -----------------------------------
  Name = context-type
  Type = token
  Path = StructureDefinition.contextType

 -- Row 9 -----------------------------------
  Name = ext-context
  Type = string
  Path = StructureDefinition.context

 -- Row 10 -----------------------------------
  Name = base
  Type = uri
  Path = StructureDefinition.baseDefinition

 -- Row 11 -----------------------------------
  Name = base-path
  Type = token
  Path = StructureDefinition.snapshot.element.base.path | StructureDefinition.differential.element.base.path

 -- Row 12 -----------------------------------
  Name = derivation
  Type = token
  Path = StructureDefinition.derivation

=== Sheet Profiles =====================================

 -- Row 1 -----------------------------------
  Name = StructureDefinition.extensions
  IG Name = core
  Filename = structuredefinition-extensions.xml
  Type = spreadsheet

=== Sheet Examples =====================================

=== Sheet Examples =====================================

 -- Row 1 -----------------------------------
  Name = questionnaire
  Use = Resource | Instance
  Documentation = Generates a [[[Questionnaire]]] instance  based on a specified [[[StructureDefinition]]], creating questions for each core element or extension element found in the [[[StructureDefinition]]].    If the operation is not called at the instance level, one of the *identifier*, *profile* or *url* \'in\' parameters must be provided. If more than one is specified, servers may raise an error or may resolve with the parameter of their choice. If called at the instance level, these parameters will be ignored. The response will contain a [[[Questionnaire]]] instance based on the specified [[[StructureDefinition]]] and/or an [[[OperationOutcome]]] resource with errors or warnings.  Nested groups are used to handle complex structures and data types.  If the \'supportedOnly\' parameter is set to true, only those elements marked as \"must support\" will be included.  This operation is intended to enable auto-generation of simple interfaces for arbitrary profiles.  The \'questionnaire\' approach to data entry has limitations that will make it less optimal than custom-defined interfaces.  However, this function may be useful for simple applications or for systems that wish to support \"non-core\" resources with minimal development effort.
  Type = operation
  Example.Request = $questionnaire-request.txt
  Example.Response = $questionnaire-response.txt
  Title = Build Questionnaire
  Footer = **Open Issue**: Ideally, extensions should be populated in the generated [[[Questionnaire]]] that will support taking [[[QuestionnaireResponse]]] resources generated from the Questionnaire and turning them back into the appropriate resources.
  Idempotent = True

 -- Row 2 -----------------------------------
  Name = questionnaire.identifier
  Use = in
  Documentation = A logical profile identifier (i.e. \'StructureDefinition.identifier\'\'). The server must know the profile or be able to retrieve it from other known repositories.
  Type = uri
  Min = 0
  Max = 1

 -- Row 3 -----------------------------------
  Name = questionnaire.profile
  Use = in
  Documentation = The [[[StructureDefinition]]] is provided directly as part of the request. Servers may choose not to accept profiles in this fashion
  Type = string
  Search Type = token
  Min = 0
  Max = 1

 -- Row 4 -----------------------------------
  Name = questionnaire.url
  Use = in
  Documentation = The profile\'s official URL (i.e. \'StructureDefinition.url\'). The server must know the profile or be able to retrieve it from other known repositories.
  Type = uri
  Min = 0
  Max = 1

 -- Row 5 -----------------------------------
  Name = questionnaire.supportedOnly
  Use = in
  Documentation = If true, the questionnaire will only include those elements marked as \"mustSupport=\'true\'\" in the StructureDefinition.
  Type = boolean
  Min = 0
  Max = 1

 -- Row 6 -----------------------------------
  Name = questionnaire.return
  Use = out
  Documentation = The questionnaire form generated based on the StructureDefinition.
  Type = Questionnaire
  Min = 1
  Max = 1
