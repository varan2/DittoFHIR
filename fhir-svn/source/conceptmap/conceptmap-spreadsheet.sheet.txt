
=== Sheet Bindings =====================================

 -- Row 1 -----------------------------------
  Binding Name = ConceptMapGroupUnmappedMode
  Binding = code list
  Reference = #conceptmap-unmapped-mode
  Definition = Defines which action to take if there is no match in the group.
  Conformance = required

=== Sheet conceptmap-unmapped-mode =====================================

 -- Row 1 -----------------------------------
  Id = 1
  Code = provided
  Display = Provided Code
  Definition = Use the code as provided in the $translate request

 -- Row 2 -----------------------------------
  Id = 2
  Code = fixed
  Display = Fixed Code
  Definition = Use the code explicitly provided in the group.unmapped

 -- Row 3 -----------------------------------
  Id = 3
  Code = other-map
  Display = Other Map
  Definition = Use the map identified by the canonical URL in URL

=== Sheet Invariants =====================================

 -- Row 1 -----------------------------------
  Id = 1
  Context = ConceptMap.group.element.target
  English = If the map is narrower or inexact, there SHALL be some comments
  XPath = exists(f:comment) or not(exists(f:equivalence)) or ((f:equivalence/@value != \'narrower\') and (f:equivalence/@value != \'inexact\'))
  Expression = comment.exists() or equivalence.empty() or ((equivalence != \'narrower\') and (equivalence != \'inexact\'))
  Severity = error

 -- Row 2 -----------------------------------
  Id = 2
  Context = ConceptMap.group.unmapped
  English = If the mode is \'fixed\', a code must be provided
  XPath = (f:mode/@value != \'fixed\') or exists(f:code)
  Expression = (mode = \'fixed\') implies code.exists()
  Severity = error

 -- Row 3 -----------------------------------
  Id = 3
  Context = ConceptMap.group.unmapped
  English = If the mode is \'other-map\', a code must be provided
  XPath = (f:mode/@value != \'other-map\') or exists(f:url)
  Expression = (mode = \'other-map\') implies url.exists()
  Severity = error

=== Sheet Data Elements =====================================

 -- Row 1 -----------------------------------
  Element = ConceptMap
  UML = 0;0
  Type = MetadataResource
  Short Name = A map from one set of concepts to one or more other concepts
  Definition = A statement of relationships from one set of concepts to one or more other concepts - either code systems or data elements, or classes in class models
  RIM Mapping = N/A
  w5 = conformance.terminology

 -- Row 2 -----------------------------------
  Element = ConceptMap.url

 -- Row 3 -----------------------------------
  Element = ConceptMap.identifier
  Card. = 0..1

 -- Row 4 -----------------------------------
  Element = ConceptMap.version

 -- Row 5 -----------------------------------
  Element = ConceptMap.name

 -- Row 6 -----------------------------------
  Element = ConceptMap.title

 -- Row 7 -----------------------------------
  Element = ConceptMap.status

 -- Row 8 -----------------------------------
  Element = ConceptMap.experimental

 -- Row 9 -----------------------------------
  Element = ConceptMap.date

 -- Row 10 -----------------------------------
  Element = ConceptMap.publisher

 -- Row 11 -----------------------------------
  Element = ConceptMap.contact

 -- Row 12 -----------------------------------
  Element = ConceptMap.description
  Comments = The description is not intended to describe the semantics of the concept map. The description should capture its intended use, which is needed for ensuring integrity for its use in models across future changes.
  RIM Mapping = N/A

 -- Row 13 -----------------------------------
  Element = ConceptMap.useContext

 -- Row 14 -----------------------------------
  Element = ConceptMap.jurisdiction

 -- Row 15 -----------------------------------
  Element = ConceptMap.purpose

 -- Row 16 -----------------------------------
  Element = ConceptMap.copyright
  Comments = & Frequently, the copyright differs between the concept map, and codes that are included. The copyright statement should clearly differentiate between these when required

 -- Row 17 -----------------------------------
  Element = ConceptMap.source[x]
  Card. = 0..1
  Summary = Y
  Type = uri | Reference(ValueSet)
  Short Name = Identifies the source of the concepts which are being mapped
  Definition = The source value set that specifies the concepts that are being mapped
  Comments = Should be a version specific reference. URIs SHOULD be absolute. If there is no source or target value set, the is no specified context for the map

 -- Row 18 -----------------------------------
  Element = ConceptMap.target[x]
  Card. = 0..1
  Summary = Y
  Type = uri | Reference(ValueSet)
  Short Name = Provides context to the mappings
  Definition = The target value set provides context to the mappings. Note that the mapping is made between concepts, not between value sets, but the value set provides important context about how the concept mapping choices are made
  Comments = Should be a version specific reference. URIs SHOULD be absolute. If there is no source or target value set, the is no specified context for the map

 -- Row 19 -----------------------------------
  Element = ConceptMap.group
  Card. = 0..*
  UML = 380;0
  Short Name = Same source and target systems
  Definition = A group of mappings that all have the same source and target system

 -- Row 20 -----------------------------------
  Element = ConceptMap.group.source
  Card. = 0..1
  Type = uri
  Short Name = Code System (if value set crosses code systems)
  Definition = An absolute URI that identifies the Code System (if the source is a value set that crosses more than one code system)

 -- Row 21 -----------------------------------
  Element = ConceptMap.group.sourceVersion
  Card. = 0..1
  Type = string
  Short Name = Specific version of the  code system
  Definition = The specific version of the code system, as determined by the code system authority
  Comments = The specification of a particular code system version may be required for code systems which lack concept permanence

 -- Row 22 -----------------------------------
  Element = ConceptMap.group.target
  Card. = 0..1
  Type = uri
  Short Name = System of the target (if necessary)
  Definition = An absolute URI that identifies the code system of the target code (if the target is a value set that cross code systems)
  Comments = Target may be omitted if all the targget element equivalence values are \'unmatched\'

 -- Row 23 -----------------------------------
  Element = ConceptMap.group.targetVersion
  Card. = 0..1
  Type = string
  Short Name = Specific version of the  code system
  Definition = The specific version of the code system, as determined by the code system authority
  Comments = The specification of a particular code system version may be required for code systems which lack concept permanence

 -- Row 24 -----------------------------------
  Element = ConceptMap.group.element
  Card. = 1..*
  Aliases = code, concept, item
  UML = 380;180
  Type = =SourceElement
  Short Name = Mappings for a concept from the source set
  Definition = Mappings for an individual concept in the source to one or more concepts in the target
  Comments = Generally, the ideal is that there would only be one mapping for each concept in the source value set, but a given concept may be mapped multiple times with different comments or dependencies

 -- Row 25 -----------------------------------
  Element = ConceptMap.group.element.code
  Card. = 0..1
  Type = code
  Binding = !
  Short Name = Identifies element being mapped
  Definition = Identity (code or path) or the element/item being mapped

 -- Row 26 -----------------------------------
  Element = ConceptMap.group.element.display
  Card. = 0..1
  Type = string
  Short Name = Display for the code
  Definition = The display for the code. The display is only provided to help editors when editing the concept map
  Comments = The display is ignored when processing the map

 -- Row 27 -----------------------------------
  Element = ConceptMap.group.element.target
  Card. = 0..*
  UML = 520;20
  Type = =TargetElement
  Short Name = Concept in target system for element
  Definition = A concept from the target value set that this concept maps to
  Comments = Ideally there would only be one map, with equal or equivalent mapping. But multiple maps are allowed for several narrower options, or to assert that other concepts are unmatched

 -- Row 28 -----------------------------------
  Element = ConceptMap.group.element.target.code
  Card. = 0..1
  Type = code
  Binding = !
  Short Name = Code that identifies the target element
  Definition = Identity (code or path) or the element/item that the map refers to

 -- Row 29 -----------------------------------
  Element = ConceptMap.group.element.target.display
  Card. = 0..1
  Type = string
  Short Name = Display for the code
  Definition = The display for the code. The display is only provided to help editors when editing the concept map
  Comments = The display is ignored when processing the map

 -- Row 30 -----------------------------------
  Element = ConceptMap.group.element.target.equivalence
  Card. = 0..1
  Is Modifier = Yes
  Type = code
  Binding = ConceptMapEquivalence
  Short Name = relatedto | equivalent | equal | wider | subsumes | narrower | specializes | inexact | unmatched | disjoint
  Definition = The equivalence between the source and target concepts (counting for the dependencies and products). The equivalence is read from target to source (e.g. the target is \'wider\' than the source)
  Comments = This element is labeled as a modifier because it may indicate that a target does not apply
  Default Value = equivalent

 -- Row 31 -----------------------------------
  Element = ConceptMap.group.element.target.comment
  Card. = 0..1
  Inv. = 1
  Type = string
  Short Name = Description of status/issues in mapping
  Definition = A description of status/issues in mapping that conveys additional information not represented in  the structured data

 -- Row 32 -----------------------------------
  Element = ConceptMap.group.element.target.dependsOn
  Card. = 0..*
  UML = 580;200
  Type = =OtherElement
  Short Name = Other elements required for this mapping (from context)
  Definition = A set of additional dependencies for this mapping to hold. This mapping is only applicable if the specified element can be resolved, and it has the specified value

 -- Row 33 -----------------------------------
  Element = ConceptMap.group.element.target.dependsOn.property
  Card. = 1..1
  Type = uri
  Short Name = Reference to property mapping depends on
  Definition = A reference to an element that holds a coded value that corresponds to a code system property. The idea is that the information model carries an element somwhere that is labeled to correspond with a code system property

 -- Row 34 -----------------------------------
  Element = ConceptMap.group.element.target.dependsOn.system
  Card. = 0..1
  Type = uri
  Short Name = Code System (if necessary)
  Definition = An absolute URI that identifies the code system of the dependency code (if the source/dependency is a value set that crosses code systems)
  Missing Meaning = The code is in the source (dependsOn) or target (product) system

 -- Row 35 -----------------------------------
  Element = ConceptMap.group.element.target.dependsOn.code
  Card. = 1..1
  Type = string
  Short Name = Value of the referenced element
  Definition = Identity (code or path) or the element/item/ValueSet that the map depends on / refers to

 -- Row 36 -----------------------------------
  Element = ConceptMap.group.element.target.dependsOn.display
  Card. = 0..1
  Type = string
  Short Name = Display for the code
  Definition = The display for the code. The display is only provided to help editors when editing the concept map
  Comments = The display is ignored when processing the map

 -- Row 37 -----------------------------------
  Element = ConceptMap.group.element.target.product
  Card. = 0..*
  Type = @ConceptMap.group.element.target.dependsOn
  Short Name = Other concepts that this mapping also produces
  Definition = A set of additional outcomes from this mapping to other elements. To properly execute this mapping, the specified element must be mapped to some data element or source that is in context. The mapping may still be useful without a place for the additional data elements, but the equivalence cannot be relied on

 -- Row 38 -----------------------------------
  Element = ConceptMap.group.unmapped
  Card. = 0..1
  UML = 150;300
  Short Name = When no match in the mappings
  Definition = What to do when there is no match in the mappings in the group
  Comments = This only applies if the source code is in the system defined for the group

 -- Row 39 -----------------------------------
  Element = ConceptMap.group.unmapped.mode
  Card. = 1..1
  Type = code
  Binding = ConceptMapGroupUnmappedMode
  Short Name = provided | fixed | other-map
  Definition = Defines which action to take if there is no match in the group. One of 3 actions is possible: use the unmapped code (this is useful when doing a mapping between versions, and only a few codes have changed), use a fixed code (a default code), or alternatively, a reference to a different concept map can be provided (by canonical URL)

 -- Row 40 -----------------------------------
  Element = ConceptMap.group.unmapped.code
  Card. = 0..1
  Type = code
  Binding = !
  Short Name = Fixed code when mode = fixed
  Definition = The fixed code to use when the mode = \'fixed\'  - all unmapped codes are mapped to a single fixed code

 -- Row 41 -----------------------------------
  Element = ConceptMap.group.unmapped.display
  Card. = 0..1
  Type = string
  Short Name = Display for the code
  Definition = The display for the code. The display is only provided to help editors when editing the concept map
  Comments = The display is ignored when processing the map

 -- Row 42 -----------------------------------
  Element = ConceptMap.group.unmapped.url
  Card. = 0..1
  Type = uri
  Short Name = Canonical URL for other concept map
  Definition = The canonical URL of the map to use if this map contains no mapping

=== Sheet Search =====================================

 -- Row 1 -----------------------------------
  Name = source
  Type = reference
  Path = ConceptMap.sourceReference

 -- Row 2 -----------------------------------
  Name = source-uri
  Type = reference
  Path = ConceptMap.sourceUri

 -- Row 3 -----------------------------------
  Name = target
  Type = reference
  Path = ConceptMap.targetReference

 -- Row 4 -----------------------------------
  Name = target-uri
  Type = reference
  Path = ConceptMap.targetUri

 -- Row 5 -----------------------------------
  Name = source-system
  Type = uri
  Path = ConceptMap.group.source

 -- Row 6 -----------------------------------
  Name = target-system
  Type = uri
  Path = ConceptMap.group.target

 -- Row 7 -----------------------------------
  Name = source-code
  Type = token
  Path = ConceptMap.group.element.code

 -- Row 8 -----------------------------------
  Name = target-code
  Type = token
  Path = ConceptMap.group.element.target.code

 -- Row 9 -----------------------------------
  Name = dependson
  Type = uri
  Path = ConceptMap.group.element.target.dependsOn.property

 -- Row 10 -----------------------------------
  Name = product
  Type = uri
  Path = ConceptMap.group.element.target.product.property

 -- Row 11 -----------------------------------
  Name = other
  Type = uri
  Path = ConceptMap.group.unmapped.url

=== Sheet Profiles =====================================

 -- Row 1 -----------------------------------
  Name = CodeSystem Extensions
  IG Name = core
  Filename = conceptmap-extensions.xml
  Type = spreadsheet

=== Sheet Examples =====================================

 -- Row 1 -----------------------------------
  Name = General
  Identity = 101
  Description = General ConceptMap Example
  Filename = conceptmap-example.xml

 -- Row 2 -----------------------------------
  Name = SCT / ICD 10
  Identity = 103
  Description = SNOMED CT / ICD-10 mapping example
  Filename = conceptmap-103.xml

 -- Row 3 -----------------------------------
  Name = Specimen Type
  Identity = 102
  Description = Specimen Type v2 -> SNOMED CT Mapping
  Filename = conceptmap-example-specimen-type.xml

 -- Row 4 -----------------------------------
  Name = 2nd Example
  Identity = example2
  Description = Additional ConceptMap Example
  Filename = conceptmap-example-2.xml

=== Sheet Examples =====================================

 -- Row 1 -----------------------------------
  Name = translate
  Use = Resource | Instance
  Documentation = Translate a code from one value set to another, based on the existing value set and concept maps resources, and/or other additional knowledge available to the server. || One (and only one) of the in parameters (code, coding, codeableConcept) must be provided, to identify the code that is to be translated.  || The operation returns a set of parameters including a \'result\' for whether there is an acceptable match, and a list of possible matches. Note that the list of matches may include notes of codes for which mapping is specifically excluded, so implementers have to check the match.equivalence for each match
  Type = operation
  Example.Request = $translate-request.txt
  Example.Response = $translate-response.txt
  Title = Concept Translation
  Idempotent = True

 -- Row 2 -----------------------------------
  Name = translate.code
  Use = in
  Documentation = The code that is to be translated. If a code is provided, a system must be provided
  Type = code
  Min = 0
  Max = 1

 -- Row 3 -----------------------------------
  Name = translate.system
  Use = in
  Documentation = The system for the code that is to be translated
  Type = uri
  Min = 0
  Max = 1

 -- Row 4 -----------------------------------
  Name = translate.version
  Use = in
  Documentation = The version of the system, if one was provided in the source data
  Type = string
  Min = 0
  Max = 1

 -- Row 5 -----------------------------------
  Name = translate.source
  Use = in
  Documentation = Identifies the value set used when the concept (system/code pair) was chosen. May be a logical id, or an absolute or relative location. The source value set is an optional parameter because in some cases, the client cannot know what the source value set is. However, without a source value set, the server may be unable to safely identify an applicable concept map, and would return an error. For this reason, a source value set SHOULD always be provided. Note that servers may be able to identify an appropriate concept map without a source value set if there is a full mapping for the entire code system in the concept map, or by manual intervention
  Type = uri
  Min = 0
  Max = 1

 -- Row 6 -----------------------------------
  Name = translate.coding
  Use = in
  Documentation = A coding to translate
  Type = Coding
  Min = 0
  Max = 1

 -- Row 7 -----------------------------------
  Name = translate.codeableConcept
  Use = in
  Documentation = A full codeableConcept to validate. The server can translate any of the coding values (e.g. existing translations) as it chooses
  Type = CodeableConcept
  Min = 0
  Max = 1

 -- Row 8 -----------------------------------
  Name = translate.target
  Use = in
  Documentation = Identifies the value set in which a translation is sought. May be a logical id, or an absolute or relative location. If there\'s no target specified, the server should return all known translations, along with their source
  Type = uri
  Min = 0
  Max = 1

 -- Row 9 -----------------------------------
  Name = translate.targetsystem
  Use = in
  Documentation = identifies a target code system in which a mapping is sought. This parameter is an alternative to the target parameter - only one is required. Searching for any translation to a target code system irrespective of the context (e.g. target valueset) may lead to unsafe results, and it is at the discretion of the server to decide when to support this operation
  Type = uri
  Min = 0
  Max = 1

 -- Row 10 -----------------------------------
  Name = translate.dependency
  Use = in
  Documentation = Another element that may help produce the correct mapping
  Type = Tuple
  Min = 0
  Max = *

 -- Row 11 -----------------------------------
  Name = translate.dependency.element
  Documentation = The element for this dependency
  Type = uri
  Min = 0
  Max = 1

 -- Row 12 -----------------------------------
  Name = translate.dependency.concept
  Documentation = The value for this dependency
  Type = CodeableConcept
  Min = 0
  Max = 1

 -- Row 13 -----------------------------------
  Name = translate.reverse
  Use = in
  Documentation = if this is true, then the operation should return all the codes that might be mapped to this code. This parameter reverses the meaning of the source and target parameters
  Type = boolean
  Min = 0
  Max = 1

 -- Row 14 -----------------------------------
  Name = translate.result
  Use = out
  Documentation = True if the concept could be translated successfully. The value can only be true if at least one returned match has an equivalence which is not  unmatched or disjoint
  Type = boolean
  Min = 1
  Max = 1

 -- Row 15 -----------------------------------
  Name = translate.message
  Use = out
  Documentation = Error details, for display to a human. If this is provided when result = true, the message carries hints and warnings (e.g. a note that the matches could be improved by providing additional detail)
  Type = string
  Min = 0
  Max = 1

 -- Row 16 -----------------------------------
  Name = translate.match
  Use = out
  Documentation = A concept in the target value set with an equivalence. Note that there may be multiple matches of equal or differing equivalence, and the matches may include equivalence values that mean that there is no match
  Type = Tuple
  Min = 0
  Max = *

 -- Row 17 -----------------------------------
  Name = translate.match.equivalence
  Documentation = A code indicating the equivalence of the translation, using values from [ConceptMapEquivalence]{concept-map-equivalence.html}
  Type = code
  Min = 0
  Max = 1

 -- Row 18 -----------------------------------
  Name = translate.match.concept
  Documentation = The translation outcome. Note that this would never have userSelected = true, since the process of translations implies that the user is not selecting the code (and only the client could know differently)
  Type = Coding
  Min = 0
  Max = 1

 -- Row 19 -----------------------------------
  Name = translate.match.product
  Documentation = Another element that is the product of this mapping
  Type = Tuple
  Min = 0
  Max = *

 -- Row 20 -----------------------------------
  Name = translate.match.product.element
  Documentation = The element for this product
  Type = uri
  Min = 0
  Max = 1

 -- Row 21 -----------------------------------
  Name = translate.match.product.concept
  Documentation = The value for this product
  Type = Coding
  Min = 0
  Max = 1

 -- Row 22 -----------------------------------
  Name = translate.match.source
  Documentation = The canonical URI for the concept map from which this mapping comes from
  Type = uri
  Min = 0
  Max = 1

 -- Row 23 -----------------------------------
  Name = closure
  Use = System
  Documentation = This operation provides support for ongoing maintenance of a client-side [transitive closure table](https://en.wikipedia.org/wiki/Transitive_closure#In_graph_theory) based on server-side terminological logic. For details of how this is used, see [Maintaining a Closure Table](terminology-service.html#closure)
  Type = operation
  Example.Request = $closure-request.txt
  Example.Response = $closure-response.txt
  Title = Closure Table Maintenance
  Idempotent = False

 -- Row 24 -----------------------------------
  Name = closure.name
  Use = in
  Documentation = The name that defines the particular context for the subsumption based closure table
  Type = string
  Min = 1
  Max = 1

 -- Row 25 -----------------------------------
  Name = closure.concept
  Use = in
  Documentation = Concepts to add to the closure table
  Type = Coding
  Min = 0
  Max = *

 -- Row 26 -----------------------------------
  Name = closure.version
  Use = in
  Documentation = A request to resynchronise - request to send all new entries since the nominated version was sent by the server
  Type = id
  Min = 0
  Max = 1

 -- Row 27 -----------------------------------
  Name = closure.return
  Use = out
  Documentation = A list of new entries (code / system --> code/system) that the client should add to its closure table. The only kind of entry mapping equivalences that can be returned are equal, specializes, subsumes and unmatched
  Type = ConceptMap
  Min = 1
  Max = 1
